//
// Copyright Â© 2024 Kaleido, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: pkg/proto/paladin.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaladinGRPCTransport_MessageStream_FullMethodName = "/github.com.kaleido_io.paladin.transports.grpc.PaladinGRPCTransport/MessageStream"
)

// PaladinGRPCTransportClient is the client API for PaladinGRPCTransport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaladinGRPCTransportClient interface {
	MessageStream(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type paladinGRPCTransportClient struct {
	cc grpc.ClientConnInterface
}

func NewPaladinGRPCTransportClient(cc grpc.ClientConnInterface) PaladinGRPCTransportClient {
	return &paladinGRPCTransportClient{cc}
}

func (c *paladinGRPCTransportClient) MessageStream(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, PaladinGRPCTransport_MessageStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaladinGRPCTransportServer is the server API for PaladinGRPCTransport service.
// All implementations must embed UnimplementedPaladinGRPCTransportServer
// for forward compatibility.
type PaladinGRPCTransportServer interface {
	MessageStream(context.Context, *Message) (*Message, error)
	mustEmbedUnimplementedPaladinGRPCTransportServer()
}

// UnimplementedPaladinGRPCTransportServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaladinGRPCTransportServer struct{}

func (UnimplementedPaladinGRPCTransportServer) MessageStream(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageStream not implemented")
}
func (UnimplementedPaladinGRPCTransportServer) mustEmbedUnimplementedPaladinGRPCTransportServer() {}
func (UnimplementedPaladinGRPCTransportServer) testEmbeddedByValue()                              {}

// UnsafePaladinGRPCTransportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaladinGRPCTransportServer will
// result in compilation errors.
type UnsafePaladinGRPCTransportServer interface {
	mustEmbedUnimplementedPaladinGRPCTransportServer()
}

func RegisterPaladinGRPCTransportServer(s grpc.ServiceRegistrar, srv PaladinGRPCTransportServer) {
	// If the following call pancis, it indicates UnimplementedPaladinGRPCTransportServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaladinGRPCTransport_ServiceDesc, srv)
}

func _PaladinGRPCTransport_MessageStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaladinGRPCTransportServer).MessageStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaladinGRPCTransport_MessageStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaladinGRPCTransportServer).MessageStream(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// PaladinGRPCTransport_ServiceDesc is the grpc.ServiceDesc for PaladinGRPCTransport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaladinGRPCTransport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.kaleido_io.paladin.transports.grpc.PaladinGRPCTransport",
	HandlerType: (*PaladinGRPCTransportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MessageStream",
			Handler:    _PaladinGRPCTransport_MessageStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/paladin.proto",
}

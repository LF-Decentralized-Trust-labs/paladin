/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

configurations {
    // Resolvable configurations
    buildSDK {
        canBeConsumed = false
        canBeResolved = true
    }
    // Consumable configurations
    buildCommon {
        canBeConsumed = true
        canBeResolved = false
    }
}
 
dependencies {
    buildSDK project(path: ':sdk:typescript', configuration: 'buildSDK')
}

task npm_install_sdk(type: Exec) {
    executable 'npm'
    args 'install' 
    args 'file:../../sdk/typescript' // use local sdk

    inputs.files(configurations.buildSDK)
    inputs.files('package.json')
    outputs.files('package-lock.json')
    outputs.dir('node_modules')
}

task npm_install(type: Exec, dependsOn: npm_install_sdk) {
    executable 'npm'
    args 'install' 

    inputs.files(configurations.buildSDK)
    inputs.files('package.json')
    outputs.files('package-lock.json')
    outputs.dir('node_modules')
}

// Task to revert SDK to published version
task revert_sdk(type: Exec) {
    executable 'npm'
    args 'install' 
    args '@lfdecentralizedtrust-labs/paladin-sdk@latest'

    inputs.files(configurations.buildSDK)
    inputs.files('package.json')
    outputs.files('package-lock.json')
    outputs.dir('node_modules')
    
    description = 'Revert SDK to published version to prevent git changes'
}

task npm_build(type: Exec, dependsOn: npm_install) {
    executable 'npm'
    args 'run'
    args 'build'

    inputs.files('*.ts')
    outputs.dir('build')
}

task build(dependsOn: [npm_build]) {
    finalizedBy revert_sdk
}

task build_without_cleanup(dependsOn: [npm_build]) {
}

task clean(type: Delete) {
    delete 'node_modules'
    delete 'build'
    delete 'contracts'
}

dependencies {
    buildCommon files(build_without_cleanup)
}

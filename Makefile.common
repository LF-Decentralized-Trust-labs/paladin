# You can override these variables in your Makefile
SRC_DIR ?= ./pkg/...

# Common configuration
VGO=go
GOBIN := $(shell $(VGO) env GOPATH)/bin
CGO_ENABLED=0
GOGC=30
MOCKERY := $(GOBIN)/mockery
MOCKERY_VERSION := v2.40.2

# Install mockery if it is missing or at the wrong version
GET_MOCKERY_VERSION = $(shell $(MOCKERY) --version)

$(MOCKERY):
	$(VGO) install github.com/vektra/mockery/v2@$(MOCKERY_VERSION)

.PHONY: mockery
mockery: $(MOCKERY)
	@if [ $(GET_MOCKERY_VERSION) != "$(MOCKERY_VERSION)" ]; then \
		echo "Replacing mockery (wrong version found)" ; \
		$(MAKE) -B mockery; \
	fi

# General dependencies
.PHONY: deps
deps: mockery
	$(VGO) get $(SRC_DIR)
	$(VGO) mod tidy

# Mock setup
# makemock arguments: (path to interface code) (interface name) (output package) (pre-req targets)
.PHONY: mocks
define makemock
.PHONY: mocks-$(strip $(1))-$(strip $(2))
mocks: mocks-$(strip $(1))-$(strip $(2))
mocks-$(strip $(1))-$(strip $(2)): mockery $(4)
	$(MOCKERY) --case underscore --dir $(1) --name $(2) --outpkg $(3) --output mocks/$(strip $(3))
endef

# Linting
LINT := $(GOBIN)/golangci-lint
.PHONY: lint
lint: ${LINT}
	GOGC=20 $(LINT) run -v --timeout 5m
$(LINT):
	$(VGO) install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.55.2

# Testing
.PHONY: test-no-coverage-check
test-no-coverage-check: deps lint mocks
	$(VGO) test $(SRC_DIR)  -cover -coverprofile=coverage.txt -covermode=atomic -timeout=30s ${TEST_FLAGS}

.PHONY: coverage
coverage: test-no-coverage-check 
	$(VGO) tool cover -html=coverage.txt

# Target to enforce 100% coverage
.PHONY: test
test: test-no-coverage-check
	@echo "Checking test coverage..."
	@total_coverage=`$(VGO) tool cover -func=coverage.txt | grep total | awk '{print $$3}'`; \
	if [ "$$total_coverage" != "100.0%" ]; then \
		echo "ERROR: Coverage is not 100% (current coverage: $$total_coverage)"; \
		exit 1; \
	else \
		echo "Coverage is 100%"; \
	fi
	@rm -f coverage.txt

# Docker build
.PHONY: docker
docker:
	$(MAKE) docker -C ..
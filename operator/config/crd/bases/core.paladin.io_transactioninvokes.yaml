---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.16.3
  name: transactioninvokes.core.paladin.io
spec:
  group: core.paladin.io
  names:
    kind: TransactionInvoke
    listKind: TransactionInvokeList
    plural: transactioninvokes
    shortNames:
    - txinvoke
    singular: transactioninvoke
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.transactionStatus
      name: Status
      type: string
    - jsonPath: .status.contractDepsSummary
      name: Deps
      type: string
    - jsonPath: .status.transactionID
      name: TransactionID
      type: string
    - jsonPath: .status.transactionHash
      name: TxHash
      type: string
    - jsonPath: .status.failureMessage
      name: Failure
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: TransactionInvoke is the Schema for the transactioninvokes API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: TransactionInvokeSpec defines the desired state of TransactionInvoke
            properties:
              abiJSON:
                description: The ABI of the smart contract - provides the constructor
                  parameter definition
                type: string
              domain:
                description: Domain for private transactions
                type: string
              from:
                description: Reference to the signing key to use to deploy
                type: string
              function:
                description: The name or full signature of the function to invoke
                type: string
              node:
                description: The node to use to deploy - reference to a PaladinNode
                  CR
                type: string
              paramsJSONTemplate:
                description: |-
                  Go template that specifies the data JSON payload for the invocation
                  of the smart contract (array of input values, or map of inputs by name).
                  Once all pre-requisite contract deployments are completed, this template
                  will be executed with the JSON serialization of CR as the input
                  to the CR execution. As such it has access to fields like:
                  .status.resolvedContractAddresses
                type: string
              requiredContractDeployments:
                description: |-
                  A list of pre-requisite smart contract deployments that must be resolved
                  to contract addresses before the transaction can be built+submitted.
                  The set of smart contracts is built one-by-one as the smart contract deployments
                  complete, and once set a dependency does not change if the deployment CR
                  is deleted and re-created. So it is important to delete+recreate all
                  inter-related SmartContractDeployment and TransactionInvoke CRs in a set
                  when they are being used as a deployment engine for test infrastructure.

                  This is not intended as substitute to proper smart contract management
                  in production. Instead it is an excellent tool for rapid re-deployment
                  of test infrastructure.
                items:
                  type: string
                type: array
              toTemplate:
                description: |-
                  Go template that specifies the target smart contract for invocation.
                  See paramsJSONTemplate for more detail
                type: string
              txType:
                default: public
                description: Type of transaction to submit to Paladin
                enum:
                - public
                - private
                type: string
            required:
            - abiJSON
            - from
            - function
            - node
            - txType
            type: object
          status:
            description: TransactionInvokeStatus defines the observed state of TransactionInvoke
            properties:
              contractDepsSummary:
                type: string
              failureMessage:
                type: string
              idempotencyKey:
                type: string
              resolvedContractAddresses:
                additionalProperties:
                  type: string
                type: object
              transactionHash:
                type: string
              transactionID:
                type: string
              transactionStatus:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

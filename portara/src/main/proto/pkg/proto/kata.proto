/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

syntax = "proto3";

package paladin.kata;
option go_package = "pkg/proto";

service KataMessageService {
  // Bidirectional streams to send and receive messages. 
  // Each message is either a request message, a response message for a given request message, or an event message.
  // Each message type can be sent in either direction, although a response message is normaly sent in the opposite direction from its corresponding request message.
  rpc OpenStreams(stream Message) returns (stream Message) {}
  rpc Status(StatusRequest) returns (StatusResponse) {}
}

enum MESSAGE_TYPE {
  REQUEST_MESSAGE = 0;
  RESPONSE_MESSAGE = 1;
  EVENT_MESSAGE =2;
}

// Not sure if we need Quiesce messages rather than relying gRPC to gracefully close the streams
message QuiesceStreamRequest {
}

message QuiesceStreamResponse {
}

message StatusRequest {}

message StatusResponse {
  bool ok = 1;
}

message Message {
  MESSAGE_TYPE type = 1;
  string id = 2;
  oneof message {
    Request request = 16;
    Response response = 17;
    Event event = 18;
  }
}

message Request {
  string type = 1;
  string payload = 2;
}

message Response {
  string type = 1;
  string requestId = 2;
  string payload = 3;
}

message Event {
  string type = 1;
  string id = 2;
  string payload = 4;
}
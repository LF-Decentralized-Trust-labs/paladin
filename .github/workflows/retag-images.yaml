name: Retag Images

permissions:
  contents: read
  packages: write
  id-token: write

on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
        description: 'Commit ref for checkout (e.g., v1.2.3-rc.1)'
      source_tag:
        required: true
        type: string
        description: 'The source tag to retag from (e.g., v1.2.3-rc.1)'
      target_tag:
        required: true
        type: string
        description: 'The target tag to retag to (e.g., v1.2.3)'
      latest:
        required: false
        type: boolean
        default: false
        description: 'Whether to also tag the images with "latest"'
    secrets:
      DOCKERHUB_USERNAME:
        description: 'DockerHub username'
        required: true
      DOCKERHUB_TOKEN:
        description: 'DockerHub token'
        required: true

jobs:
  retag-dockerhub:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [paladin, paladin-operator]
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Set Repository Name
        id: repo
        uses: ./.github/actions/repository
        with:
          repository: ${{ github.repository_owner }}
          registry: docker.io

      - name: Retag multi-arch manifest
        run: |
          SOURCE_TAG="${{ inputs.source_tag }}"
          TARGET_TAG="${{ inputs.target_tag }}"
          REPO="${{ steps.repo.outputs.repository }}"
          IMAGE="${{ matrix.image }}"
          
          echo "Retagging multi-arch manifest ${REPO}/${IMAGE}:${SOURCE_TAG} -> ${REPO}/${IMAGE}:${TARGET_TAG}"
          
          # Use buildx imagetools to copy the multi-arch manifest
          docker buildx imagetools create \
            --tag docker.io/${REPO}/${IMAGE}:${TARGET_TAG} \
            docker.io/${REPO}/${IMAGE}:${SOURCE_TAG}
          
          # Create latest tag if requested
          if [[ "${{ inputs.latest }}" == "true" ]]; then
            echo "Also creating latest tag"
            docker buildx imagetools create \
              --tag docker.io/${REPO}/${IMAGE}:latest \
              docker.io/${REPO}/${IMAGE}:${SOURCE_TAG}
          fi

  retag-ghcr:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [paladin, paladin-operator]
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Set Repository Name
        id: repo
        uses: ./.github/actions/repository
        with:
          repository: ${{ github.repository_owner }}
          registry: ghcr.io

      - name: Retag multi-arch manifest
        run: |
          SOURCE_TAG="${{ inputs.source_tag }}"
          TARGET_TAG="${{ inputs.target_tag }}"
          REPO="${{ steps.repo.outputs.repository }}"
          IMAGE="${{ matrix.image }}"
          
          echo "Retagging multi-arch manifest ${REPO}/${IMAGE}:${SOURCE_TAG} -> ${REPO}/${IMAGE}:${TARGET_TAG}"
          
          # Use buildx imagetools to copy the multi-arch manifest
          docker buildx imagetools create \
            --tag ghcr.io/${REPO}/${IMAGE}:${TARGET_TAG} \
            ghcr.io/${REPO}/${IMAGE}:${SOURCE_TAG}
          
          # Create latest tag if requested
          if [[ "${{ inputs.latest }}" == "true" ]]; then
            echo "Also creating latest tag"
            docker buildx imagetools create \
              --tag ghcr.io/${REPO}/${IMAGE}:latest \
              ghcr.io/${REPO}/${IMAGE}:${SOURCE_TAG}
          fi

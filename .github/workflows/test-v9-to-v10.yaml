# This workflow tests the compatibility of the v0.9.0 to v0.10.0 upgrade
# once v0.10.0 is released, we can remove this workflow, as the test-rollout-compatibility.yaml workflow will cover compatibility in future versions

name: 'TEMP: Test v0.9.0 to v0.10.0 rollout'

permissions:
  contents: read
on:
  workflow_dispatch: 
    inputs:
      new_tag:
        description: 'The new v0.10.0-RC.* tag'
        required: true
        type: string

  workflow_call:
    inputs:
      new_tag:
        description: 'The new v0.10.0-RC.* tag'
        required: true
        type: string

jobs:
  validate-tags:
    runs-on: ubuntu-latest
    outputs:
      run_job: ${{ steps.run-job.outputs.run_job }}
      previous_tag: ${{ steps.previous-tag.outputs.previous_tag }}
    steps:
      - name: check that new tag is v0.10.0-RC.*
        id: run-job
        run: |
          if [[ "${{ inputs.new_tag }}" != v0.10.0-RC.* ]]; then
            echo "New tag must be v0.10.0-RC.*"
            echo "run_job=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "run_job=true" >> $GITHUB_OUTPUT # this is used to determine if the job should run

      - id: previous-tag
        name: Set previous tag
        run: |
          echo "previous_tag=v0.9.0" >> $GITHUB_OUTPUT
      - id: new-tag
        name: Set new tag
        run: |
          echo "new_tag=${{ inputs.new_tag }}" >> $GITHUB_OUTPUT
 
  rollout:
    # here are the steps:
    # 1. checkout the old tag
    # 2. create a cluster with kind
    # 3. install the helm charts (old version)
    # 4. run the tutorials as the user will run them
    # 5. rollout the new version of the paladin operator
    # 6. validate the installation after rollout
    # 7. test backwards compatibility with the old SDK version
    # 8. test backwards compatibility with the new SDK version
    # 9. destroy the cluster
    runs-on: ubuntu-latest
    needs: validate-tags
    if: needs.validate-tags.outputs.run_job == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            # we must checkout the main branch because the v0.9.0 tag does not have the needed scripts
            ref: main

      - name: Install Kind
        uses: helm/kind-action@v1
        with:
          install_only: true # only install kind, the cluster creation is managed by the next step
          ignore_failed_clean: true


      - name: Create cluster
        run: |
          # Download the kind configuration
          curl https://raw.githubusercontent.com/LF-Decentralized-Trust-labs/paladin/refs/heads/main/operator/paladin-kind.yaml -L -O
          
          # Create the cluster
          kind create cluster --name paladin --config paladin-kind.yaml
          
          # Wait for cluster to be ready
          kubectl wait --for=condition=Ready nodes --all --timeout=300s

      - name: Cache Helm repositories
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/helm
            ~/.config/helm
          key: ${{ runner.os }}-helm-repos-${{ hashFiles('**/helm-repos.lock') }}
          restore-keys: |
            ${{ runner.os }}-helm-repos-

      # Install the old version of the paladin operator
      - name: Install previous version of Paladin charts
        env:
          TAG: ${{ needs.validate-tags.outputs.previous_tag }}
        run: |
          # Step 1: Install the CRD Chart
          helm repo add paladin https://LF-Decentralized-Trust-labs.github.io/paladin --force-update
          helm repo add jetstack https://charts.jetstack.io --force-update
          helm repo update
          
          # Step 2: Install the CRD Chart
          helm upgrade --install paladin-crds paladin/paladin-operator-crd
          
          # Step 3: Install cert-manager CRDs
          helm install cert-manager --namespace cert-manager --version v1.16.1 jetstack/cert-manager --create-namespace --set crds.enabled=true --wait
          
          # Wait for cert-manager to be ready
          kubectl wait --for=condition=Ready pods --all -n cert-manager --timeout=300s
          
          # Step 3: Install the Paladin Operator Chart
          helm upgrade --install paladin paladin/paladin-operator -n paladin --create-namespace --version "$TAG" --wait

      - name: Validate installation
        env:
          IMAGE_TAG: ${{ needs.validate-tags.outputs.previous_tag }}
        run: |
          # Run the validation script
          ./scripts/default-installation-validation.sh paladin


      # we first run the tutorials so we can cache the addresses and the data
      - name: Run all examples
        env:
          IMAGE_TAG: ${{ needs.validate-tags.outputs.previous_tag }}
          PALADIN_ABI_VERSION: ${{ needs.validate-tags.outputs.previous_tag }}
          PALADIN_SDK_VERSION: ${{ needs.validate-tags.outputs.previous_tag }}
          RUN_COMMANDS: start,verify
        run: |
          # Run the examples script
          ./scripts/run-examples.sh paladin

      # Rollout the new version of the paladin operator
      - name: Rollout the new version of the paladin operator
        env:
          TAG: ${{ inputs.new_tag }}
        run: |
          # refresh local index
          helm repo update

          # install CRDs
          helm upgrade --install paladin-crds paladin/paladin-operator-crd --version "$TAG"

          # Rollout the new version of the paladin operator
          helm upgrade --install paladin paladin/paladin-operator -n paladin --create-namespace --version "$TAG" --wait

      # Validate the installation after rollout
      - name: Validate installation after rollout
        env:
          IMAGE_TAG: ${{ inputs.new_tag }}
        run: |
          # Run the validation script
          ./scripts/default-installation-validation.sh paladin
      
      # Test backwards compatibility with the old SDK version using the cached addresses and data
      - name: Test backwards compatibility with the old SDK version
        env:
          # we do not want to download the solidity contracts because the RC release is not yet available
          BUILD_PALADIN_ABI: false
          BUILD_PALADIN_SDK: false
          # this mode verifies the historical data
          RUN_COMMANDS: verify
          PALADIN_ABI_VERSION: ${{ needs.validate-tags.outputs.previous_tag }}
          PALADIN_SDK_VERSION: ${{ needs.validate-tags.outputs.previous_tag }}
        run: |
          # Run the examples script
          ./scripts/run-examples.sh paladin

      # Test backwards compatibility with the new SDK version using the cached addresses and data
      - name: Test backwards compatibility with the new SDK version
        env:
          # we do not want to download the solidity contracts because the RC release is not yet available
          BUILD_PALADIN_ABI: true
          BUILD_PALADIN_SDK: true
          # this mode verifies the historical data
          RUN_COMMANDS: verify
        run: |
          # Run the examples script
          ./scripts/run-examples.sh paladin
      
      - name: Cleanup cluster
        if: always()
        run: |
          kind delete cluster --name paladin
      
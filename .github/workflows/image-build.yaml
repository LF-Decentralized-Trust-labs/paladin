name: build

on:
  workflow_call:
    inputs:
      artifacts_path:
        required: true
        type: string
      image_regstry:
        required: false
        type: string
        description: 'image registry'
        default: ''
      image_name:
        required: false
        type: string
        description: 'Name of the image to build'
        default: 'paladin'
      image_tag:
        required: true
        type: string
        description: 'Version of the image to build'
      build_platform:
        required: false
        type: string
        description: 'Platform to build the image for'
        default: 'linux/amd64'
        # default: 'linux/amd64,linux/arm64'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - uses: actions/download-artifact@v4
        name: Download build artifacts
        with:
          name: paladin-libs
          path: ${{ inputs.artifacts_path }}
          if-no-files-found: error

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

    # TODO: Setup docker registry
    #   - name: Login to Docker registry
    #     if: ${{ inputs.image_regstry != '' }}
    #     uses: docker/login-action@v3
    #     with:
    #       registry: ${{ inputs.image_regstry }}
    #       username: ${{ secrets.REGISTRY_USERNAME }}
    #       password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build
        uses: docker/build-push-action@v3
        with:
          sbom: true
          file: Dockerfile
          tags: ${{ inputs.image_regstry }}/${{ inputs.image_name }}:${{ inputs.image_tag }}
          platforms: ${{ inputs.BUILD_PLATFORM }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: false
      
      # TODO: Run a basic test to make sure the image was built correctly
      # This is just a placeholder, we should replace this with a real test
      # - name: Test the image
      #   run: |
      #     docker run -d -p <>:<> --name paladin-test \
      #     -v <path to config file on host>:<path to config file> \
      #     ${{ inputs.image_regstry }}/${{ inputs.image_name }}:${{ inputs.image_tag }} \
      #     -Djna.library.path=/app \
      #     -jar paladin.jar <path to config file> <node name>
      #     sleep 5
      #     docker logs paladin-test | grep 'Started PaladinApplication' && echo 'Test passed' || echo 'Test failed'
      #   timeout-minutes: 5

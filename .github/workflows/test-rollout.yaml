name: 'Test new version rollout'

on:
  workflow_dispatch: 
    inputs:
      tag:
        description: 'The new tag to rollout'
        required: true
        type: string
  workflow_call:
    inputs:
      tag:
        description: 'The new tag to rollout'
        required: true
        type: string

jobs:
  rollout:
    # here are the steps:
    # 1. create a cluster with kind
    # 2. install the helm charts (latest version)
    # 3. run the examples as the user will run them
        # 3.1. Download the solidity files
        # 3.2. Run the examples
    # 4. rollout the new version of the paladin operator
    # 5. validate the installation after rollout
    # 6. run the examples for backwards compatibility
    # 7. destroy the cluster
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Kind
        uses: helm/kind-action@v1
        with:
          install_only: true # only install kind, the cluster creation is managed by the next step
          ignore_failed_clean: true

      - name: Create cluster
        run: |
          # Download the kind configuration
          curl https://raw.githubusercontent.com/LF-Decentralized-Trust-labs/paladin/refs/heads/main/operator/paladin-kind.yaml -L -O
          
          # Create the cluster
          kind create cluster --name paladin --config paladin-kind.yaml
          
          # Wait for cluster to be ready
          kubectl wait --for=condition=Ready nodes --all --timeout=300s

      - name: Install latest Paladin charts
        run: |
          # Step 1: Install the CRD Chart
          helm repo add paladin https://LF-Decentralized-Trust-labs.github.io/paladin --force-update
          helm upgrade --install paladin-crds paladin/paladin-operator-crd
          
          # Step 2: Install cert-manager CRDs
          helm repo add jetstack https://charts.jetstack.io --force-update
          helm install cert-manager --namespace cert-manager --version v1.16.1 jetstack/cert-manager --create-namespace --set crds.enabled=true
          
          # Wait for cert-manager to be ready
          kubectl wait --for=condition=Ready pods --all -n cert-manager --timeout=300s
          
          # Step 3: Install the Paladin Operator Chart
          helm upgrade --install paladin paladin/paladin-operator -n paladin --create-namespace

      - name: Validate installation
        run: |
          # Run the validation script
          ./scripts/default-installation-validation.sh paladin

      - name: Run all examples
        env:
          BUILD_PALADIN_ABI: false
          BUILD_PALADIN_SDK: false
          RUN_MODE: start
          PALADIN_ABI_VERSION: latest # run the latest version
        run: |
          # Run the examples script
          ./scripts/run-examples.sh

      - name: Rollout the new version of the paladin operator
        run: |
          # check if the paladin-crd has a new tag as well 
          if [ $(helm search repo paladin-operator --version | grep ${{ inputs.tag }} -c) -eq 0 ]; then
            helm upgrade --install paladin-crds paladin/paladin-operator-crd --version ${{ inputs.tag }}
          fi

          # Rollout the new version of the paladin operator
          helm upgrade --install paladin paladin/paladin-operator -n paladin --create-namespace --version ${{ inputs.tag }}

      - name: Validate installation after rollout
        env:
          IMAGE_TAG: ${{ inputs.tag }} # The script will complete successfully when all pods have the new image tag
        run: |
          # Run the validation script
          ./scripts/default-installation-validation.sh paladin
      
     
      - name: Run all examples for backwards compatibility
        env:
          # we do not want to download the solidity contracts because the RC release is not yet available
          BUILD_PALADIN_ABI: false
          BUILD_PALADIN_SDK: false
          # this mode verifies the historical data
          RUN_MODE: verify

          PALADIN_ABI_VERSION: ${{ inputs.tag }} # run the RC version

        run: |
          # Run the examples script
          ./scripts/run-examples.sh
      
      # Now that we tested backwards compatibility, we can run the examples again and make sure they pass (with the RC SDK version)
      - name: Run all examples with the RC SDK version
        env:
          # Use the RC SDK version that was published
          BUILD_PALADIN_ABI: false
          BUILD_PALADIN_SDK: false
          PALADIN_ABI_VERSION: ${{ inputs.tag }}
          # this mode runs the tutorials as the user will run them
          RUN_MODE: start
        run: |
          # Run the examples script
          ./scripts/run-examples.sh
      
      - name: Cleanup cluster
        if: always()
        run: |
          kind delete cluster --name paladin
      
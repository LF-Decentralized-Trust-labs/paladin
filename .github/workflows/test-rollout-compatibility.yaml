name: 'Test Rollout Compatibility'

permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      new_tag:
        description: 'The new RC tag to test for compatibility (e.g., v1.2.3-rc.1)'
        required: true
        type: string
  workflow_call:
    inputs:
      new_tag:
        description: 'The new RC tag to test for compatibility (e.g., v1.2.3-rc.1)'
        required: true
        type: string

jobs:
  test-rollout-compatibility:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # Fetch all history and tags to build the upgrade path
          fetch-depth: 0

      - name: Get all previous release tags
        id: get_tags
        shell: bash
        run: |
          echo "Finding all tags before ${{ inputs.new_tag }}..."
          
          all_tags=$(git tag --sort=v:refname)
          new_tag="${{ inputs.new_tag }}"
          previous_tags=""
          
          # Loop through all sorted tags and collect the ones that come before the new_tag
          while read -r tag; do
            # Stop when we reach the new tag
            if [[ "$tag" == "$new_tag" ]]; then
              break
            fi
            
            # Filter for final releases only (e.g., vX.Y.Z, not RCs)
            if [[ "$tag" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              # Add the tag to our list, separated by a space
              previous_tags+="$tag "
            fi
          done <<< "$all_tags"
          
          echo "Found previous tags: $previous_tags"
          
          # Convert the space-separated string to a JSON array for the matrix
          tags_json=$(echo "$previous_tags" | tr ' ' '\n' | grep -v '^$' | jq -R . | jq -s .)
          echo "tags=$tags_json" >> $GITHUB_OUTPUT

      - name: Install Dependencies
        uses: ./.github/actions/setup

      - name: Install Kind and Helm
        uses: helm/kind-action@v1.10.0
        with:
          install_only: true
          ignore_failed_clean: true

      - name: Create Kind Cluster
        run: |
          curl -sL https://raw.githubusercontent.com/LF-Decentralized-Trust-labs/paladin/main/operator/paladin-kind.yaml -o paladin-kind.yaml
          kind create cluster --name paladin --config paladin-kind.yaml
          kubectl wait --for=condition=Ready nodes --all --timeout=300s

      - name: Add Helm Repositories
        run: |
          helm repo add paladin https://LF-Decentralized-Trust-labs.github.io/paladin --force-update
          helm repo add jetstack https://charts.jetstack.io --force-update
          helm repo update
          
          # Install shared dependencies like cert-manager
          helm upgrade --install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --set installCRDs=true --wait
          helm upgrade --install paladin-crds paladin/paladin-operator-crd

      - name: Phase 1 - Sequentially Install and Cache Data
        id: cache_data
        shell: bash
        run: |
          # The address cache file will persist within this job
          ADDRESS_CACHE_FILE="/tmp/address_cache.json"
          echo '{}' > "$ADDRESS_CACHE_FILE"
          
          # Loop through each previous version to simulate upgrades
          for tag in $(echo '${{ steps.get_tags.outputs.tags }}' | jq -r '.[]'); do
            echo "--- Processing version $tag ---"
            
            echo "Upgrading Helm chart to $tag..."
            helm upgrade --install paladin paladin/paladin-operator -n paladin --create-namespace --version "$tag" --wait
            
            echo "Checking out git ref $tag to run examples..."
            git checkout "$tag"
            
            echo "Running examples to cache data for $tag..."
            # This script is assumed to append its results to the cache file
            RUN_COMMANDS=start PALADIN_ABI_VERSION="$tag" ./scripts/run-examples.sh "$ADDRESS_CACHE_FILE" "$tag"
          done

      - name: Phase 2 - Upgrade to RC and Verify Compatibility
        id: verify_compatibility
        shell: bash
        run: |
          ADDRESS_CACHE_FILE="/tmp/address_cache.json"
          NEW_TAG="${{ inputs.new_tag }}"
          
          echo "--- Upgrading to Release Candidate $NEW_TAG ---"
          helm upgrade --install paladin paladin/paladin-operator -n paladin --version "$NEW_TAG" --wait
          
          echo "--- Verifying Backwards Compatibility ---"
          # Loop through each previous version again to test against the upgraded cluster
          for tag in $(echo '${{ steps.get_tags.outputs.tags }}' | jq -r '.[]'); do
            echo "--- Verifying data from $tag ---"
            
            echo "Checking out git ref $tag..."
            git checkout "$tag"
            
            echo "Verifying $tag data with OLD ($tag) SDK..."
            RUN_COMMANDS=verify PALADIN_ABI_VERSION="$tag" ./scripts/run-examples.sh "$ADDRESS_CACHE_FILE" "$tag"
            
            echo "Verifying $tag data with NEW ($NEW_TAG) SDK..."
            RUN_COMMANDS=verify PALADIN_ABI_VERSION="$NEW_TAG" ./scripts/run-examples.sh "$ADDRESS_CACHE_FILE" "$tag"
          done

      - name: Phase 3 - Test RC Natively
        id: test_rc
        shell: bash
        run: |
          NEW_TAG="${{ inputs.new_tag }}"
          ADDRESS_CACHE_FILE="/tmp/address_cache.json"
          
          echo "--- Testing Release Candidate $NEW_TAG Natively ---"
          git checkout "$NEW_TAG"
          
          # Run the full example suite with the new version
          RUN_COMMANDS=start,verify PALADIN_ABI_VERSION="$NEW_TAG" ./scripts/run-examples.sh "$ADDRESS_CACHE_FILE" "$NEW_TAG"

      - name: Cleanup cluster
        if: always()
        run: kind delete cluster --name paladin

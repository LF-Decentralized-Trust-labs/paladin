# This workflow manages the first phase of the two-phase release process:
#   1. Create a release candidate (RC) tag and publish all artifacts (images, charts, SDK, etc.) for testing.
#   2. After successful testing of the RC artifacts, proceed to create the final release with the "latest" tag.
# The goal is to ensure all released artifacts are validated before making the final release public. 
# The final release (phase 2) is created by the `release` workflow.
name: Release Candidate

permissions:
  contents: write
  packages: write
  id-token: write

on:
  push:
    tags:
      - 'v*.*.*-rc.*'
  workflow_dispatch:
    inputs:
      tag:
        required: true
        type: string
        description: 'Release candidate tag (e.g., v0.1.0-rc.1)'

jobs:
  # ================================ SETUP ================================
  setup:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-vars.outputs.tag }}
      previous_tag: ${{ steps.get-latest-tag.outputs.previous_tag }}
      npm_prerelease_tag: ${{ steps.parse-rc-tags.outputs.prerelease_tag }}
      npm_rc_number: ${{ steps.parse-rc-tags.outputs.rc_number }}
    steps:
      - id: set-vars
        shell: bash
        env:
          EVENT_NAME: ${{ github.event_name }}
          REF: ${{ github.ref }}
          INPUT_TAG: ${{ github.event.inputs.tag }}
        run: |
          if [[ "$EVENT_NAME" == "push" && "$REF" == refs/tags/v* ]]; then
            echo "Tag push event"
            TAG="${REF##*/}"
          else
            echo "Workflow dispatch or other event"
            TAG="$INPUT_TAG"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - id: get-latest-tag
        name: Get latest tag
        run: |
          # get the latest github tag of this repository
          RELEASE_TAG=$(curl https://api.github.com/repos/${{ github.repository }}/releases/latest -s | jq .tag_name -r)
          echo "previous_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
      - id: ref-tag
        name: Validate ref tag follows semver versioning
        uses: matt-usurp/validate-semver@v2
        with:
          version: ${{ steps.set-vars.outputs.tag }}

      - id: parse-rc-tags
        name: Parse RC tags for NPM
        shell: bash
        run: |
          PRERELEASE_TAG="${{ steps.ref-tag.outputs.prerelease }}"
          RC_NUMBER=$(echo "$PRERELEASE_TAG" | cut -d '.' -f 2)
          echo "prerelease_tag=$PRERELEASE_TAG" >> $GITHUB_OUTPUT
          echo "rc_number=$RC_NUMBER" >> $GITHUB_OUTPUT
          
      - name: Validate workflow triggered from RC tag only
        shell: bash
        env:
          REF_TAG_PRERELEASE: ${{ steps.ref-tag.outputs.prerelease }}
          REF_TAG_VERSION: ${{ steps.ref-tag.outputs.version }}
          REF: ${{ steps.set-vars.outputs.tag }}
        run: |
          if [[ -z "$REF_TAG_PRERELEASE" ]]; then
            echo "This workflow can only be triggered from an RC tag (e.g., v1.2.3-rc1)."
            echo "Current ref: $REF"
            exit 1
          fi
          
          # Validate that prerelease follows rc.X format
          if [[ ! "$REF_TAG_PRERELEASE" =~ ^rc\.[0-9]+$ ]]; then
            echo "RC tag must follow the format vX.Y.Z-rc.W (e.g., v1.2.3-rc.1)."
            echo "Current prerelease suffix: $REF_TAG_PRERELEASE"
            exit 1
          fi
          
          echo "Valid RC tag: $REF_TAG_VERSION"
      

  # ================================ BUILD ARTIFACTS ================================
  # Build and prepare all release artifacts (images, charts, contracts, SDK)

  # Build and publish RC images
  release-images:
    needs: setup
    uses: ./.github/workflows/release-images.yaml
    with:
      tag: ${{ needs.setup.outputs.tag }}
      latest: false
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  # Test and release RC Helm charts
  release-charts:
    needs: [setup, release-images]
    uses: ./.github/workflows/release-charts.yaml
    with:
      chart_tag: ${{ needs.setup.outputs.tag }}
      images_tag: ${{ needs.setup.outputs.tag }}
      registry: docker.io
    secrets:
      CR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  test-examples:
    needs: [setup, release-charts]
    uses: ./.github/workflows/test-examples.yaml
    with:
      build_local_abi: true
      build_local_sdk: true
      chart_tag: ${{ needs.setup.outputs.tag }}

  # Upload Solidity contracts
  release-solidity-contracts:
    needs: [setup, test-examples]
    uses: ./.github/workflows/release-solidity-contracts.yaml
    with:
      tag: ${{ needs.setup.outputs.tag }}

  # Release TypeScript SDK
  release-typescript-sdk:
    needs: [setup, test-examples]
    uses: ./.github/workflows/release-typescript-sdk.yaml
    with:
      sdk_version: ${{ needs.setup.outputs.tag }}
      # Construct the semicolon-separated string.
      # For a tag like 'v0.1.0-rc.1', this will become "rc;rc.1"
      # We can't use the rc_number (e.g. 1)because it's not a valid npm tag
      sdk_tag: "rc;${{ needs.setup.outputs.npm_prerelease_tag }}"
    secrets:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # ================================ PRE-RELEASE TESTING ================================
  # Test that the built artifacts are compatible and functional before creating the RC release
    
  test-rollout-compatibility:
    needs: [setup, release-solidity-contracts, release-typescript-sdk]
    uses: ./.github/workflows/test-rollout-compatibility.yaml
    with:
      new_tag: ${{ needs.setup.outputs.tag }}

  # ================================ Prepare release ================================
  # Override SDK version in examples and create a release branch
  prepare-release:
    needs: [setup, test-rollout-compatibility]
    runs-on: ubuntu-latest
    outputs:
      new_sha: ${{ steps.commit.outputs.NEW_SHA }}

    steps:
    - name: Checkout repository code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: override examples sdk version
      uses: ./.github/actions/override-sdk-version
      with:
        sdk_version: ${{ needs.setup.outputs.tag }}

    - name: Commit changes
      id: commit
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add examples/
        git commit -m "chore: Update SDK version in examples to ${{ needs.setup.outputs.tag }}"
        git push origin HEAD:refs/heads/release-${{ needs.setup.outputs.tag }}
        echo "NEW_SHA=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT


  # ================================ CREATE RC RELEASE ================================
  # Only create the RC release after all tests have passed
  # This step bundles all built artifacts and creates the GitHub release
  create-rc-release:
    needs: [setup, prepare-release]
    runs-on: ubuntu-latest
    steps:

      - name: Download Helm artifacts
        uses: actions/download-artifact@v4
        with:
          name: helm-artifacts
          path: helm-artifacts/

      - name: Download Solidity artifacts
        uses: actions/download-artifact@v4
        with:
          name: contracts
          path: contracts/
      - name: Create release candidate with all artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.setup.outputs.tag }}
          target_commitish: ${{ needs.prepare-release.outputs.new_sha }} # Use the commit sha with the updated examples
          body: "Release Candidate ${{ needs.setup.outputs.tag }}"
          generate_release_notes: true
          make_latest: "false" # RC releases are never marked as latest
          prerelease: true
          files: |
            helm-artifacts/basenet.yaml
            helm-artifacts/customnet.yaml
            helm-artifacts/attach.yaml
            helm-artifacts/devnet.yaml
            helm-artifacts/artifacts.tar.gz
            contracts/abis.tar.gz
            contracts/zeto-abis.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

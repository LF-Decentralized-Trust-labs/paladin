# This workflow manages the second phase of the two-phase release process:
#   1. Create a release candidate (RC) tag and publish all artifacts (images, charts, SDK, etc.) for testing.
#   2. After successful testing of the RC artifacts, proceed to create the final release with the "latest" tag.
# The goal is to ensure all released artifacts are validated before making the final release public. 
# This workflow (phase 2) creates the final release after RC testing has been completed.
name: Release

permissions:
  contents: write
  packages: write
  id-token: write
  
on:
  workflow_dispatch:
    inputs:
      rc_tag:
        required: true
        type: string
        description: 'RC tag to create the final release from (e.g. v1.2.3-rc.1)'

      tag:
        required: true
        type: string
        description: 'Release tag (e.g. v1.2.3)'

      latest:
        required: false
        type: boolean
        default: true
        description: 'Whether to mark this as the latest release'

jobs:
  # ================================ SETUP ================================
  # Validate the release tag and ensure it's a final release (not an RC)
  setup:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-vars.outputs.tag }}
      latest: ${{ steps.set-vars.outputs.latest }}
      sdk_tag: ${{ steps.set-vars.outputs.sdk_tag }}
      rc_tag: ${{ steps.set-vars.outputs.rc_tag }}
    steps:
      - id: set-vars
        shell: bash
        env:
          EVENT_NAME: ${{ github.event_name }}
          REF: ${{ github.ref }}
          INPUT_TAG: ${{ github.event.inputs.tag }}
          INPUT_LATEST: ${{ github.event.inputs.latest }}
          INPUT_RC_TAG: ${{ github.event.inputs.rc_tag }}
        run: |
          
          echo "Workflow dispatch or other event"
          TAG="$INPUT_TAG"
          RC_TAG="$INPUT_RC_TAG"
          
          # Validate tags begin with 'v'
          if [[ ! "$TAG" =~ ^v ]]; then
            echo "Error: Release tag must begin with 'v' (e.g., v1.2.3)"
            echo "Got: $TAG"
            exit 1
          fi
          
          if [[ ! "$RC_TAG" =~ ^v ]]; then
            echo "Error: RC tag must begin with 'v' (e.g., v1.2.3-rc.1)"
            echo "Got: $RC_TAG"
            exit 1
          fi
          
          # Ensure INPUT_LATEST is 'true' or 'false' string
          if [[ "$INPUT_LATEST" == "true" ]]; then
            LATEST="true"
            SDK_TAG="latest"
          else
            LATEST="false"
            SDK_TAG="stable"
          fi

          {
            echo "tag=$TAG"
            echo "latest=$LATEST"
            echo "sdk_tag=$SDK_TAG"
            echo "rc_tag=$RC_TAG"
          } >> $GITHUB_OUTPUT
      
      - id: new-tag
        name: Validate new tag follows semver versioning
        uses: matt-usurp/validate-semver@v2
        with:
          version: ${{ steps.set-vars.outputs.tag }}
          
      - id: rc-tag
        name: Validate RC tag follows semver versioning
        uses: matt-usurp/validate-semver@v2
        with:
          version: ${{ steps.set-vars.outputs.rc_tag }}
          
      - name: Validate workflow triggered from RC tag only
        shell: bash
        env:
          RC_TAG_PRERELEASE: ${{ steps.rc-tag.outputs.prerelease }}
          RC_TAG_VERSION: ${{ steps.rc-tag.outputs.version }}
        run: |
          if [[ -z "$RC_TAG_PRERELEASE" ]]; then
            echo "This workflow can only be triggered from an RC tag (e.g. v1.2.3-rc.1)."
            echo "Current RC tag: $RC_TAG_VERSION"
            exit 1
          fi
          
          # Validate that prerelease follows rc.X format
          if [[ ! "$RC_TAG_PRERELEASE" =~ ^rc\.[0-9]+$ ]]; then
            echo "RC tag must follow the format vX.Y.Z-rc.W (e.g., v1.2.3-rc.1)."
            echo "Current prerelease suffix: $RC_TAG_PRERELEASE"
            exit 1
          fi
          
          echo "Valid RC tag: $RC_TAG_VERSION"

      - name: Validate tag is final and RC exists
        shell: bash
        env:
          NEW_TAG_PRERELEASE: ${{ steps.new-tag.outputs.prerelease }}
          NEW_TAG_MAJOR: ${{ steps.new-tag.outputs.major }}
          NEW_TAG_MINOR: ${{ steps.new-tag.outputs.minor }}
          NEW_TAG_PATCH: ${{ steps.new-tag.outputs.patch }}
          NEW_TAG_VERSION: ${{ steps.new-tag.outputs.version }}
          RC_TAG_MAJOR: ${{ steps.rc-tag.outputs.major }}
          RC_TAG_MINOR: ${{ steps.rc-tag.outputs.minor }}
          RC_TAG_PATCH: ${{ steps.rc-tag.outputs.patch }}
        run: |
          # Ensure the tag is NOT an RC
          if [[ -n "$NEW_TAG_PRERELEASE" ]]; then
            echo "Final releases must NOT be RC tags. Got: $TAG"
            exit 1
          fi

          if [[ "$RC_TAG_MAJOR" != "$NEW_TAG_MAJOR" ]]; then
            echo "New tag major version does not match RC tag major version $RC_TAG_MAJOR != $NEW_TAG_MAJOR"
            exit 1
          fi
          if [[ "$RC_TAG_MINOR" != "$NEW_TAG_MINOR" ]]; then
            echo "New tag minor version does not match RC tag minor version $RC_TAG_MINOR != $NEW_TAG_MINOR"
            exit 1
          fi
          if [[ "$RC_TAG_PATCH" != "$NEW_TAG_PATCH" ]]; then
            echo "New tag patch version does not match RC tag patch version $RC_TAG_PATCH != $NEW_TAG_PATCH"
            exit 1
          fi

          echo "Valid tag: $NEW_TAG_VERSION"


  # ================================ BUILD ARTIFACTS ================================
  # Build and prepare all final release artifacts (images, charts, contracts, SDK)
  # These are the same artifacts that were tested in the RC phase

  # Retag RC images with final release tags (much faster than rebuilding)
  release-images:
    needs: setup
    uses: ./.github/workflows/retag-images.yaml
    with:
      ref: ${{ needs.setup.outputs.rc_tag }}
      source_tag: ${{ needs.setup.outputs.rc_tag }}
      target_tag: ${{ needs.setup.outputs.tag }}
      latest: '${{ fromJSON(needs.setup.outputs.latest) }}'
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  # Test and release final Helm charts
  release-charts:
    needs: [setup, release-images]
    uses: ./.github/workflows/release-charts.yaml
    with:
      ref: ${{ needs.setup.outputs.rc_tag }}
      chart_tag: ${{ needs.setup.outputs.tag }}
      images_tag: ${{ needs.setup.outputs.tag }}
      registry: docker.io
      
    secrets:
      CR_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-examples:
    needs: [setup, release-charts]
    uses: ./.github/workflows/test-examples.yaml
    with:
      ref: ${{ needs.setup.outputs.rc_tag }}
      build_local_abi: true
      build_local_sdk: true
      chart_tag: ${{ needs.setup.outputs.tag }}

  # Upload final Solidity contracts
  release-solidity-contracts:
    needs: [setup, test-examples]
    uses: ./.github/workflows/release-solidity-contracts.yaml
    with:
      ref: ${{ needs.setup.outputs.rc_tag }}
      tag: ${{ needs.setup.outputs.tag }}

  # Release final TypeScript SDK
  release-typescript-sdk:
    needs: [setup, test-examples]
    uses: ./.github/workflows/release-typescript-sdk.yaml
    with:
      ref: ${{ needs.setup.outputs.rc_tag }}
      sdk_version: ${{ needs.setup.outputs.tag }}
      sdk_tag: ${{ needs.setup.outputs.sdk_tag }}
    secrets:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }} 

  # ================================ Prepare release ================================
  # Override SDK version in examples and create a release branch
  prepare-release:
    needs: [setup, release-solidity-contracts, release-typescript-sdk]
    runs-on: ubuntu-latest
    outputs:
      new_sha: ${{ steps.commit.outputs.NEW_SHA }}

    steps:
    - name: Checkout repository code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ needs.setup.outputs.rc_tag }}

    - name: override examples sdk version
      uses: ./.github/actions/override-sdk-version
      with:
        sdk_version: ${{ needs.setup.outputs.tag }}

    - name: Commit changes
      id: commit
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add examples/
        git commit -m "chore: Update SDK version in examples to ${{ needs.setup.outputs.tag }}"
        git push origin HEAD:refs/heads/release-${{ needs.setup.outputs.tag }}
        echo "NEW_SHA=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

  # ================================ CREATE FINAL RELEASE ================================
  # Bundle all built artifacts and create the final GitHub release
  # This step only runs after all artifacts have been successfully built and published
  create-final-release:
    needs: [setup, prepare-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          ref: ${{ needs.setup.outputs.rc_tag }}

      - name: Download Helm artifacts
        uses: actions/download-artifact@v4
        with:
          name: helm-artifacts
          path: helm-artifacts/

      - name: Download Solidity artifacts
        uses: actions/download-artifact@v4
        with:
          name: contracts
          path: contracts/

      - name: List downloaded artifacts
        run: |
          ls -R
      - name: Create final release with all artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.setup.outputs.tag }}
          target_commitish: ${{ needs.prepare-release.outputs.new_sha }}
          body: "Release ${{ needs.setup.outputs.tag }}"
          generate_release_notes: true
          make_latest: '${{ fromJSON(needs.setup.outputs.latest) }}'
          files: |
            helm-artifacts/basenet.yaml
            helm-artifacts/devnet.yaml
            helm-artifacts/customnet.yaml
            helm-artifacts/attach.yaml
            helm-artifacts/artifacts.tar.gz
            contracts/zeto-abis.tar.gz
            contracts/abis.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


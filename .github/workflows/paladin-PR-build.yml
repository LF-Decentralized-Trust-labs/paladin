name: Paladin CI build

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      # Install protoc only on non-Windows systems
      - name: Install protoc
        run: |
          PB_REL="https://github.com/protocolbuffers/protobuf/releases"
          curl -LO $PB_REL/download/v25.1/protoc-25.1-linux-x86_64.zip
          unzip protoc-25.1-linux-x86_64.zip -d protoc
          echo "${PWD}/protoc/bin" >> $GITHUB_PATH

      # Set up Java
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          check-latest: true
          cache-dependency-path: |
            **/*.sum

      # Set up Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      # Build with Gradle
      # This does not build any docker images, and does not run any dockerized tests.
      # It does run Go/Java/Solidity component and integration tests that use PostgreSQL and Besu
      - name: Build with Gradle
        run: ./gradlew -PcomposeLogs=true -PverboseTests=true -Pci=true --no-daemon --parallel --max-workers=5 build

      - name: Upload Go test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: "**/results/**.json"
          retention-days: 7 # default is 90 days
          compression-level: 0 # 0-9, 0 is no compression, 9 is maximum compression, default is 6

  
  image-build:
    runs-on: ubuntu-latest
    env:
      IMAGE_REGISTRY: kaleido.io  # just a placeholder
      IMAGE_NAME: paladin
      IMAGE_TAG: test  # just a placeholder, we should replace this with the workflow run number
      BUILD_PLATFORM: linux/amd64
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

    # TODO: Setup docker registry
    #   - name: Login to Docker registry
    #     if: ${{ env.IMAGE_REGISTRY != '' }}
    #     uses: docker/login-action@v3
    #     with:
    #       registry: ${{ env.IMAGE_REGISTRY }}
    #       username: ${{ secrets.REGISTRY_USERNAME }}
    #       password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build
        uses: docker/build-push-action@v3
        with:
          sbom: true
          file: Dockerfile
          tags: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          platforms: ${{ env.BUILD_PLATFORM }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: false
      
      # TODO: Run a basic test to make sure the image was built correctly
      # This is just a placeholder, we should replace this with a real test
      # - name: Test the image
      #   run: |
      #     docker run -d -p <>:<> --name paladin-test \
      #     -v <path to config file on host>:<path to config file> \
      #     ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
      #     -Djna.library.path=/app \
      #     -jar paladin.jar <path to config file> <node name>
      #     sleep 5
      #     docker logs paladin-test | grep 'Started PaladinApplication' && echo 'Test passed' || echo 'Test failed'
      #   timeout-minutes: 5
      

name: Paladin CI build

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      # Install protoc only on non-Windows systems
      - name: Install protoc (Linux/MacOS)
        if: runner.os != 'Windows'
        run: |
          PB_REL="https://github.com/protocolbuffers/protobuf/releases"
          curl -LO $PB_REL/download/v25.1/protoc-25.1-${{ runner.os == 'Linux' && 'linux' || 'osx' }}-x86_64.zip
          unzip protoc-25.1-${{ runner.os == 'Linux' && 'linux' || 'osx' }}-x86_64.zip -d protoc
          echo "${PWD}/protoc/bin" >> $GITHUB_PATH

      # Skip protoc installation for Windows
      - name: Install protoc (Windows)
        if: runner.os == 'Windows'
        run: |
          curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v25.1/protoc-25.1-win64.zip
          unzip protoc-25.1-win64.zip -d protoc
          echo "${PWD}/protoc/bin" >> $GITHUB_PATH

      # Set up Java
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          check-latest: true
          cache-dependency-path: |
            **/*.sum

      # Set up Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      # Build with Gradle
      - name: Build with Gradle
        run: ./gradlew -PcomposeLogs=true -PverboseTests=true --no-daemon --parallel build

      # Run the Gradle assemble task
      - name: Run Gradle assemble
        run: ./gradlew assemble

      # Verify the files in build/libs for all OS types
      - name: Check files in build/libs
        run: |
          test -f build/libs/${{ runner.os == 'Windows' && 'libstarter.dll' || (runner.os == 'macOS' && 'libstarter.dylib' || 'libstarter.so') }} || (echo "libstarter library not found" && exit 1)
          test -f build/libs/libstarter.h || (echo "libstarter.h not found" && exit 1)
          test -f build/libs/${{ runner.os == 'Windows' && 'libcore.dll' || (runner.os == 'macOS' && 'libcore.dylib' || 'libcore.so') }} || (echo "libcore library not found" && exit 1)
          test -f build/libs/libcore.h || (echo "libcore.h not found" && exit 1)
          test -f build/libs/paladin.jar || (echo "paladin.jar not found" && exit 1)

      # Verify the files in build/domains
      - name: Check files in build/domains
        run: |
          test -f build/domains/pente.jar || (echo "pente.jar not found" && exit 1)

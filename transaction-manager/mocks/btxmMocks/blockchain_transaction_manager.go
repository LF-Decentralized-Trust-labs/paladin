// Code generated by mockery v2.40.2. DO NOT EDIT.

package btxmMocks

import (
	context "context"

	apitypes "github.com/hyperledger/firefly-transaction-manager/pkg/apitypes"

	mock "github.com/stretchr/testify/mock"
)

// BlockchainTransactionManager is an autogenerated mock type for the BlockchainTransactionManager type
type BlockchainTransactionManager struct {
	mock.Mock
}

// HandleNewTransaction provides a mock function with given fields: ctx, txReq
func (_m *BlockchainTransactionManager) HandleNewTransaction(ctx context.Context, txReq *apitypes.TransactionRequest) (*apitypes.ManagedTX, bool, error) {
	ret := _m.Called(ctx, txReq)

	if len(ret) == 0 {
		panic("no return value specified for HandleNewTransaction")
	}

	var r0 *apitypes.ManagedTX
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *apitypes.TransactionRequest) (*apitypes.ManagedTX, bool, error)); ok {
		return rf(ctx, txReq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apitypes.TransactionRequest) *apitypes.ManagedTX); ok {
		r0 = rf(ctx, txReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apitypes.ManagedTX)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apitypes.TransactionRequest) bool); ok {
		r1 = rf(ctx, txReq)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *apitypes.TransactionRequest) error); ok {
		r2 = rf(ctx, txReq)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Init provides a mock function with given fields: ctx
func (_m *BlockchainTransactionManager) Init(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBlockchainTransactionManager creates a new instance of BlockchainTransactionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockchainTransactionManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockchainTransactionManager {
	mock := &BlockchainTransactionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

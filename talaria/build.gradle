/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import org.apache.tools.ant.taskdefs.condition.Os

ext {
    targetCoverage = 53
}

task installTools(type:Exec) {
    workingDir '.'
    environment('GOBIN', "${projectDir}/bin")
    executable 'go'
    args 'install'
    inputs.files('go.mod')
    outputs.files([
        "${projectDir}/bin/protoc-gen-go",
        "${projectDir}/bin/protoc-gen-go-grpc",
        "${projectDir}/bin/golangci-lint",
        "${projectDir}/bin/atlas"
    ])
    // We use go.mod for dependency version management
    // tools/tools.go tracks deps too - to avoid go mod tidy discarding them all
    args 'google.golang.org/protobuf/cmd/protoc-gen-go'
    args 'google.golang.org/grpc/cmd/protoc-gen-go-grpc'
    args 'github.com/golangci/golangci-lint/cmd/golangci-lint'
}

task protoc(type:Exec) {
    workingDir '.'
    dependsOn tasks.installTools
    inputs.files(fileTree("${projectDir}").matching {
        include "**/*.proto"
    })
    outputs.files(fileTree("${projectDir}").matching {
        include "**/*.pb.go"
    })
    environment 'PATH', "${projectDir}/bin" + File.pathSeparator + System.getenv('PATH')
    executable 'protoc'
    args "--go_out=${projectDir}"
    args "--go-grpc_out=${projectDir}"
    args "--proto_path=${projectDir}"
    args inputs.files
}

task clean(type:Exec) {
    workingDir '.'
    executable 'git'
    args "clean"
    args "-fdX"
}

task goGet(type:Exec) {
    workingDir '.'

    inputs.files('go.mod')
    inputs.files(fileTree("${projectDir}").matching {
        include "**/*.go"
    })
    outputs.files('go.sum')
    dependsOn tasks.protoc

    executable 'go'
    args 'get'
}


task lint(type: Exec) {
    workingDir '.'

    dependsOn tasks.protoc

    inputs.files(fileTree("${projectDir}").matching {
        include "**/*.go"
    });
    outputs.files([]);
    environment 'GOGC', '20'

    executable "${projectDir}/bin/golangci-lint"
    args 'run'
    args '-v'
    args '--timeout', '5m'
}

task checkCoverage {
    doLast {
        def coverageOutput = 'go tool cover -func=talaria/coverage.txt'.execute().text
        def totalCoverage = coverageOutput.readLines().find { it.contains('total:') }?.split()?.last()?.replace('%', '')
        if (totalCoverage && totalCoverage.toFloat() < targetCoverage) {
            throw new GradleException("ERROR: Coverage is below ${targetCoverage}% (current coverage: ${totalCoverage}%)")
        } else if ( totalCoverage.toFloat() - targetCoverage > 1) {
            throw new GradleException("ERROR: The target coverage ${targetCoverage}% is below the current coverage: ${totalCoverage}% for more than 1%, please update the targetCoverage value in ./kata/build.gradle file")
        } else {
            println "Coverage is above ${targetCoverage}%, current coverage: ${totalCoverage}%"
        }
    }
}

task test(type: Exec) {
    workingDir '.'

    dependsOn tasks.goGet

    inputs.files(fileTree("${projectDir}").matching {
        include "**/*.go"
    })
    outputs.files(['coverage.txt'])

    executable 'go'
    args 'test'
    args './pkg/talaria/...'
    args './pkg/plugins/...'
    args '-cover'
    args '-coverprofile=coverage.txt'
    args '-covermode=atomic'
    args '-timeout=30s'
    
    finalizedBy checkCoverage
}

task testcov(type: Exec) {
    workingDir '.'
    executable 'go'
    args 'tool'
    args 'cover'
    args '-html=coverage.txt'
}

task build {
    dependsOn tasks.lint
    dependsOn tasks.test
}

configurations {
    protocFiles {
        canBeConsumed = true
        canBeResolved = false
    }
}

tasks.register('zipProtocFiles', Zip) {  
    from fileTree("${projectDir}").matching {
        include "**/*.proto"
    }
    archiveFileName = "proto.zip"
    destinationDirectory = file("$projectDir")
    dependsOn('protoc')
}

artifacts {
    protocFiles(zipProtocFiles)
}




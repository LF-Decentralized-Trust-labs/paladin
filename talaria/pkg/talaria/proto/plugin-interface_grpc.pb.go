// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: plugin-interface.proto

package PluginInterface

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PluginInterfaceClient is the client API for PluginInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginInterfaceClient interface {
	PluginMessageFlow(ctx context.Context, in *PaladinMessage, opts ...grpc.CallOption) (*PaladinMessageReceipt, error)
}

type pluginInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginInterfaceClient(cc grpc.ClientConnInterface) PluginInterfaceClient {
	return &pluginInterfaceClient{cc}
}

func (c *pluginInterfaceClient) PluginMessageFlow(ctx context.Context, in *PaladinMessage, opts ...grpc.CallOption) (*PaladinMessageReceipt, error) {
	out := new(PaladinMessageReceipt)
	err := c.cc.Invoke(ctx, "/protos.PluginInterface.PluginInterface/PluginMessageFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginInterfaceServer is the server API for PluginInterface service.
// All implementations must embed UnimplementedPluginInterfaceServer
// for forward compatibility
type PluginInterfaceServer interface {
	PluginMessageFlow(context.Context, *PaladinMessage) (*PaladinMessageReceipt, error)
	mustEmbedUnimplementedPluginInterfaceServer()
}

// UnimplementedPluginInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedPluginInterfaceServer struct {
}

func (UnimplementedPluginInterfaceServer) PluginMessageFlow(context.Context, *PaladinMessage) (*PaladinMessageReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PluginMessageFlow not implemented")
}
func (UnimplementedPluginInterfaceServer) mustEmbedUnimplementedPluginInterfaceServer() {}

// UnsafePluginInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginInterfaceServer will
// result in compilation errors.
type UnsafePluginInterfaceServer interface {
	mustEmbedUnimplementedPluginInterfaceServer()
}

func RegisterPluginInterfaceServer(s grpc.ServiceRegistrar, srv PluginInterfaceServer) {
	s.RegisterService(&PluginInterface_ServiceDesc, srv)
}

func _PluginInterface_PluginMessageFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaladinMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginInterfaceServer).PluginMessageFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PluginInterface.PluginInterface/PluginMessageFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginInterfaceServer).PluginMessageFlow(ctx, req.(*PaladinMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginInterface_ServiceDesc is the grpc.ServiceDesc for PluginInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.PluginInterface.PluginInterface",
	HandlerType: (*PluginInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PluginMessageFlow",
			Handler:    _PluginInterface_PluginMessageFlow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin-interface.proto",
}

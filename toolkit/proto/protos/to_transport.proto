/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

syntax = "proto3";

package io.kaleido.paladin.toolkit;

message ConfigureTransportRequest {
  string name = 1; // The name
  string config_json= 2; // The block of config supplied in the configuration for the domain by the Paladin administrator (converted from YAML to JSON for transport)
}

message ConfigureTransportResponse {
}

message SendMessageRequest {
  string node = 1;
  PaladinMsg message = 2;
}

message SendMessageResponse {
}

message ActivatePeerRequest {
  string node_name = 1;
  string transport_details = 2;
}

message ActivatePeerResponse {
  string peer_info_json = 1;
}

message DeactivatePeerRequest {
  string node_name = 1;
}

message DeactivatePeerResponse {
}

message GetLocalDetailsRequest {
}

message GetLocalDetailsResponse {
  string transport_details = 1; // local transport details that can be shared via registry with other parties
}

message PaladinMsg {
    enum Component {
      TRANSACTION_ENGINE = 0;
      RELIABLE_MESSAGE_HANDLER = 1;
      IDENTITY_RESOLVER = 2;
    }
    string message_id = 1; // UUID individually allocated to each message
    optional string correlation_id = 2; // optional correlation ID to relate "replies" back to original message IDs
    Component component = 3; // components are allocated here
    string message_type = 4; // message types are managed within each component
    bytes payload = 5; // arbitrary payload
}
/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

syntax = "proto3";

package io.kaleido.paladin.toolkit;

message FindAvailableStatesRequest {
  string state_query_context = 1; // Must hold a valid state query context to perform a query
  string schema_id = 2; // The ID of the schema
  string query_json = 3; // The query specification in JSON
  optional bool use_nullifiers = 4; // Use nullifiers to check spending state (rather than state ID)
}

message FindAvailableStatesResponse {
  repeated StoredState states = 1;
}

enum EncodingType {
  TUPLE = 0;
  FUNCTION_CALL_DATA = 1;
  ETH_TRANSACTION = 2; // encode only
  TYPED_DATA_V4 = 3; // encode only
  EVENT_DATA = 4; // decode only
  ETH_TRANSACTION_SIGNED = 5; // encode and sign
}

message EncodeDataRequest {
  EncodingType encoding_type = 1;
  string body = 2;
  string definition = 3;
  string key_identifier = 4; // only where signing is performed
}

message EncodeDataResponse {
  bytes data = 1;
}

message DecodeDataRequest {
  EncodingType encoding_type = 1;
  bytes data = 2;
  string definition = 3;
  repeated bytes topics = 4; // for EVENT_DATA only
}

message DecodeDataResponse {
  string body = 1;
}

message RecoverSignerRequest {
  string algorithm = 1;
  bytes payload = 2;
  string payload_type = 3;
  bytes signature = 4;
}

message RecoverSignerResponse {
  string verifier = 1;
}


message StoredState {
  string id = 1;
  string schema_id = 2;
  int64 created_at = 3;
  string data_json = 4;
  repeated StateLock locks = 5;
}

message StateLock {
  enum StateLockType {
    SPEND = 0;
    READ = 1;
    CREATE = 2;
  }
  StateLockType type = 1;
  string transaction = 2;
}

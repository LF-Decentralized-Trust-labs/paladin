//go:build !reference
// +build !reference

package reference

import (
	"context"
	"crypto/sha1"
	"os"
	"testing"

	"github.com/hyperledger/firefly-common/pkg/i18n"
	"github.com/stretchr/testify/assert"
	"golang.org/x/text/language"
)

func TestCheckGeneratedMarkdownPages(t *testing.T) {
	ctx := i18n.WithLang(context.Background(), language.Spanish)
	markdownMap, err := GenerateObjectsReferenceMarkdown(ctx)
	assert.NoError(t, err)
	assert.NotNil(t, markdownMap)

	for pageName, markdown := range markdownMap {
		b, err := os.ReadFile(pageName)
		assert.NoError(t, err)
		expectedPageHash := sha1.New()
		expectedPageHash.Write(b)
		actualPageHash := sha1.New()
		actualPageHash.Write(markdown)
		assert.Equal(t, expectedPageHash.Sum(nil), actualPageHash.Sum(nil), "The type reference docs generated by the code did not match the docs files in git for page: '%s.md' Did you forget to run `make reference`?", pageName)
	}
}

func TestGenerateMarkdownDescriptionMissing(t *testing.T) {
	type thingy struct{}
	d := newDocGenerator()
	_, err := d.generateMarkdownPages(context.Background(), []interface{}{thingy{}}, []interface{}{}, map[string][]interface{}{}, "")
	assert.Regexp(t, "PD020900.*thingy_description.md", err)
}

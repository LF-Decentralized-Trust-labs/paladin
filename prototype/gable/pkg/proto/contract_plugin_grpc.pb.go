// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: pkg/proto/contract_plugin.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PaladinContractPluginService_GetStates_FullMethodName = "/paladin.contracts.PaladinContractPluginService/GetStates"
	PaladinContractPluginService_Register_FullMethodName  = "/paladin.contracts.PaladinContractPluginService/Register"
)

// PaladinContractPluginServiceClient is the client API for PaladinContractPluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaladinContractPluginServiceClient interface {
	// Fetches states in a given meta state
	GetStates(ctx context.Context, in *GetStatesRequest, opts ...grpc.CallOption) (*GetStatesReply, error)
	// Opening a bidirectional stream to receive commands and send events
	Register(ctx context.Context, opts ...grpc.CallOption) (PaladinContractPluginService_RegisterClient, error)
}

type paladinContractPluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaladinContractPluginServiceClient(cc grpc.ClientConnInterface) PaladinContractPluginServiceClient {
	return &paladinContractPluginServiceClient{cc}
}

func (c *paladinContractPluginServiceClient) GetStates(ctx context.Context, in *GetStatesRequest, opts ...grpc.CallOption) (*GetStatesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatesReply)
	err := c.cc.Invoke(ctx, PaladinContractPluginService_GetStates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paladinContractPluginServiceClient) Register(ctx context.Context, opts ...grpc.CallOption) (PaladinContractPluginService_RegisterClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PaladinContractPluginService_ServiceDesc.Streams[0], PaladinContractPluginService_Register_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &paladinContractPluginServiceRegisterClient{ClientStream: stream}
	return x, nil
}

type PaladinContractPluginService_RegisterClient interface {
	Send(*ContractPluginEvent) error
	Recv() (*ContractPluginEvent, error)
	grpc.ClientStream
}

type paladinContractPluginServiceRegisterClient struct {
	grpc.ClientStream
}

func (x *paladinContractPluginServiceRegisterClient) Send(m *ContractPluginEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *paladinContractPluginServiceRegisterClient) Recv() (*ContractPluginEvent, error) {
	m := new(ContractPluginEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PaladinContractPluginServiceServer is the server API for PaladinContractPluginService service.
// All implementations must embed UnimplementedPaladinContractPluginServiceServer
// for forward compatibility
type PaladinContractPluginServiceServer interface {
	// Fetches states in a given meta state
	GetStates(context.Context, *GetStatesRequest) (*GetStatesReply, error)
	// Opening a bidirectional stream to receive commands and send events
	Register(PaladinContractPluginService_RegisterServer) error
	mustEmbedUnimplementedPaladinContractPluginServiceServer()
}

// UnimplementedPaladinContractPluginServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaladinContractPluginServiceServer struct {
}

func (UnimplementedPaladinContractPluginServiceServer) GetStates(context.Context, *GetStatesRequest) (*GetStatesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStates not implemented")
}
func (UnimplementedPaladinContractPluginServiceServer) Register(PaladinContractPluginService_RegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedPaladinContractPluginServiceServer) mustEmbedUnimplementedPaladinContractPluginServiceServer() {
}

// UnsafePaladinContractPluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaladinContractPluginServiceServer will
// result in compilation errors.
type UnsafePaladinContractPluginServiceServer interface {
	mustEmbedUnimplementedPaladinContractPluginServiceServer()
}

func RegisterPaladinContractPluginServiceServer(s grpc.ServiceRegistrar, srv PaladinContractPluginServiceServer) {
	s.RegisterService(&PaladinContractPluginService_ServiceDesc, srv)
}

func _PaladinContractPluginService_GetStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaladinContractPluginServiceServer).GetStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaladinContractPluginService_GetStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaladinContractPluginServiceServer).GetStates(ctx, req.(*GetStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaladinContractPluginService_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PaladinContractPluginServiceServer).Register(&paladinContractPluginServiceRegisterServer{ServerStream: stream})
}

type PaladinContractPluginService_RegisterServer interface {
	Send(*ContractPluginEvent) error
	Recv() (*ContractPluginEvent, error)
	grpc.ServerStream
}

type paladinContractPluginServiceRegisterServer struct {
	grpc.ServerStream
}

func (x *paladinContractPluginServiceRegisterServer) Send(m *ContractPluginEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *paladinContractPluginServiceRegisterServer) Recv() (*ContractPluginEvent, error) {
	m := new(ContractPluginEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PaladinContractPluginService_ServiceDesc is the grpc.ServiceDesc for PaladinContractPluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaladinContractPluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paladin.contracts.PaladinContractPluginService",
	HandlerType: (*PaladinContractPluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStates",
			Handler:    _PaladinContractPluginService_GetStates_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _PaladinContractPluginService_Register_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/proto/contract_plugin.proto",
}

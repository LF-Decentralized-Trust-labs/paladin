/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import org.apache.tools.ant.filters.LineContains

ext {
    goFiles = fileTree(".") {
        include "pkg/**/*.go"
    }
    targetCoverage = 100
    maxCoverageBarGap = 1
    coverageExcludedPackages = [
        'github.com/kaleido-io/paladin/toolkit/pkg/prototk',
    ]
}

configurations {
    toolkitProtoDefinitions {
        canBeConsumed = false
    }
}

dependencies {
    toolkitProtoDefinitions project(path: ":toolkit_proto", configuration: "toolkitProtoDefinitions")
}

task installTools(type:Exec) {
    workingDir '.'
    environment('GOBIN', "${projectDir}/bin")
    executable 'go'
    args 'install'
    inputs.files(['go.mod','go.sum'])
    outputs.files(
        "bin/protoc-gen-go",
        "bin/protoc-gen-go-grpc",
        "bin/golangci-lint",
        "bin/mockery",
    )
    // We use go.mod for dependency version management
    // tools/tools.go tracks deps too - to avoid go mod tidy discarding them all
    args 'google.golang.org/protobuf/cmd/protoc-gen-go'
    args 'google.golang.org/grpc/cmd/protoc-gen-go-grpc'
    args 'github.com/golangci/golangci-lint/cmd/golangci-lint'
    args 'github.com/vektra/mockery/v2'
}

task protoc(type: ProtoCompile, dependsOn: [installTools]) {
    protocPath "bin"
    protoPath configurations.toolkitProtoDefinitions.asPath
    protoFiles fileTree(configurations.toolkitProtoDefinitions.asPath) {
        include "*.proto"
    }
    plugins {
        go {
            out "${projectDir}/pkg/prototk"
            opt 'paths=source_relative'
            fileTree(configurations.toolkitProtoDefinitions.asPath) {
               include "*.proto"
            }.each { File file ->
                opt "M${file.name}=pkg/prototk"
            }
        }
        go_grpc {
            out "${projectDir}/pkg/prototk"
            opt 'paths=source_relative'
            fileTree(configurations.toolkitProtoDefinitions.asPath) {
               include "*.proto"
            }.each { File file ->
                opt "M${file.name}=pkg/prototk"
            }
        }
    }
}

task clean(type: Delete, dependsOn: ':testinfra:stopTestInfra') {
    delete fileTree("bin") {
        exclude "README.md", ".gitignore"
    }
    delete fileTree(".") {
        include "**/*.pb.go"
    }
    delete 'coverage'
    delete 'componenttest/abis'
}

task goGet(type:Exec, dependsOn:tasks.protoc) {
    workingDir '.'

    inputs.files('go.mod')
    inputs.files(goFiles)
    outputs.files('go.sum')

    executable 'go'
    args 'get'
    args './pkg/...'
}

task lint(type: Exec, dependsOn:tasks.protoc) {
    workingDir '.'

    inputs.files(goFiles);
    environment 'GOGC', '20'

    executable "${projectDir}/bin/golangci-lint"
    args 'run'
    args '-v'
    args '--color=always'
    args '--timeout', '5m'
}

task test(type: Exec, dependsOn: [tasks.goGet]) {
    inputs.files(getProject().goFiles)
    outputs.dir('coverage')

    workingDir '.'
    executable 'go'
    args 'test'
    args './pkg/...'
    args '-cover'
    args '-covermode=atomic'
    args '-timeout=30s'
    args "-test.gocoverdir=${getProject().projectDir}/coverage"
}

task buildCoverageTxt(type: Exec, dependsOn: [
        tasks.protoc,
        tasks.lint,
        tasks.test,
    ]) {
    inputs.files(fileTree(project.mkdir('coverage')) {
        include "covcounters.*"
        include "covmeta.*"
    })
    outputs.files('coverage/coverage_unfiltered.txt')
    executable 'go'
    args 'tool', 'covdata', 'textfmt'
    args '-i', "${projectDir}/coverage"
    args '-o', "${projectDir}/coverage/coverage_unfiltered.txt"

}

task aggregateCoverage(type: Copy, dependsOn: tasks.buildCoverageTxt) {
    from 'coverage/coverage_unfiltered.txt'
    into 'coverage'
    outputs.files('coverage/coverage.txt')
    eachFile { fcd ->
        fcd.setRelativePath(fcd.relativePath.replaceLastName('coverage.txt'))
    }
    filter(LineContains, negate: true, contains: getProject().ext.coverageExcludedPackages, matchAny: true) 
}

task checkCoverage(dependsOn: [tasks.aggregateCoverage]) {
    inputs.files('coverage/coverage.txt')

    doLast {
        def coverageOutput = ("go tool cover -func=${projectDir}/coverage/coverage.txt").execute().text
        def totalCoverage = coverageOutput.readLines().find { it.contains('total:') }?.split()?.last()?.replace('%', '')
        println "Coverage is ${totalCoverage}%"
        if (totalCoverage && totalCoverage.toFloat() < targetCoverage) {
            throw new GradleException("ERROR: Coverage is below ${targetCoverage}% (current coverage: ${totalCoverage}%)")
        } else if ( totalCoverage.toFloat() - targetCoverage > maxCoverageBarGap) {
            throw new GradleException("ERROR: The target coverage ${targetCoverage}% is below the current coverage: ${totalCoverage}% for more than ${maxCoverageBarGap}%, please update the targetCoverage value in ./kata/build.gradle file")
        } else {
            println "Coverage is above ${targetCoverage}%, current coverage: ${totalCoverage}%"
        }
    }
}

task build {
    dependsOn tasks.lint
    dependsOn tasks.test
    dependsOn tasks.checkCoverage
}


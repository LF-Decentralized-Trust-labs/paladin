/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.LineContains

ext {
    goFiles = fileTree(".") {
        include "pkg/**/*.go"
    }
}

configurations {
    toolkitProtoDefinitions {
        canBeConsumed = false
    }
}

dependencies {
    toolkitProtoDefinitions project(path: ":toolkit_proto", configuration: "toolkitProtoDefinitions")
}

task installTools(type:Exec) {
    workingDir '.'
    environment('GOBIN', "${projectDir}/bin")
    executable 'go'
    args 'install'
    inputs.files(['go.mod','go.sum'])
    outputs.files(
        "bin/protoc-gen-go",
        "bin/protoc-gen-go-grpc",
        "bin/golangci-lint",
        "bin/mockery",
    )
    // We use go.mod for dependency version management
    // tools/tools.go tracks deps too - to avoid go mod tidy discarding them all
    args 'google.golang.org/protobuf/cmd/protoc-gen-go'
    args 'google.golang.org/grpc/cmd/protoc-gen-go-grpc'
    args 'github.com/golangci/golangci-lint/cmd/golangci-lint'
    args 'github.com/vektra/mockery/v2'
}

task toolkitProtoBindings(type:Exec, dependsOn: [installTools]) {
    workingDir '.'
    inputs.files(configurations.toolkitProtoDefinitions)
    outputs.dir("pkg/proto/plugins")
    environment 'PATH', "${projectDir}/bin" + File.pathSeparator + System.getenv('PATH')
    executable 'protoc'
    args "--go_out=${projectDir}/pkg/proto/plugins"
    args "--go_opt=paths=source_relative"
    args "--go-grpc_out=${projectDir}/pkg/proto/plugins"
    args "--go-grpc_opt=paths=source_relative"
    fileTree(configurations.toolkitProtoDefinitions.asPath) {
        include "*.proto"
    }.each { File file ->
        args "--go_opt=M${file.name}=pkg/proto/plugins"
        args "--go-grpc_opt=M${file.name}=pkg/proto/plugins"
    }
    args "--proto_path=${configurations.toolkitProtoDefinitions.asPath}"
    args fileTree(configurations.toolkitProtoDefinitions.asPath) {
        include "*.proto"
    }
}

task clean(type: Delete, dependsOn: ':testinfra:stopTestInfra') { delete '*.dylib', '*.so', '*.dll', 'libkata.h'
    delete fileTree("bin") {
        exclude "README.md", ".gitignore"
    }
    delete fileTree(".") {
        include "**/*.pb.go"
    }
    delete 'coverage'
    delete 'componenttest/abis'
}

task goGet(type:Exec, dependsOn:tasks.toolkitProtoBindings) {
    workingDir '.'

    inputs.files('go.mod')
    inputs.files(goFiles)
    outputs.files('go.sum')

    executable 'go'
    args 'get'
}

task lint(type: Exec, dependsOn:tasks.toolkitProtoBindings) {
    workingDir '.'

    inputs.files(goFiles);
    environment 'GOGC', '20'

    executable "${projectDir}/bin/golangci-lint"
    args 'run'
    args '-v'
    args '--color=always'
    args '--timeout', '5m'
}

task test(type: Exec, dependsOn: [tasks.goGet]) {
    inputs.files(getProject().goFiles)
    outputs.dir('coverage')

    workingDir '.'
    executable 'go'
    args 'test'
    args './pkg/...', './internal/...'
    args '-cover'
    args '-covermode=atomic'
    args '-timeout=30s'
    args "-test.gocoverdir=${getProject().projectDir}/coverage"
}

task build {
    dependsOn tasks.lint
    dependsOn tasks.test
}


import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
    id 'java'
    id 'application'
}

group = 'io.kaleido'

// Set the main class for the JAR
jar {
    dependsOn 'classes'  // Ensure the classes are compiled before creating the JAR

    manifest {
        attributes(
            'Main-Class': 'io.kaleido.paladin.Main'
        )
    }

    if (project.hasProperty('jarVersion')) {
        archiveVersion = project.jarVersion
    } else {
        archiveVersion = ''
    }

    archiveBaseName = 'paladin'  // Base name of the JAR, the version will be added to this

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from sourceSets.main.output

    // Exclude signature files from dependencies
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task wrapper(type: Wrapper){}

assemble.dependsOn jar

application {
    mainClass.set('io.kaleido.paladin.Main')
    applicationDefaultJvmArgs = ["-Djna.library.path=" +
        file("${rootDir}/core/go/build/libs").absolutePath + ":" + file("${rootDir}/toolkit/go/build/libs").absolutePath ]
}

// run -PconfigFile=config.paladin.yaml -Pmode=node to override the default values
tasks.named('run') {
    // Check if 'configFile' and 'mode' properties are passed via the command line
    def configFile = project.hasProperty('configFile') ? project.getProperty('configFile') : 'config.paladin.yaml'
    def mode = project.hasProperty('mode') ? project.getProperty('mode') : 'testbed'

    // Pass these arguments to the Java application
    args = [configFile, mode]

    doFirst {
        println "Running with config file: $configFile and mode: $mode"
    }
}

repositories {
    mavenCentral()
}

test {
    dependsOn ':testinfra:startTestInfra'
    testLogging {
        showStandardStreams = true
        testLogging {
            events("passed", "skipped", "failed")
            showStackTraces = true
            exceptionFormat = TestExceptionFormat.FULL
        }
    }
    useJUnitPlatform()
    systemProperty "jna.library.path", file("${rootDir}/core/go/build/libs").absolutePath + ":" + file("${rootDir}/toolkit/go/build/libs").absolutePath
}

configurations {
    // Resolvable configurations
    toolkitProtoDefinitions {
        canBeConsumed = false
        canBeResolved = true
    }
    libcore {
        canBeConsumed = false
        canBeResolved = true
    }
    libstarter {
        canBeConsumed = false
        canBeResolved = true
    }
}

def grpcVersion = '1.65+'
def protobufVersion = '3.25+'

dependencies {

    implementation "io.grpc:grpc-all:${grpcVersion}"

    implementation 'org.bouncycastle:bcprov-jdk18on:1.78+'
    implementation 'io.netty:netty-all:4.1+'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.17+'

    implementation 'org.apache.logging.log4j:log4j-core:2.23+'

    toolkitProtoDefinitions project(path: ":toolkit:proto", configuration: "protoDefinitions")

    testImplementation project(path: ":core:go", configuration: "libcore")
    testImplementation project(path: ":toolkit:go", configuration: "libstarter")
    testImplementation project(path: ":solidity", configuration: "compiledContracts")

    implementation 'net.java.dev.jna:jna-platform:5.14+'
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"

    compileOnly "org.apache.tomcat:annotations-api:6.0+"

    testImplementation platform('org.junit:junit-bom:5.9+')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation project(path: ':toolkit:go', configuration: 'libstarter')
    testImplementation 'org.skyscreamer:jsonassert:1.5.3'

    implementation project(path: ":toolkit_java")
} 

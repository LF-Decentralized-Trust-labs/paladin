/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.LineContains

ext {
    goFiles = fileTree(".") {
        include "core.go"
        include "internal/**/*.go"
        include "pkg/**/*.go"
        include "componenttest/**/*.go"
        include "mocks/**/*.go"
    }

    targetCoverage = 94.3
    maxCoverageBarGap = 1
    coverageExcludedPackages = [
        'github.com/kaleido-io/paladin/core/pkg/proto',
        'github.com/kaleido-io/paladin/core/pkg/proto/transaction',
        'github.com/kaleido-io/paladin/toolkit/prototk',
        'github.com/kaleido-io/paladin/core/internal/plugins/loader',
        'github.com/kaleido-io/paladin/core/pkg/testbed',
    ]
}

configurations {
    // Resolvable configurations
    compiledContracts {
        canBeConsumed = false
        canBeResolved = true
    }
    toolkitProtoDefinitions {
        canBeConsumed = false
        canBeResolved = true
    }

    // Consumable configurations
    libcore {
        canBeConsumed = true
        canBeResolved = false
    }
    protoCompiled {
        canBeConsumed = true
        canBeResolved = false
    }
}

dependencies {
    compiledContracts project(path: ":solidity", configuration: "compiledContracts")
    toolkitProtoDefinitions project(path: ":toolkit_proto", configuration: "protoDefinitions")
}

task installTools(type: Exec) {
    workingDir '.'
    environment('GOBIN', "${projectDir}/bin")
    executable 'go'
    args 'install'
    inputs.files('go.mod','go.sum')
    outputs.files(
        "bin/protoc-gen-go",
        "bin/protoc-gen-go-grpc",
        "bin/golangci-lint",
        "bin/mockery",
    )
    // We use go.mod for dependency version management
    // tools/tools.go tracks deps too - to avoid go mod tidy discarding them all
    args 'google.golang.org/protobuf/cmd/protoc-gen-go'
    args 'google.golang.org/grpc/cmd/protoc-gen-go-grpc'
    args 'github.com/golangci/golangci-lint/cmd/golangci-lint'
    args 'github.com/vektra/mockery/v2'
}


task copyTestContracts(type: Copy) {
    inputs.files(configurations.compiledContracts)
    from fileTree(configurations.compiledContracts.asPath) {
        include 'contracts/testcontracts/SimpleStorage.sol/SimpleStorage.json'
    }
    into 'componenttest/abis'

    // Flatten all paths into the destination folder
    eachFile { path = name }
    includeEmptyDirs = false
}

task copyTestbedContracts(type: Copy) {
    inputs.files(configurations.compiledContracts)
    from fileTree(configurations.compiledContracts.asPath) {
        include 'contracts/testbed_sim/SIMDomain.sol/SIMDomain.json'
        include 'contracts/testbed_sim/SIMToken.sol/SIMToken.json'
        include 'contracts/interfaces/IPaladinDomain.sol/IPaladinDomain_V0.json'
        include 'contracts/interfaces/IPaladinContract.sol/IPaladinContract_V0.json'
    }
    into 'pkg/testbed/abis'

    // Flatten all paths into the destination folder
    eachFile { path = name }
    includeEmptyDirs = false
}

task copyDomainManagerContracts(type: Copy) {
    inputs.files(configurations.compiledContracts)
    from fileTree(configurations.compiledContracts.asPath) {
        include 'contracts/interfaces/IPaladinContract.sol/IPaladinContract_V0.json'
    }
    into 'internal/domainmgr/abis'

    // Flatten all paths into the destination folder
    eachFile { path = name }
    includeEmptyDirs = false
}

task copyContracts(dependsOn:[
    copyTestContracts,
    copyTestbedContracts,
    copyDomainManagerContracts,
])

task protoc(type: ProtoCompile, dependsOn: [
        ":toolkit_go:protoc",
        tasks.installTools,
        tasks.copyTestContracts,
    ]) {
    protocPath "bin"
    protoPath projectDir
    protoFiles fileTree("pkg/proto") {
        include "**/*.proto"
    }
    plugins {
        go {
            out projectDir
        }
        go_grpc {
            out projectDir
        }
    }
}

task goGet(type:Exec, dependsOn:[tasks.protoc,tasks.copyContracts,":toolkit_go:goGet"]) {
    workingDir '.'

    inputs.files('go.mod')
    inputs.files(goFiles)
    outputs.files('go.sum')

    executable 'go'
    args 'get'
}

task makeMocks(type: Mockery, dependsOn: [tasks.installTools, tasks.protoc, tasks.goGet]) {
    mockery 'bin/mockery'
    args '--case', 'underscore'
    mock {
        inputDir "go list -f {{.Dir}} github.com/hyperledger/firefly-signer/pkg/rpcbackend".execute().text.trim()
        includeAll true
        outputPackage 'rpcbackendmocks'
        outputDir 'mocks/rpcbackendmocks'
    }
    mock {
        inputDir 'internal/engine'
        includeAll true
        outputPackage 'enginemocks'
        outputDir 'mocks/enginemocks'
    }
    mock {
        inputDir 'internal/components'
        includeAll true
        outputPackage 'componentmocks'
        outputDir 'mocks/componentmocks'
    }
    mock {
        inputDir 'internal/componentmgr'
        name 'ComponentManager'
        outputPackage 'componentmocks'
        outputDir 'mocks/componentmocks'
    }
    mock {
        inputDir 'internal/statestore'
        name 'StateStore'
        outputPackage 'componentmocks'
        outputDir 'mocks/componentmocks'
    }
    mock {
        inputDir 'internal/statestore'
        name 'Schema'
        outputPackage 'componentmocks'
        outputDir 'mocks/componentmocks'
    }
    mock {
        inputDir 'internal/statestore'
        name 'DomainStateInterface'
        outputPackage 'componentmocks'
        outputDir 'mocks/componentmocks'
    }
    mock {
        inputDir 'pkg/blockindexer'
        name 'BlockIndexer'
        outputPackage 'componentmocks'
        outputDir 'mocks/componentmocks'
    }
    mock {
        inputDir 'internal/rpcserver'
        name 'RPCServer'
        outputPackage 'componentmocks'
        outputDir 'mocks/componentmocks'
    }
    mock {
        inputDir 'pkg/ethclient'
        includeAll true
        outputPackage 'componentmocks'
        outputDir 'mocks/componentmocks'
    }
}

task clean(type: Delete, dependsOn: ':testinfra:stopTestInfra') {
    delete 'libcore.dylib', 'libcore.so', 'libcore.dll', 'libcore.h'
    delete fileTree("bin") {
        exclude "README.md", ".gitignore"
    }
    delete fileTree(".") {
        include "**/*.pb.go"
    }
    delete 'coverage'
    delete 'mocks'
    delete 'internal/domainmgr/abis'
    delete 'componenttest/abis'
}

task lint(type: Exec, dependsOn:[tasks.protoc,tasks.makeMocks,tasks.copyContracts]) {
    workingDir '.'

    inputs.files(goFiles);
    environment 'GOGC', '20'

    executable "bin/golangci-lint"
    args 'run'
    args '-v'
    args '--color=always'
    args '--timeout', '5m'
}

task buildSharedLibrary(type:Exec, dependsOn:[tasks.goGet, tasks.makeMocks]) {
    workingDir '.'

    def libName
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        libName = "libcore.dll"
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        libName = "libcore.dylib"
    } else {
        libName = "libcore.so"
    }

    inputs.files(goFiles)
    outputs.files(libName, 'libcore.h')

    environment("CGO_ENABLED", "1")

    executable 'go'
    args 'build'
    args '-o', libName
    args '-buildmode=c-shared'
    args 'core.go'
}

task buildTestbed(type:Exec, dependsOn: [tasks.goGet, tasks.makeMocks, tasks.copyContracts]) {
    workingDir '.'

    inputs.files(goFiles)
    inputs.dir("testbed")
    outputs.dir("bin")

    environment("CGO_ENABLED", "1")

    executable 'go'
    args 'build'
    args '-o', 'bin/'
    args './testbed'
}

task buildTestPluginsSharedLibraryGRPCTransport(type:Exec) {

    workingDir '.'

    def libName;
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        libName = "grpctransport.dll"
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        libName = "grpctransport.so"
    } else {
        libName = "grpctransport.so"
    }

    inputs.files(fileTree("${projectDir}").matching {
        include "internal/plugins/grpctransport/*.go"
    })
    outputs.files([libName, 'libgrpctransport.h'])

    environment("CGO_ENABLED", "1")

    executable 'go'
    args 'build'
    args '-o', libName
    args '-buildmode=plugin'
    args 'internal/plugins/grpctransport/main.go'
}

task buildTestPluginsSharedLibraries {
    dependsOn tasks.buildTestPluginsSharedLibraryGRPCTransport
}

abstract class UnitTests extends Exec {
    UnitTests() {
        inputs.files(project.goFiles)
        outputs.dir('coverage')

        workingDir '.'
        executable 'go'
        args 'test'
        args './pkg/...', './internal/...'
        args '-cover'
        args '-covermode=atomic'
        args '-timeout=30s'
        args "-test.gocoverdir=${project.projectDir}/coverage"
    }
}

abstract class ComponentTest extends Exec {
    ComponentTest() {
        inputs.files(project.goFiles)
        inputs.files(project.fileTree("testbed") {
            include "**/*.json"
        })
        outputs.dir('coverage')

        workingDir '.'
        executable 'go'
        args 'test'
        args './componenttest', './pkg/testbed'
        args '-cover'
        args "-coverpkg=github.com/kaleido-io/paladin/core/..." // toolkit handled seperately
        args '-covermode=atomic'
        args '-timeout=120s'
        args "-test.gocoverdir=${project.projectDir}/coverage"

        project.dumpLogsOnFailure(this, ':testinfra:startTestInfra')
    }
}

task setupCoverage(dependsOn: [tasks.protoc, tasks.copyContracts, tasks.makeMocks]) {
    inputs.files(goFiles)
    outputs.dir('coverage')
    doLast {
        delete fileTree (project.mkdir('coverage')) {
            include "coverage.txt"
            include "covcounters.*"
            include "covmeta.*"
        }
    }
}

task unitTestSQLite(type: UnitTests, dependsOn: [setupCoverage, goGet]) {
}

task unitTestPostgres(type: UnitTests, dependsOn: [
        ':testinfra:startTestInfra',
        setupCoverage,
        goGet,
    ]) {
    args '-tags', "testdbpostgres"
    lockTestInfra(it)
}

task componentTestSQLite(type: ComponentTest, dependsOn: [
    ':testinfra:startTestInfra',
    tasks.setupCoverage,
    tasks.goGet,
    tasks.copyContracts,
    ]) {
    lockTestInfra(it)
}

task buildCoverageTxt(type: Exec, dependsOn: [
        tasks.protoc,
        tasks.unitTestSQLite,
        tasks.unitTestPostgres,
        tasks.componentTestSQLite,
        // tasks.componentTestPostgres
    ]) {
    inputs.files(fileTree(project.mkdir('coverage')) {
        include "covcounters.*"
        include "covmeta.*"
    })
    outputs.files('coverage/coverage_unfiltered.txt')
    executable 'go'
    args 'tool', 'covdata', 'textfmt'
    args '-i', "${projectDir}/coverage"
    args '-o', "${projectDir}/coverage/coverage_unfiltered.txt"

}

task aggregateCoverage(type: Copy, dependsOn: buildCoverageTxt) {
    from 'coverage/coverage_unfiltered.txt'
    into 'coverage'
    outputs.files('coverage/coverage.txt')
    eachFile { fcd ->
        fcd.setRelativePath(fcd.relativePath.replaceLastName('coverage.txt'))
    }
    filter(LineContains, negate: true, contains: getProject().ext.coverageExcludedPackages, matchAny: true) 
}

task checkCoverage(dependsOn: [aggregateCoverage]) {
    inputs.files('coverage/coverage.txt')

    doLast {
        def coverageOutput = ("go tool cover -func=${projectDir}/coverage/coverage.txt").execute().text
        def totalCoverage = coverageOutput.readLines().find { it.contains('total:') }?.split()?.last()?.replace('%', '')
        println "Coverage is ${totalCoverage}%"
        if (totalCoverage && totalCoverage.toFloat() < targetCoverage) {
            throw new GradleException("ERROR: Coverage is below ${targetCoverage}% (current coverage: ${totalCoverage}%)")
        } else if ( totalCoverage.toFloat() - targetCoverage > maxCoverageBarGap) {
            throw new GradleException("ERROR: The target coverage ${targetCoverage}% is below the current coverage: ${totalCoverage}% for more than ${maxCoverageBarGap}%, please update the targetCoverage value in ./core/go/build.gradle file")
        } else {
            println "Coverage is above ${targetCoverage}%, current coverage: ${totalCoverage}%"
        }
    }
}

task test {
    finalizedBy checkCoverage
}

task testcov(type: Exec, dependsOn: [test, aggregateCoverage]) {
    inputs.files('coverage/coverage.txt')
    workingDir '.'
    executable 'go'
    args 'tool'
    args 'cover'
    args '-html=coverage/coverage.txt'
}

task build {
    dependsOn tasks.lint
    dependsOn tasks.test
    dependsOn tasks.aggregateCoverage
    dependsOn tasks.checkCoverage
}

dependencies {
    libcore files(buildSharedLibrary)
    protoCompiled files(protoc)
}


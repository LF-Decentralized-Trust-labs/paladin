// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sequencer

import (
	"github.com/LF-Decentralized-Trust-labs/paladin/core/internal/sequencer/coordinator"
	"github.com/LF-Decentralized-Trust-labs/paladin/core/internal/sequencer/originator"
	"github.com/LF-Decentralized-Trust-labs/paladin/core/internal/sequencer/transport"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSequencer creates a new instance of MockSequencer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSequencer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSequencer {
	mock := &MockSequencer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSequencer is an autogenerated mock type for the Sequencer type
type MockSequencer struct {
	mock.Mock
}

type MockSequencer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSequencer) EXPECT() *MockSequencer_Expecter {
	return &MockSequencer_Expecter{mock: &_m.Mock}
}

// GetCoordinator provides a mock function for the type MockSequencer
func (_mock *MockSequencer) GetCoordinator() coordinator.SeqCoordinator {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCoordinator")
	}

	var r0 coordinator.SeqCoordinator
	if returnFunc, ok := ret.Get(0).(func() coordinator.SeqCoordinator); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(coordinator.SeqCoordinator)
		}
	}
	return r0
}

// MockSequencer_GetCoordinator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCoordinator'
type MockSequencer_GetCoordinator_Call struct {
	*mock.Call
}

// GetCoordinator is a helper method to define mock.On call
func (_e *MockSequencer_Expecter) GetCoordinator() *MockSequencer_GetCoordinator_Call {
	return &MockSequencer_GetCoordinator_Call{Call: _e.mock.On("GetCoordinator")}
}

func (_c *MockSequencer_GetCoordinator_Call) Run(run func()) *MockSequencer_GetCoordinator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSequencer_GetCoordinator_Call) Return(seqCoordinator coordinator.SeqCoordinator) *MockSequencer_GetCoordinator_Call {
	_c.Call.Return(seqCoordinator)
	return _c
}

func (_c *MockSequencer_GetCoordinator_Call) RunAndReturn(run func() coordinator.SeqCoordinator) *MockSequencer_GetCoordinator_Call {
	_c.Call.Return(run)
	return _c
}

// GetOriginator provides a mock function for the type MockSequencer
func (_mock *MockSequencer) GetOriginator() originator.SeqOriginator {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOriginator")
	}

	var r0 originator.SeqOriginator
	if returnFunc, ok := ret.Get(0).(func() originator.SeqOriginator); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(originator.SeqOriginator)
		}
	}
	return r0
}

// MockSequencer_GetOriginator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOriginator'
type MockSequencer_GetOriginator_Call struct {
	*mock.Call
}

// GetOriginator is a helper method to define mock.On call
func (_e *MockSequencer_Expecter) GetOriginator() *MockSequencer_GetOriginator_Call {
	return &MockSequencer_GetOriginator_Call{Call: _e.mock.On("GetOriginator")}
}

func (_c *MockSequencer_GetOriginator_Call) Run(run func()) *MockSequencer_GetOriginator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSequencer_GetOriginator_Call) Return(seqOriginator originator.SeqOriginator) *MockSequencer_GetOriginator_Call {
	_c.Call.Return(seqOriginator)
	return _c
}

func (_c *MockSequencer_GetOriginator_Call) RunAndReturn(run func() originator.SeqOriginator) *MockSequencer_GetOriginator_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransportWriter provides a mock function for the type MockSequencer
func (_mock *MockSequencer) GetTransportWriter() transport.TransportWriter {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTransportWriter")
	}

	var r0 transport.TransportWriter
	if returnFunc, ok := ret.Get(0).(func() transport.TransportWriter); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(transport.TransportWriter)
		}
	}
	return r0
}

// MockSequencer_GetTransportWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransportWriter'
type MockSequencer_GetTransportWriter_Call struct {
	*mock.Call
}

// GetTransportWriter is a helper method to define mock.On call
func (_e *MockSequencer_Expecter) GetTransportWriter() *MockSequencer_GetTransportWriter_Call {
	return &MockSequencer_GetTransportWriter_Call{Call: _e.mock.On("GetTransportWriter")}
}

func (_c *MockSequencer_GetTransportWriter_Call) Run(run func()) *MockSequencer_GetTransportWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSequencer_GetTransportWriter_Call) Return(transportWriter transport.TransportWriter) *MockSequencer_GetTransportWriter_Call {
	_c.Call.Return(transportWriter)
	return _c
}

func (_c *MockSequencer_GetTransportWriter_Call) RunAndReturn(run func() transport.TransportWriter) *MockSequencer_GetTransportWriter_Call {
	_c.Call.Return(run)
	return _c
}

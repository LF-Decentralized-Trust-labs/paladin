// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package transaction

import (
	"context"
	"time"

	"github.com/LF-Decentralized-Trust-labs/paladin/core/internal/sequencer/common"
	"github.com/LF-Decentralized-Trust-labs/paladin/sdk/go/pkg/pldtypes"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEvent creates a new instance of MockEvent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEvent {
	mock := &MockEvent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEvent is an autogenerated mock type for the Event type
type MockEvent struct {
	mock.Mock
}

type MockEvent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEvent) EXPECT() *MockEvent_Expecter {
	return &MockEvent_Expecter{mock: &_m.Mock}
}

// GetEventTime provides a mock function for the type MockEvent
func (_mock *MockEvent) GetEventTime() time.Time {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEventTime")
	}

	var r0 time.Time
	if returnFunc, ok := ret.Get(0).(func() time.Time); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	return r0
}

// MockEvent_GetEventTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventTime'
type MockEvent_GetEventTime_Call struct {
	*mock.Call
}

// GetEventTime is a helper method to define mock.On call
func (_e *MockEvent_Expecter) GetEventTime() *MockEvent_GetEventTime_Call {
	return &MockEvent_GetEventTime_Call{Call: _e.mock.On("GetEventTime")}
}

func (_c *MockEvent_GetEventTime_Call) Run(run func()) *MockEvent_GetEventTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvent_GetEventTime_Call) Return(time1 time.Time) *MockEvent_GetEventTime_Call {
	_c.Call.Return(time1)
	return _c
}

func (_c *MockEvent_GetEventTime_Call) RunAndReturn(run func() time.Time) *MockEvent_GetEventTime_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionID provides a mock function for the type MockEvent
func (_mock *MockEvent) GetTransactionID() uuid.UUID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionID")
	}

	var r0 uuid.UUID
	if returnFunc, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	return r0
}

// MockEvent_GetTransactionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionID'
type MockEvent_GetTransactionID_Call struct {
	*mock.Call
}

// GetTransactionID is a helper method to define mock.On call
func (_e *MockEvent_Expecter) GetTransactionID() *MockEvent_GetTransactionID_Call {
	return &MockEvent_GetTransactionID_Call{Call: _e.mock.On("GetTransactionID")}
}

func (_c *MockEvent_GetTransactionID_Call) Run(run func()) *MockEvent_GetTransactionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvent_GetTransactionID_Call) Return(uUID uuid.UUID) *MockEvent_GetTransactionID_Call {
	_c.Call.Return(uUID)
	return _c
}

func (_c *MockEvent_GetTransactionID_Call) RunAndReturn(run func() uuid.UUID) *MockEvent_GetTransactionID_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function for the type MockEvent
func (_mock *MockEvent) Type() common.EventType {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 common.EventType
	if returnFunc, ok := ret.Get(0).(func() common.EventType); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(common.EventType)
	}
	return r0
}

// MockEvent_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockEvent_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockEvent_Expecter) Type() *MockEvent_Type_Call {
	return &MockEvent_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockEvent_Type_Call) Run(run func()) *MockEvent_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvent_Type_Call) Return(eventType common.EventType) *MockEvent_Type_Call {
	_c.Call.Return(eventType)
	return _c
}

func (_c *MockEvent_Type_Call) RunAndReturn(run func() common.EventType) *MockEvent_Type_Call {
	_c.Call.Return(run)
	return _c
}

// TypeString provides a mock function for the type MockEvent
func (_mock *MockEvent) TypeString() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TypeString")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockEvent_TypeString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeString'
type MockEvent_TypeString_Call struct {
	*mock.Call
}

// TypeString is a helper method to define mock.On call
func (_e *MockEvent_Expecter) TypeString() *MockEvent_TypeString_Call {
	return &MockEvent_TypeString_Call{Call: _e.mock.On("TypeString")}
}

func (_c *MockEvent_TypeString_Call) Run(run func()) *MockEvent_TypeString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvent_TypeString_Call) Return(s string) *MockEvent_TypeString_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockEvent_TypeString_Call) RunAndReturn(run func() string) *MockEvent_TypeString_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGrapher creates a new instance of MockGrapher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGrapher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGrapher {
	mock := &MockGrapher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGrapher is an autogenerated mock type for the Grapher type
type MockGrapher struct {
	mock.Mock
}

type MockGrapher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGrapher) EXPECT() *MockGrapher_Expecter {
	return &MockGrapher_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type MockGrapher
func (_mock *MockGrapher) Add(context1 context.Context, transaction *Transaction) {
	_mock.Called(context1, transaction)
	return
}

// MockGrapher_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockGrapher_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - context1 context.Context
//   - transaction *Transaction
func (_e *MockGrapher_Expecter) Add(context1 interface{}, transaction interface{}) *MockGrapher_Add_Call {
	return &MockGrapher_Add_Call{Call: _e.mock.On("Add", context1, transaction)}
}

func (_c *MockGrapher_Add_Call) Run(run func(context1 context.Context, transaction *Transaction)) *MockGrapher_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Transaction
		if args[1] != nil {
			arg1 = args[1].(*Transaction)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGrapher_Add_Call) Return() *MockGrapher_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGrapher_Add_Call) RunAndReturn(run func(context1 context.Context, transaction *Transaction)) *MockGrapher_Add_Call {
	_c.Run(run)
	return _c
}

// AddMinter provides a mock function for the type MockGrapher
func (_mock *MockGrapher) AddMinter(ctx context.Context, stateID pldtypes.HexBytes, transaction *Transaction) error {
	ret := _mock.Called(ctx, stateID, transaction)

	if len(ret) == 0 {
		panic("no return value specified for AddMinter")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.HexBytes, *Transaction) error); ok {
		r0 = returnFunc(ctx, stateID, transaction)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGrapher_AddMinter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMinter'
type MockGrapher_AddMinter_Call struct {
	*mock.Call
}

// AddMinter is a helper method to define mock.On call
//   - ctx context.Context
//   - stateID pldtypes.HexBytes
//   - transaction *Transaction
func (_e *MockGrapher_Expecter) AddMinter(ctx interface{}, stateID interface{}, transaction interface{}) *MockGrapher_AddMinter_Call {
	return &MockGrapher_AddMinter_Call{Call: _e.mock.On("AddMinter", ctx, stateID, transaction)}
}

func (_c *MockGrapher_AddMinter_Call) Run(run func(ctx context.Context, stateID pldtypes.HexBytes, transaction *Transaction)) *MockGrapher_AddMinter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pldtypes.HexBytes
		if args[1] != nil {
			arg1 = args[1].(pldtypes.HexBytes)
		}
		var arg2 *Transaction
		if args[2] != nil {
			arg2 = args[2].(*Transaction)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockGrapher_AddMinter_Call) Return(err error) *MockGrapher_AddMinter_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGrapher_AddMinter_Call) RunAndReturn(run func(ctx context.Context, stateID pldtypes.HexBytes, transaction *Transaction) error) *MockGrapher_AddMinter_Call {
	_c.Call.Return(run)
	return _c
}

// Forget provides a mock function for the type MockGrapher
func (_mock *MockGrapher) Forget(transactionID uuid.UUID) error {
	ret := _mock.Called(transactionID)

	if len(ret) == 0 {
		panic("no return value specified for Forget")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = returnFunc(transactionID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGrapher_Forget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Forget'
type MockGrapher_Forget_Call struct {
	*mock.Call
}

// Forget is a helper method to define mock.On call
//   - transactionID uuid.UUID
func (_e *MockGrapher_Expecter) Forget(transactionID interface{}) *MockGrapher_Forget_Call {
	return &MockGrapher_Forget_Call{Call: _e.mock.On("Forget", transactionID)}
}

func (_c *MockGrapher_Forget_Call) Run(run func(transactionID uuid.UUID)) *MockGrapher_Forget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGrapher_Forget_Call) Return(err error) *MockGrapher_Forget_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGrapher_Forget_Call) RunAndReturn(run func(transactionID uuid.UUID) error) *MockGrapher_Forget_Call {
	_c.Call.Return(run)
	return _c
}

// LookupMinter provides a mock function for the type MockGrapher
func (_mock *MockGrapher) LookupMinter(ctx context.Context, stateID pldtypes.HexBytes) (*Transaction, error) {
	ret := _mock.Called(ctx, stateID)

	if len(ret) == 0 {
		panic("no return value specified for LookupMinter")
	}

	var r0 *Transaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.HexBytes) (*Transaction, error)); ok {
		return returnFunc(ctx, stateID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pldtypes.HexBytes) *Transaction); ok {
		r0 = returnFunc(ctx, stateID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Transaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pldtypes.HexBytes) error); ok {
		r1 = returnFunc(ctx, stateID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGrapher_LookupMinter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupMinter'
type MockGrapher_LookupMinter_Call struct {
	*mock.Call
}

// LookupMinter is a helper method to define mock.On call
//   - ctx context.Context
//   - stateID pldtypes.HexBytes
func (_e *MockGrapher_Expecter) LookupMinter(ctx interface{}, stateID interface{}) *MockGrapher_LookupMinter_Call {
	return &MockGrapher_LookupMinter_Call{Call: _e.mock.On("LookupMinter", ctx, stateID)}
}

func (_c *MockGrapher_LookupMinter_Call) Run(run func(ctx context.Context, stateID pldtypes.HexBytes)) *MockGrapher_LookupMinter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pldtypes.HexBytes
		if args[1] != nil {
			arg1 = args[1].(pldtypes.HexBytes)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGrapher_LookupMinter_Call) Return(transaction *Transaction, err error) *MockGrapher_LookupMinter_Call {
	_c.Call.Return(transaction, err)
	return _c
}

func (_c *MockGrapher_LookupMinter_Call) RunAndReturn(run func(ctx context.Context, stateID pldtypes.HexBytes) (*Transaction, error)) *MockGrapher_LookupMinter_Call {
	_c.Call.Return(run)
	return _c
}

// TransactionByID provides a mock function for the type MockGrapher
func (_mock *MockGrapher) TransactionByID(ctx context.Context, transactionID uuid.UUID) *Transaction {
	ret := _mock.Called(ctx, transactionID)

	if len(ret) == 0 {
		panic("no return value specified for TransactionByID")
	}

	var r0 *Transaction
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Transaction); ok {
		r0 = returnFunc(ctx, transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Transaction)
		}
	}
	return r0
}

// MockGrapher_TransactionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactionByID'
type MockGrapher_TransactionByID_Call struct {
	*mock.Call
}

// TransactionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionID uuid.UUID
func (_e *MockGrapher_Expecter) TransactionByID(ctx interface{}, transactionID interface{}) *MockGrapher_TransactionByID_Call {
	return &MockGrapher_TransactionByID_Call{Call: _e.mock.On("TransactionByID", ctx, transactionID)}
}

func (_c *MockGrapher_TransactionByID_Call) Run(run func(ctx context.Context, transactionID uuid.UUID)) *MockGrapher_TransactionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGrapher_TransactionByID_Call) Return(transaction *Transaction) *MockGrapher_TransactionByID_Call {
	_c.Call.Return(transaction)
	return _c
}

func (_c *MockGrapher_TransactionByID_Call) RunAndReturn(run func(ctx context.Context, transactionID uuid.UUID) *Transaction) *MockGrapher_TransactionByID_Call {
	_c.Call.Return(run)
	return _c
}

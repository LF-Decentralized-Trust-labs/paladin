// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package coordinator

import (
	"context"
	"time"

	"github.com/LF-Decentralized-Trust-labs/paladin/core/internal/components"
	"github.com/LF-Decentralized-Trust-labs/paladin/core/internal/sequencer/common"
	"github.com/LF-Decentralized-Trust-labs/paladin/core/internal/sequencer/coordinator/transaction"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSeqCoordinator creates a new instance of MockSeqCoordinator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSeqCoordinator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSeqCoordinator {
	mock := &MockSeqCoordinator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSeqCoordinator is an autogenerated mock type for the SeqCoordinator type
type MockSeqCoordinator struct {
	mock.Mock
}

type MockSeqCoordinator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSeqCoordinator) EXPECT() *MockSeqCoordinator_Expecter {
	return &MockSeqCoordinator_Expecter{mock: &_m.Mock}
}

// GetActiveCoordinatorNode provides a mock function for the type MockSeqCoordinator
func (_mock *MockSeqCoordinator) GetActiveCoordinatorNode(ctx context.Context) string {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveCoordinatorNode")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSeqCoordinator_GetActiveCoordinatorNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveCoordinatorNode'
type MockSeqCoordinator_GetActiveCoordinatorNode_Call struct {
	*mock.Call
}

// GetActiveCoordinatorNode is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSeqCoordinator_Expecter) GetActiveCoordinatorNode(ctx interface{}) *MockSeqCoordinator_GetActiveCoordinatorNode_Call {
	return &MockSeqCoordinator_GetActiveCoordinatorNode_Call{Call: _e.mock.On("GetActiveCoordinatorNode", ctx)}
}

func (_c *MockSeqCoordinator_GetActiveCoordinatorNode_Call) Run(run func(ctx context.Context)) *MockSeqCoordinator_GetActiveCoordinatorNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSeqCoordinator_GetActiveCoordinatorNode_Call) Return(s string) *MockSeqCoordinator_GetActiveCoordinatorNode_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSeqCoordinator_GetActiveCoordinatorNode_Call) RunAndReturn(run func(ctx context.Context) string) *MockSeqCoordinator_GetActiveCoordinatorNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentState provides a mock function for the type MockSeqCoordinator
func (_mock *MockSeqCoordinator) GetCurrentState() State {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentState")
	}

	var r0 State
	if returnFunc, ok := ret.Get(0).(func() State); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(State)
	}
	return r0
}

// MockSeqCoordinator_GetCurrentState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentState'
type MockSeqCoordinator_GetCurrentState_Call struct {
	*mock.Call
}

// GetCurrentState is a helper method to define mock.On call
func (_e *MockSeqCoordinator_Expecter) GetCurrentState() *MockSeqCoordinator_GetCurrentState_Call {
	return &MockSeqCoordinator_GetCurrentState_Call{Call: _e.mock.On("GetCurrentState")}
}

func (_c *MockSeqCoordinator_GetCurrentState_Call) Run(run func()) *MockSeqCoordinator_GetCurrentState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSeqCoordinator_GetCurrentState_Call) Return(state State) *MockSeqCoordinator_GetCurrentState_Call {
	_c.Call.Return(state)
	return _c
}

func (_c *MockSeqCoordinator_GetCurrentState_Call) RunAndReturn(run func() State) *MockSeqCoordinator_GetCurrentState_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionByID provides a mock function for the type MockSeqCoordinator
func (_mock *MockSeqCoordinator) GetTransactionByID(ctx context.Context, txID uuid.UUID) *transaction.Transaction {
	ret := _mock.Called(ctx, txID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByID")
	}

	var r0 *transaction.Transaction
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *transaction.Transaction); ok {
		r0 = returnFunc(ctx, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.Transaction)
		}
	}
	return r0
}

// MockSeqCoordinator_GetTransactionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionByID'
type MockSeqCoordinator_GetTransactionByID_Call struct {
	*mock.Call
}

// GetTransactionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - txID uuid.UUID
func (_e *MockSeqCoordinator_Expecter) GetTransactionByID(ctx interface{}, txID interface{}) *MockSeqCoordinator_GetTransactionByID_Call {
	return &MockSeqCoordinator_GetTransactionByID_Call{Call: _e.mock.On("GetTransactionByID", ctx, txID)}
}

func (_c *MockSeqCoordinator_GetTransactionByID_Call) Run(run func(ctx context.Context, txID uuid.UUID)) *MockSeqCoordinator_GetTransactionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSeqCoordinator_GetTransactionByID_Call) Return(transaction1 *transaction.Transaction) *MockSeqCoordinator_GetTransactionByID_Call {
	_c.Call.Return(transaction1)
	return _c
}

func (_c *MockSeqCoordinator_GetTransactionByID_Call) RunAndReturn(run func(ctx context.Context, txID uuid.UUID) *transaction.Transaction) *MockSeqCoordinator_GetTransactionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionsReadyToDispatch provides a mock function for the type MockSeqCoordinator
func (_mock *MockSeqCoordinator) GetTransactionsReadyToDispatch(ctx context.Context) ([]*components.PrivateTransaction, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionsReadyToDispatch")
	}

	var r0 []*components.PrivateTransaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*components.PrivateTransaction, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*components.PrivateTransaction); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*components.PrivateTransaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSeqCoordinator_GetTransactionsReadyToDispatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionsReadyToDispatch'
type MockSeqCoordinator_GetTransactionsReadyToDispatch_Call struct {
	*mock.Call
}

// GetTransactionsReadyToDispatch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSeqCoordinator_Expecter) GetTransactionsReadyToDispatch(ctx interface{}) *MockSeqCoordinator_GetTransactionsReadyToDispatch_Call {
	return &MockSeqCoordinator_GetTransactionsReadyToDispatch_Call{Call: _e.mock.On("GetTransactionsReadyToDispatch", ctx)}
}

func (_c *MockSeqCoordinator_GetTransactionsReadyToDispatch_Call) Run(run func(ctx context.Context)) *MockSeqCoordinator_GetTransactionsReadyToDispatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSeqCoordinator_GetTransactionsReadyToDispatch_Call) Return(privateTransactions []*components.PrivateTransaction, err error) *MockSeqCoordinator_GetTransactionsReadyToDispatch_Call {
	_c.Call.Return(privateTransactions, err)
	return _c
}

func (_c *MockSeqCoordinator_GetTransactionsReadyToDispatch_Call) RunAndReturn(run func(ctx context.Context) ([]*components.PrivateTransaction, error)) *MockSeqCoordinator_GetTransactionsReadyToDispatch_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessEvent provides a mock function for the type MockSeqCoordinator
func (_mock *MockSeqCoordinator) ProcessEvent(ctx context.Context, event common.Event) error {
	ret := _mock.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for ProcessEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.Event) error); ok {
		r0 = returnFunc(ctx, event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSeqCoordinator_ProcessEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessEvent'
type MockSeqCoordinator_ProcessEvent_Call struct {
	*mock.Call
}

// ProcessEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - event common.Event
func (_e *MockSeqCoordinator_Expecter) ProcessEvent(ctx interface{}, event interface{}) *MockSeqCoordinator_ProcessEvent_Call {
	return &MockSeqCoordinator_ProcessEvent_Call{Call: _e.mock.On("ProcessEvent", ctx, event)}
}

func (_c *MockSeqCoordinator_ProcessEvent_Call) Run(run func(ctx context.Context, event common.Event)) *MockSeqCoordinator_ProcessEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 common.Event
		if args[1] != nil {
			arg1 = args[1].(common.Event)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSeqCoordinator_ProcessEvent_Call) Return(err error) *MockSeqCoordinator_ProcessEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSeqCoordinator_ProcessEvent_Call) RunAndReturn(run func(ctx context.Context, event common.Event) error) *MockSeqCoordinator_ProcessEvent_Call {
	_c.Call.Return(run)
	return _c
}

// QueueEvent provides a mock function for the type MockSeqCoordinator
func (_mock *MockSeqCoordinator) QueueEvent(ctx context.Context, event common.Event) {
	_mock.Called(ctx, event)
	return
}

// MockSeqCoordinator_QueueEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueueEvent'
type MockSeqCoordinator_QueueEvent_Call struct {
	*mock.Call
}

// QueueEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - event common.Event
func (_e *MockSeqCoordinator_Expecter) QueueEvent(ctx interface{}, event interface{}) *MockSeqCoordinator_QueueEvent_Call {
	return &MockSeqCoordinator_QueueEvent_Call{Call: _e.mock.On("QueueEvent", ctx, event)}
}

func (_c *MockSeqCoordinator_QueueEvent_Call) Run(run func(ctx context.Context, event common.Event)) *MockSeqCoordinator_QueueEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 common.Event
		if args[1] != nil {
			arg1 = args[1].(common.Event)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSeqCoordinator_QueueEvent_Call) Return() *MockSeqCoordinator_QueueEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSeqCoordinator_QueueEvent_Call) RunAndReturn(run func(ctx context.Context, event common.Event)) *MockSeqCoordinator_QueueEvent_Call {
	_c.Run(run)
	return _c
}

// SetActiveCoordinatorNode provides a mock function for the type MockSeqCoordinator
func (_mock *MockSeqCoordinator) SetActiveCoordinatorNode(ctx context.Context, coordinatorNode string) {
	_mock.Called(ctx, coordinatorNode)
	return
}

// MockSeqCoordinator_SetActiveCoordinatorNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetActiveCoordinatorNode'
type MockSeqCoordinator_SetActiveCoordinatorNode_Call struct {
	*mock.Call
}

// SetActiveCoordinatorNode is a helper method to define mock.On call
//   - ctx context.Context
//   - coordinatorNode string
func (_e *MockSeqCoordinator_Expecter) SetActiveCoordinatorNode(ctx interface{}, coordinatorNode interface{}) *MockSeqCoordinator_SetActiveCoordinatorNode_Call {
	return &MockSeqCoordinator_SetActiveCoordinatorNode_Call{Call: _e.mock.On("SetActiveCoordinatorNode", ctx, coordinatorNode)}
}

func (_c *MockSeqCoordinator_SetActiveCoordinatorNode_Call) Run(run func(ctx context.Context, coordinatorNode string)) *MockSeqCoordinator_SetActiveCoordinatorNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSeqCoordinator_SetActiveCoordinatorNode_Call) Return() *MockSeqCoordinator_SetActiveCoordinatorNode_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSeqCoordinator_SetActiveCoordinatorNode_Call) RunAndReturn(run func(ctx context.Context, coordinatorNode string)) *MockSeqCoordinator_SetActiveCoordinatorNode_Call {
	_c.Run(run)
	return _c
}

// Stop provides a mock function for the type MockSeqCoordinator
func (_mock *MockSeqCoordinator) Stop() {
	_mock.Called()
	return
}

// MockSeqCoordinator_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockSeqCoordinator_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockSeqCoordinator_Expecter) Stop() *MockSeqCoordinator_Stop_Call {
	return &MockSeqCoordinator_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockSeqCoordinator_Stop_Call) Run(run func()) *MockSeqCoordinator_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSeqCoordinator_Stop_Call) Return() *MockSeqCoordinator_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSeqCoordinator_Stop_Call) RunAndReturn(run func()) *MockSeqCoordinator_Stop_Call {
	_c.Run(run)
	return _c
}

// UpdateOriginatorNodePool provides a mock function for the type MockSeqCoordinator
func (_mock *MockSeqCoordinator) UpdateOriginatorNodePool(ctx context.Context, originatorNode string) {
	_mock.Called(ctx, originatorNode)
	return
}

// MockSeqCoordinator_UpdateOriginatorNodePool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOriginatorNodePool'
type MockSeqCoordinator_UpdateOriginatorNodePool_Call struct {
	*mock.Call
}

// UpdateOriginatorNodePool is a helper method to define mock.On call
//   - ctx context.Context
//   - originatorNode string
func (_e *MockSeqCoordinator_Expecter) UpdateOriginatorNodePool(ctx interface{}, originatorNode interface{}) *MockSeqCoordinator_UpdateOriginatorNodePool_Call {
	return &MockSeqCoordinator_UpdateOriginatorNodePool_Call{Call: _e.mock.On("UpdateOriginatorNodePool", ctx, originatorNode)}
}

func (_c *MockSeqCoordinator_UpdateOriginatorNodePool_Call) Run(run func(ctx context.Context, originatorNode string)) *MockSeqCoordinator_UpdateOriginatorNodePool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSeqCoordinator_UpdateOriginatorNodePool_Call) Return() *MockSeqCoordinator_UpdateOriginatorNodePool_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSeqCoordinator_UpdateOriginatorNodePool_Call) RunAndReturn(run func(ctx context.Context, originatorNode string)) *MockSeqCoordinator_UpdateOriginatorNodePool_Call {
	_c.Run(run)
	return _c
}

// NewMockEvent creates a new instance of MockEvent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEvent {
	mock := &MockEvent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEvent is an autogenerated mock type for the Event type
type MockEvent struct {
	mock.Mock
}

type MockEvent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEvent) EXPECT() *MockEvent_Expecter {
	return &MockEvent_Expecter{mock: &_m.Mock}
}

// GetEventTime provides a mock function for the type MockEvent
func (_mock *MockEvent) GetEventTime() time.Time {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEventTime")
	}

	var r0 time.Time
	if returnFunc, ok := ret.Get(0).(func() time.Time); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	return r0
}

// MockEvent_GetEventTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventTime'
type MockEvent_GetEventTime_Call struct {
	*mock.Call
}

// GetEventTime is a helper method to define mock.On call
func (_e *MockEvent_Expecter) GetEventTime() *MockEvent_GetEventTime_Call {
	return &MockEvent_GetEventTime_Call{Call: _e.mock.On("GetEventTime")}
}

func (_c *MockEvent_GetEventTime_Call) Run(run func()) *MockEvent_GetEventTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvent_GetEventTime_Call) Return(time1 time.Time) *MockEvent_GetEventTime_Call {
	_c.Call.Return(time1)
	return _c
}

func (_c *MockEvent_GetEventTime_Call) RunAndReturn(run func() time.Time) *MockEvent_GetEventTime_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function for the type MockEvent
func (_mock *MockEvent) Type() common.EventType {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 common.EventType
	if returnFunc, ok := ret.Get(0).(func() common.EventType); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(common.EventType)
	}
	return r0
}

// MockEvent_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockEvent_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockEvent_Expecter) Type() *MockEvent_Type_Call {
	return &MockEvent_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockEvent_Type_Call) Run(run func()) *MockEvent_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvent_Type_Call) Return(eventType common.EventType) *MockEvent_Type_Call {
	_c.Call.Return(eventType)
	return _c
}

func (_c *MockEvent_Type_Call) RunAndReturn(run func() common.EventType) *MockEvent_Type_Call {
	_c.Call.Return(run)
	return _c
}

// TypeString provides a mock function for the type MockEvent
func (_mock *MockEvent) TypeString() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TypeString")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockEvent_TypeString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeString'
type MockEvent_TypeString_Call struct {
	*mock.Call
}

// TypeString is a helper method to define mock.On call
func (_e *MockEvent_Expecter) TypeString() *MockEvent_TypeString_Call {
	return &MockEvent_TypeString_Call{Call: _e.mock.On("TypeString")}
}

func (_c *MockEvent_TypeString_Call) Run(run func()) *MockEvent_TypeString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvent_TypeString_Call) Return(s string) *MockEvent_TypeString_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockEvent_TypeString_Call) RunAndReturn(run func() string) *MockEvent_TypeString_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionSelector creates a new instance of MockTransactionSelector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionSelector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionSelector {
	mock := &MockTransactionSelector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransactionSelector is an autogenerated mock type for the TransactionSelector type
type MockTransactionSelector struct {
	mock.Mock
}

type MockTransactionSelector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionSelector) EXPECT() *MockTransactionSelector_Expecter {
	return &MockTransactionSelector_Expecter{mock: &_m.Mock}
}

// SelectNextTransaction provides a mock function for the type MockTransactionSelector
func (_mock *MockTransactionSelector) SelectNextTransaction(ctx context.Context, event *TransactionStateTransitionEvent) (*transaction.Transaction, error) {
	ret := _mock.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for SelectNextTransaction")
	}

	var r0 *transaction.Transaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *TransactionStateTransitionEvent) (*transaction.Transaction, error)); ok {
		return returnFunc(ctx, event)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *TransactionStateTransitionEvent) *transaction.Transaction); ok {
		r0 = returnFunc(ctx, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.Transaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *TransactionStateTransitionEvent) error); ok {
		r1 = returnFunc(ctx, event)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionSelector_SelectNextTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectNextTransaction'
type MockTransactionSelector_SelectNextTransaction_Call struct {
	*mock.Call
}

// SelectNextTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - event *TransactionStateTransitionEvent
func (_e *MockTransactionSelector_Expecter) SelectNextTransaction(ctx interface{}, event interface{}) *MockTransactionSelector_SelectNextTransaction_Call {
	return &MockTransactionSelector_SelectNextTransaction_Call{Call: _e.mock.On("SelectNextTransaction", ctx, event)}
}

func (_c *MockTransactionSelector_SelectNextTransaction_Call) Run(run func(ctx context.Context, event *TransactionStateTransitionEvent)) *MockTransactionSelector_SelectNextTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *TransactionStateTransitionEvent
		if args[1] != nil {
			arg1 = args[1].(*TransactionStateTransitionEvent)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransactionSelector_SelectNextTransaction_Call) Return(transaction1 *transaction.Transaction, err error) *MockTransactionSelector_SelectNextTransaction_Call {
	_c.Call.Return(transaction1, err)
	return _c
}

func (_c *MockTransactionSelector_SelectNextTransaction_Call) RunAndReturn(run func(ctx context.Context, event *TransactionStateTransitionEvent) (*transaction.Transaction, error)) *MockTransactionSelector_SelectNextTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionPool creates a new instance of MockTransactionPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionPool(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionPool {
	mock := &MockTransactionPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransactionPool is an autogenerated mock type for the TransactionPool type
type MockTransactionPool struct {
	mock.Mock
}

type MockTransactionPool_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionPool) EXPECT() *MockTransactionPool_Expecter {
	return &MockTransactionPool_Expecter{mock: &_m.Mock}
}

// GetCurrentOriginatorPool provides a mock function for the type MockTransactionPool
func (_mock *MockTransactionPool) GetCurrentOriginatorPool(ctx context.Context) []string {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentOriginatorPool")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockTransactionPool_GetCurrentOriginatorPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentOriginatorPool'
type MockTransactionPool_GetCurrentOriginatorPool_Call struct {
	*mock.Call
}

// GetCurrentOriginatorPool is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTransactionPool_Expecter) GetCurrentOriginatorPool(ctx interface{}) *MockTransactionPool_GetCurrentOriginatorPool_Call {
	return &MockTransactionPool_GetCurrentOriginatorPool_Call{Call: _e.mock.On("GetCurrentOriginatorPool", ctx)}
}

func (_c *MockTransactionPool_GetCurrentOriginatorPool_Call) Run(run func(ctx context.Context)) *MockTransactionPool_GetCurrentOriginatorPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransactionPool_GetCurrentOriginatorPool_Call) Return(strings []string) *MockTransactionPool_GetCurrentOriginatorPool_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockTransactionPool_GetCurrentOriginatorPool_Call) RunAndReturn(run func(ctx context.Context) []string) *MockTransactionPool_GetCurrentOriginatorPool_Call {
	_c.Call.Return(run)
	return _c
}

// GetPooledTransactionsByOriginatorNodeAndIdentity provides a mock function for the type MockTransactionPool
func (_mock *MockTransactionPool) GetPooledTransactionsByOriginatorNodeAndIdentity(ctx context.Context) map[string]map[string]*transaction.Transaction {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPooledTransactionsByOriginatorNodeAndIdentity")
	}

	var r0 map[string]map[string]*transaction.Transaction
	if returnFunc, ok := ret.Get(0).(func(context.Context) map[string]map[string]*transaction.Transaction); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string]*transaction.Transaction)
		}
	}
	return r0
}

// MockTransactionPool_GetPooledTransactionsByOriginatorNodeAndIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPooledTransactionsByOriginatorNodeAndIdentity'
type MockTransactionPool_GetPooledTransactionsByOriginatorNodeAndIdentity_Call struct {
	*mock.Call
}

// GetPooledTransactionsByOriginatorNodeAndIdentity is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTransactionPool_Expecter) GetPooledTransactionsByOriginatorNodeAndIdentity(ctx interface{}) *MockTransactionPool_GetPooledTransactionsByOriginatorNodeAndIdentity_Call {
	return &MockTransactionPool_GetPooledTransactionsByOriginatorNodeAndIdentity_Call{Call: _e.mock.On("GetPooledTransactionsByOriginatorNodeAndIdentity", ctx)}
}

func (_c *MockTransactionPool_GetPooledTransactionsByOriginatorNodeAndIdentity_Call) Run(run func(ctx context.Context)) *MockTransactionPool_GetPooledTransactionsByOriginatorNodeAndIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransactionPool_GetPooledTransactionsByOriginatorNodeAndIdentity_Call) Return(stringToStringToTransaction map[string]map[string]*transaction.Transaction) *MockTransactionPool_GetPooledTransactionsByOriginatorNodeAndIdentity_Call {
	_c.Call.Return(stringToStringToTransaction)
	return _c
}

func (_c *MockTransactionPool_GetPooledTransactionsByOriginatorNodeAndIdentity_Call) RunAndReturn(run func(ctx context.Context) map[string]map[string]*transaction.Transaction) *MockTransactionPool_GetPooledTransactionsByOriginatorNodeAndIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionByID provides a mock function for the type MockTransactionPool
func (_mock *MockTransactionPool) GetTransactionByID(ctx context.Context, txnID uuid.UUID) *transaction.Transaction {
	ret := _mock.Called(ctx, txnID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByID")
	}

	var r0 *transaction.Transaction
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *transaction.Transaction); ok {
		r0 = returnFunc(ctx, txnID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.Transaction)
		}
	}
	return r0
}

// MockTransactionPool_GetTransactionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionByID'
type MockTransactionPool_GetTransactionByID_Call struct {
	*mock.Call
}

// GetTransactionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - txnID uuid.UUID
func (_e *MockTransactionPool_Expecter) GetTransactionByID(ctx interface{}, txnID interface{}) *MockTransactionPool_GetTransactionByID_Call {
	return &MockTransactionPool_GetTransactionByID_Call{Call: _e.mock.On("GetTransactionByID", ctx, txnID)}
}

func (_c *MockTransactionPool_GetTransactionByID_Call) Run(run func(ctx context.Context, txnID uuid.UUID)) *MockTransactionPool_GetTransactionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransactionPool_GetTransactionByID_Call) Return(transaction1 *transaction.Transaction) *MockTransactionPool_GetTransactionByID_Call {
	_c.Call.Return(transaction1)
	return _c
}

func (_c *MockTransactionPool_GetTransactionByID_Call) RunAndReturn(run func(ctx context.Context, txnID uuid.UUID) *transaction.Transaction) *MockTransactionPool_GetTransactionByID_Call {
	_c.Call.Return(run)
	return _c
}

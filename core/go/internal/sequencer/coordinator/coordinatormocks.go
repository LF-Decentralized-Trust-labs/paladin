// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package coordinator

import (
	"context"
	"time"

	"github.com/LF-Decentralized-Trust-labs/paladin/core/internal/components"
	"github.com/LF-Decentralized-Trust-labs/paladin/core/internal/sequencer/common"
	"github.com/LF-Decentralized-Trust-labs/paladin/core/internal/sequencer/coordinator/transaction"
	"github.com/LF-Decentralized-Trust-labs/paladin/sdk/go/pkg/pldtypes"
	"github.com/LF-Decentralized-Trust-labs/paladin/toolkit/pkg/prototk"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSeqCoordinator creates a new instance of MockSeqCoordinator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSeqCoordinator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSeqCoordinator {
	mock := &MockSeqCoordinator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSeqCoordinator is an autogenerated mock type for the SeqCoordinator type
type MockSeqCoordinator struct {
	mock.Mock
}

type MockSeqCoordinator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSeqCoordinator) EXPECT() *MockSeqCoordinator_Expecter {
	return &MockSeqCoordinator_Expecter{mock: &_m.Mock}
}

// GetActiveCoordinatorNode provides a mock function for the type MockSeqCoordinator
func (_mock *MockSeqCoordinator) GetActiveCoordinatorNode(ctx context.Context) string {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveCoordinatorNode")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSeqCoordinator_GetActiveCoordinatorNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveCoordinatorNode'
type MockSeqCoordinator_GetActiveCoordinatorNode_Call struct {
	*mock.Call
}

// GetActiveCoordinatorNode is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSeqCoordinator_Expecter) GetActiveCoordinatorNode(ctx interface{}) *MockSeqCoordinator_GetActiveCoordinatorNode_Call {
	return &MockSeqCoordinator_GetActiveCoordinatorNode_Call{Call: _e.mock.On("GetActiveCoordinatorNode", ctx)}
}

func (_c *MockSeqCoordinator_GetActiveCoordinatorNode_Call) Run(run func(ctx context.Context)) *MockSeqCoordinator_GetActiveCoordinatorNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSeqCoordinator_GetActiveCoordinatorNode_Call) Return(s string) *MockSeqCoordinator_GetActiveCoordinatorNode_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSeqCoordinator_GetActiveCoordinatorNode_Call) RunAndReturn(run func(ctx context.Context) string) *MockSeqCoordinator_GetActiveCoordinatorNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentState provides a mock function for the type MockSeqCoordinator
func (_mock *MockSeqCoordinator) GetCurrentState() common.CoordinatorState {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentState")
	}

	var r0 common.CoordinatorState
	if returnFunc, ok := ret.Get(0).(func() common.CoordinatorState); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(common.CoordinatorState)
	}
	return r0
}

// MockSeqCoordinator_GetCurrentState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentState'
type MockSeqCoordinator_GetCurrentState_Call struct {
	*mock.Call
}

// GetCurrentState is a helper method to define mock.On call
func (_e *MockSeqCoordinator_Expecter) GetCurrentState() *MockSeqCoordinator_GetCurrentState_Call {
	return &MockSeqCoordinator_GetCurrentState_Call{Call: _e.mock.On("GetCurrentState")}
}

func (_c *MockSeqCoordinator_GetCurrentState_Call) Run(run func()) *MockSeqCoordinator_GetCurrentState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSeqCoordinator_GetCurrentState_Call) Return(coordinatorState common.CoordinatorState) *MockSeqCoordinator_GetCurrentState_Call {
	_c.Call.Return(coordinatorState)
	return _c
}

func (_c *MockSeqCoordinator_GetCurrentState_Call) RunAndReturn(run func() common.CoordinatorState) *MockSeqCoordinator_GetCurrentState_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionByID provides a mock function for the type MockSeqCoordinator
func (_mock *MockSeqCoordinator) GetTransactionByID(ctx context.Context, txID uuid.UUID) *transaction.Transaction {
	ret := _mock.Called(ctx, txID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByID")
	}

	var r0 *transaction.Transaction
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *transaction.Transaction); ok {
		r0 = returnFunc(ctx, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.Transaction)
		}
	}
	return r0
}

// MockSeqCoordinator_GetTransactionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionByID'
type MockSeqCoordinator_GetTransactionByID_Call struct {
	*mock.Call
}

// GetTransactionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - txID uuid.UUID
func (_e *MockSeqCoordinator_Expecter) GetTransactionByID(ctx interface{}, txID interface{}) *MockSeqCoordinator_GetTransactionByID_Call {
	return &MockSeqCoordinator_GetTransactionByID_Call{Call: _e.mock.On("GetTransactionByID", ctx, txID)}
}

func (_c *MockSeqCoordinator_GetTransactionByID_Call) Run(run func(ctx context.Context, txID uuid.UUID)) *MockSeqCoordinator_GetTransactionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSeqCoordinator_GetTransactionByID_Call) Return(transaction1 *transaction.Transaction) *MockSeqCoordinator_GetTransactionByID_Call {
	_c.Call.Return(transaction1)
	return _c
}

func (_c *MockSeqCoordinator_GetTransactionByID_Call) RunAndReturn(run func(ctx context.Context, txID uuid.UUID) *transaction.Transaction) *MockSeqCoordinator_GetTransactionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionsReadyToDispatch provides a mock function for the type MockSeqCoordinator
func (_mock *MockSeqCoordinator) GetTransactionsReadyToDispatch(ctx context.Context) ([]*components.PrivateTransaction, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionsReadyToDispatch")
	}

	var r0 []*components.PrivateTransaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*components.PrivateTransaction, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*components.PrivateTransaction); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*components.PrivateTransaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSeqCoordinator_GetTransactionsReadyToDispatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionsReadyToDispatch'
type MockSeqCoordinator_GetTransactionsReadyToDispatch_Call struct {
	*mock.Call
}

// GetTransactionsReadyToDispatch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSeqCoordinator_Expecter) GetTransactionsReadyToDispatch(ctx interface{}) *MockSeqCoordinator_GetTransactionsReadyToDispatch_Call {
	return &MockSeqCoordinator_GetTransactionsReadyToDispatch_Call{Call: _e.mock.On("GetTransactionsReadyToDispatch", ctx)}
}

func (_c *MockSeqCoordinator_GetTransactionsReadyToDispatch_Call) Run(run func(ctx context.Context)) *MockSeqCoordinator_GetTransactionsReadyToDispatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSeqCoordinator_GetTransactionsReadyToDispatch_Call) Return(privateTransactions []*components.PrivateTransaction, err error) *MockSeqCoordinator_GetTransactionsReadyToDispatch_Call {
	_c.Call.Return(privateTransactions, err)
	return _c
}

func (_c *MockSeqCoordinator_GetTransactionsReadyToDispatch_Call) RunAndReturn(run func(ctx context.Context) ([]*components.PrivateTransaction, error)) *MockSeqCoordinator_GetTransactionsReadyToDispatch_Call {
	_c.Call.Return(run)
	return _c
}

// HandleEvent provides a mock function for the type MockSeqCoordinator
func (_mock *MockSeqCoordinator) HandleEvent(ctx context.Context, event common.Event) error {
	ret := _mock.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for HandleEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.Event) error); ok {
		r0 = returnFunc(ctx, event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSeqCoordinator_HandleEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleEvent'
type MockSeqCoordinator_HandleEvent_Call struct {
	*mock.Call
}

// HandleEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - event common.Event
func (_e *MockSeqCoordinator_Expecter) HandleEvent(ctx interface{}, event interface{}) *MockSeqCoordinator_HandleEvent_Call {
	return &MockSeqCoordinator_HandleEvent_Call{Call: _e.mock.On("HandleEvent", ctx, event)}
}

func (_c *MockSeqCoordinator_HandleEvent_Call) Run(run func(ctx context.Context, event common.Event)) *MockSeqCoordinator_HandleEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 common.Event
		if args[1] != nil {
			arg1 = args[1].(common.Event)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSeqCoordinator_HandleEvent_Call) Return(err error) *MockSeqCoordinator_HandleEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSeqCoordinator_HandleEvent_Call) RunAndReturn(run func(ctx context.Context, event common.Event) error) *MockSeqCoordinator_HandleEvent_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockSeqCoordinator
func (_mock *MockSeqCoordinator) Stop() {
	_mock.Called()
	return
}

// MockSeqCoordinator_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockSeqCoordinator_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockSeqCoordinator_Expecter) Stop() *MockSeqCoordinator_Stop_Call {
	return &MockSeqCoordinator_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockSeqCoordinator_Stop_Call) Run(run func()) *MockSeqCoordinator_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSeqCoordinator_Stop_Call) Return() *MockSeqCoordinator_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSeqCoordinator_Stop_Call) RunAndReturn(run func()) *MockSeqCoordinator_Stop_Call {
	_c.Run(run)
	return _c
}

// UpdateSenderNodePool provides a mock function for the type MockSeqCoordinator
func (_mock *MockSeqCoordinator) UpdateSenderNodePool(ctx context.Context, senderNode string) {
	_mock.Called(ctx, senderNode)
	return
}

// MockSeqCoordinator_UpdateSenderNodePool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSenderNodePool'
type MockSeqCoordinator_UpdateSenderNodePool_Call struct {
	*mock.Call
}

// UpdateSenderNodePool is a helper method to define mock.On call
//   - ctx context.Context
//   - senderNode string
func (_e *MockSeqCoordinator_Expecter) UpdateSenderNodePool(ctx interface{}, senderNode interface{}) *MockSeqCoordinator_UpdateSenderNodePool_Call {
	return &MockSeqCoordinator_UpdateSenderNodePool_Call{Call: _e.mock.On("UpdateSenderNodePool", ctx, senderNode)}
}

func (_c *MockSeqCoordinator_UpdateSenderNodePool_Call) Run(run func(ctx context.Context, senderNode string)) *MockSeqCoordinator_UpdateSenderNodePool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSeqCoordinator_UpdateSenderNodePool_Call) Return() *MockSeqCoordinator_UpdateSenderNodePool_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSeqCoordinator_UpdateSenderNodePool_Call) RunAndReturn(run func(ctx context.Context, senderNode string)) *MockSeqCoordinator_UpdateSenderNodePool_Call {
	_c.Run(run)
	return _c
}

// NewMockEvent creates a new instance of MockEvent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEvent {
	mock := &MockEvent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEvent is an autogenerated mock type for the Event type
type MockEvent struct {
	mock.Mock
}

type MockEvent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEvent) EXPECT() *MockEvent_Expecter {
	return &MockEvent_Expecter{mock: &_m.Mock}
}

// GetEventTime provides a mock function for the type MockEvent
func (_mock *MockEvent) GetEventTime() time.Time {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEventTime")
	}

	var r0 time.Time
	if returnFunc, ok := ret.Get(0).(func() time.Time); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	return r0
}

// MockEvent_GetEventTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventTime'
type MockEvent_GetEventTime_Call struct {
	*mock.Call
}

// GetEventTime is a helper method to define mock.On call
func (_e *MockEvent_Expecter) GetEventTime() *MockEvent_GetEventTime_Call {
	return &MockEvent_GetEventTime_Call{Call: _e.mock.On("GetEventTime")}
}

func (_c *MockEvent_GetEventTime_Call) Run(run func()) *MockEvent_GetEventTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvent_GetEventTime_Call) Return(time1 time.Time) *MockEvent_GetEventTime_Call {
	_c.Call.Return(time1)
	return _c
}

func (_c *MockEvent_GetEventTime_Call) RunAndReturn(run func() time.Time) *MockEvent_GetEventTime_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function for the type MockEvent
func (_mock *MockEvent) Type() common.EventType {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 common.EventType
	if returnFunc, ok := ret.Get(0).(func() common.EventType); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(common.EventType)
	}
	return r0
}

// MockEvent_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockEvent_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockEvent_Expecter) Type() *MockEvent_Type_Call {
	return &MockEvent_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockEvent_Type_Call) Run(run func()) *MockEvent_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvent_Type_Call) Return(eventType common.EventType) *MockEvent_Type_Call {
	_c.Call.Return(eventType)
	return _c
}

func (_c *MockEvent_Type_Call) RunAndReturn(run func() common.EventType) *MockEvent_Type_Call {
	_c.Call.Return(run)
	return _c
}

// TypeString provides a mock function for the type MockEvent
func (_mock *MockEvent) TypeString() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TypeString")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockEvent_TypeString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeString'
type MockEvent_TypeString_Call struct {
	*mock.Call
}

// TypeString is a helper method to define mock.On call
func (_e *MockEvent_Expecter) TypeString() *MockEvent_TypeString_Call {
	return &MockEvent_TypeString_Call{Call: _e.mock.On("TypeString")}
}

func (_c *MockEvent_TypeString_Call) Run(run func()) *MockEvent_TypeString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvent_TypeString_Call) Return(s string) *MockEvent_TypeString_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockEvent_TypeString_Call) RunAndReturn(run func() string) *MockEvent_TypeString_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessageSender creates a new instance of MockMessageSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageSender {
	mock := &MockMessageSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMessageSender is an autogenerated mock type for the MessageSender type
type MockMessageSender struct {
	mock.Mock
}

type MockMessageSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageSender) EXPECT() *MockMessageSender_Expecter {
	return &MockMessageSender_Expecter{mock: &_m.Mock}
}

// SendAssembleRequest provides a mock function for the type MockMessageSender
func (_mock *MockMessageSender) SendAssembleRequest(ctx context.Context, assemblingNode string, transactionID uuid.UUID, idempotencyID uuid.UUID, transactionPreassembly *components.TransactionPreAssembly, stateLocksJSON []byte, blockHeight int64) error {
	ret := _mock.Called(ctx, assemblingNode, transactionID, idempotencyID, transactionPreassembly, stateLocksJSON, blockHeight)

	if len(ret) == 0 {
		panic("no return value specified for SendAssembleRequest")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, uuid.UUID, *components.TransactionPreAssembly, []byte, int64) error); ok {
		r0 = returnFunc(ctx, assemblingNode, transactionID, idempotencyID, transactionPreassembly, stateLocksJSON, blockHeight)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMessageSender_SendAssembleRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAssembleRequest'
type MockMessageSender_SendAssembleRequest_Call struct {
	*mock.Call
}

// SendAssembleRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - assemblingNode string
//   - transactionID uuid.UUID
//   - idempotencyID uuid.UUID
//   - transactionPreassembly *components.TransactionPreAssembly
//   - stateLocksJSON []byte
//   - blockHeight int64
func (_e *MockMessageSender_Expecter) SendAssembleRequest(ctx interface{}, assemblingNode interface{}, transactionID interface{}, idempotencyID interface{}, transactionPreassembly interface{}, stateLocksJSON interface{}, blockHeight interface{}) *MockMessageSender_SendAssembleRequest_Call {
	return &MockMessageSender_SendAssembleRequest_Call{Call: _e.mock.On("SendAssembleRequest", ctx, assemblingNode, transactionID, idempotencyID, transactionPreassembly, stateLocksJSON, blockHeight)}
}

func (_c *MockMessageSender_SendAssembleRequest_Call) Run(run func(ctx context.Context, assemblingNode string, transactionID uuid.UUID, idempotencyID uuid.UUID, transactionPreassembly *components.TransactionPreAssembly, stateLocksJSON []byte, blockHeight int64)) *MockMessageSender_SendAssembleRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 uuid.UUID
		if args[3] != nil {
			arg3 = args[3].(uuid.UUID)
		}
		var arg4 *components.TransactionPreAssembly
		if args[4] != nil {
			arg4 = args[4].(*components.TransactionPreAssembly)
		}
		var arg5 []byte
		if args[5] != nil {
			arg5 = args[5].([]byte)
		}
		var arg6 int64
		if args[6] != nil {
			arg6 = args[6].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *MockMessageSender_SendAssembleRequest_Call) Return(err error) *MockMessageSender_SendAssembleRequest_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMessageSender_SendAssembleRequest_Call) RunAndReturn(run func(ctx context.Context, assemblingNode string, transactionID uuid.UUID, idempotencyID uuid.UUID, transactionPreassembly *components.TransactionPreAssembly, stateLocksJSON []byte, blockHeight int64) error) *MockMessageSender_SendAssembleRequest_Call {
	_c.Call.Return(run)
	return _c
}

// SendDispatchConfirmationRequest provides a mock function for the type MockMessageSender
func (_mock *MockMessageSender) SendDispatchConfirmationRequest(ctx context.Context, transactionSender string, idempotencyKey uuid.UUID, transactionSpecification *prototk.TransactionSpecification, hash *pldtypes.Bytes32) error {
	ret := _mock.Called(ctx, transactionSender, idempotencyKey, transactionSpecification, hash)

	if len(ret) == 0 {
		panic("no return value specified for SendDispatchConfirmationRequest")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, *prototk.TransactionSpecification, *pldtypes.Bytes32) error); ok {
		r0 = returnFunc(ctx, transactionSender, idempotencyKey, transactionSpecification, hash)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMessageSender_SendDispatchConfirmationRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendDispatchConfirmationRequest'
type MockMessageSender_SendDispatchConfirmationRequest_Call struct {
	*mock.Call
}

// SendDispatchConfirmationRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionSender string
//   - idempotencyKey uuid.UUID
//   - transactionSpecification *prototk.TransactionSpecification
//   - hash *pldtypes.Bytes32
func (_e *MockMessageSender_Expecter) SendDispatchConfirmationRequest(ctx interface{}, transactionSender interface{}, idempotencyKey interface{}, transactionSpecification interface{}, hash interface{}) *MockMessageSender_SendDispatchConfirmationRequest_Call {
	return &MockMessageSender_SendDispatchConfirmationRequest_Call{Call: _e.mock.On("SendDispatchConfirmationRequest", ctx, transactionSender, idempotencyKey, transactionSpecification, hash)}
}

func (_c *MockMessageSender_SendDispatchConfirmationRequest_Call) Run(run func(ctx context.Context, transactionSender string, idempotencyKey uuid.UUID, transactionSpecification *prototk.TransactionSpecification, hash *pldtypes.Bytes32)) *MockMessageSender_SendDispatchConfirmationRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 *prototk.TransactionSpecification
		if args[3] != nil {
			arg3 = args[3].(*prototk.TransactionSpecification)
		}
		var arg4 *pldtypes.Bytes32
		if args[4] != nil {
			arg4 = args[4].(*pldtypes.Bytes32)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockMessageSender_SendDispatchConfirmationRequest_Call) Return(err error) *MockMessageSender_SendDispatchConfirmationRequest_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMessageSender_SendDispatchConfirmationRequest_Call) RunAndReturn(run func(ctx context.Context, transactionSender string, idempotencyKey uuid.UUID, transactionSpecification *prototk.TransactionSpecification, hash *pldtypes.Bytes32) error) *MockMessageSender_SendDispatchConfirmationRequest_Call {
	_c.Call.Return(run)
	return _c
}

// SendEndorsementRequest provides a mock function for the type MockMessageSender
func (_mock *MockMessageSender) SendEndorsementRequest(ctx context.Context, transactionId uuid.UUID, idempotencyKey uuid.UUID, party string, attRequest *prototk.AttestationRequest, transactionSpecification *prototk.TransactionSpecification, verifiers []*prototk.ResolvedVerifier, signatures []*prototk.AttestationResult, inputStates []*prototk.EndorsableState, outputStates []*prototk.EndorsableState, infoStates []*prototk.EndorsableState) error {
	ret := _mock.Called(ctx, transactionId, idempotencyKey, party, attRequest, transactionSpecification, verifiers, signatures, inputStates, outputStates, infoStates)

	if len(ret) == 0 {
		panic("no return value specified for SendEndorsementRequest")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string, *prototk.AttestationRequest, *prototk.TransactionSpecification, []*prototk.ResolvedVerifier, []*prototk.AttestationResult, []*prototk.EndorsableState, []*prototk.EndorsableState, []*prototk.EndorsableState) error); ok {
		r0 = returnFunc(ctx, transactionId, idempotencyKey, party, attRequest, transactionSpecification, verifiers, signatures, inputStates, outputStates, infoStates)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMessageSender_SendEndorsementRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEndorsementRequest'
type MockMessageSender_SendEndorsementRequest_Call struct {
	*mock.Call
}

// SendEndorsementRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionId uuid.UUID
//   - idempotencyKey uuid.UUID
//   - party string
//   - attRequest *prototk.AttestationRequest
//   - transactionSpecification *prototk.TransactionSpecification
//   - verifiers []*prototk.ResolvedVerifier
//   - signatures []*prototk.AttestationResult
//   - inputStates []*prototk.EndorsableState
//   - outputStates []*prototk.EndorsableState
//   - infoStates []*prototk.EndorsableState
func (_e *MockMessageSender_Expecter) SendEndorsementRequest(ctx interface{}, transactionId interface{}, idempotencyKey interface{}, party interface{}, attRequest interface{}, transactionSpecification interface{}, verifiers interface{}, signatures interface{}, inputStates interface{}, outputStates interface{}, infoStates interface{}) *MockMessageSender_SendEndorsementRequest_Call {
	return &MockMessageSender_SendEndorsementRequest_Call{Call: _e.mock.On("SendEndorsementRequest", ctx, transactionId, idempotencyKey, party, attRequest, transactionSpecification, verifiers, signatures, inputStates, outputStates, infoStates)}
}

func (_c *MockMessageSender_SendEndorsementRequest_Call) Run(run func(ctx context.Context, transactionId uuid.UUID, idempotencyKey uuid.UUID, party string, attRequest *prototk.AttestationRequest, transactionSpecification *prototk.TransactionSpecification, verifiers []*prototk.ResolvedVerifier, signatures []*prototk.AttestationResult, inputStates []*prototk.EndorsableState, outputStates []*prototk.EndorsableState, infoStates []*prototk.EndorsableState)) *MockMessageSender_SendEndorsementRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 *prototk.AttestationRequest
		if args[4] != nil {
			arg4 = args[4].(*prototk.AttestationRequest)
		}
		var arg5 *prototk.TransactionSpecification
		if args[5] != nil {
			arg5 = args[5].(*prototk.TransactionSpecification)
		}
		var arg6 []*prototk.ResolvedVerifier
		if args[6] != nil {
			arg6 = args[6].([]*prototk.ResolvedVerifier)
		}
		var arg7 []*prototk.AttestationResult
		if args[7] != nil {
			arg7 = args[7].([]*prototk.AttestationResult)
		}
		var arg8 []*prototk.EndorsableState
		if args[8] != nil {
			arg8 = args[8].([]*prototk.EndorsableState)
		}
		var arg9 []*prototk.EndorsableState
		if args[9] != nil {
			arg9 = args[9].([]*prototk.EndorsableState)
		}
		var arg10 []*prototk.EndorsableState
		if args[10] != nil {
			arg10 = args[10].([]*prototk.EndorsableState)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7,
			arg8,
			arg9,
			arg10,
		)
	})
	return _c
}

func (_c *MockMessageSender_SendEndorsementRequest_Call) Return(err error) *MockMessageSender_SendEndorsementRequest_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMessageSender_SendEndorsementRequest_Call) RunAndReturn(run func(ctx context.Context, transactionId uuid.UUID, idempotencyKey uuid.UUID, party string, attRequest *prototk.AttestationRequest, transactionSpecification *prototk.TransactionSpecification, verifiers []*prototk.ResolvedVerifier, signatures []*prototk.AttestationResult, inputStates []*prototk.EndorsableState, outputStates []*prototk.EndorsableState, infoStates []*prototk.EndorsableState) error) *MockMessageSender_SendEndorsementRequest_Call {
	_c.Call.Return(run)
	return _c
}

// SendHandoverRequest provides a mock function for the type MockMessageSender
func (_mock *MockMessageSender) SendHandoverRequest(ctx context.Context, activeCoordinator string, contractAddress *pldtypes.EthAddress) {
	_mock.Called(ctx, activeCoordinator, contractAddress)
	return
}

// MockMessageSender_SendHandoverRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendHandoverRequest'
type MockMessageSender_SendHandoverRequest_Call struct {
	*mock.Call
}

// SendHandoverRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - activeCoordinator string
//   - contractAddress *pldtypes.EthAddress
func (_e *MockMessageSender_Expecter) SendHandoverRequest(ctx interface{}, activeCoordinator interface{}, contractAddress interface{}) *MockMessageSender_SendHandoverRequest_Call {
	return &MockMessageSender_SendHandoverRequest_Call{Call: _e.mock.On("SendHandoverRequest", ctx, activeCoordinator, contractAddress)}
}

func (_c *MockMessageSender_SendHandoverRequest_Call) Run(run func(ctx context.Context, activeCoordinator string, contractAddress *pldtypes.EthAddress)) *MockMessageSender_SendHandoverRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *pldtypes.EthAddress
		if args[2] != nil {
			arg2 = args[2].(*pldtypes.EthAddress)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMessageSender_SendHandoverRequest_Call) Return() *MockMessageSender_SendHandoverRequest_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMessageSender_SendHandoverRequest_Call) RunAndReturn(run func(ctx context.Context, activeCoordinator string, contractAddress *pldtypes.EthAddress)) *MockMessageSender_SendHandoverRequest_Call {
	_c.Run(run)
	return _c
}

// SendHeartbeat provides a mock function for the type MockMessageSender
func (_mock *MockMessageSender) SendHeartbeat(ctx context.Context, targetNode string, contractAddress *pldtypes.EthAddress, coordinatorSnapshot *common.CoordinatorSnapshot) {
	_mock.Called(ctx, targetNode, contractAddress, coordinatorSnapshot)
	return
}

// MockMessageSender_SendHeartbeat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendHeartbeat'
type MockMessageSender_SendHeartbeat_Call struct {
	*mock.Call
}

// SendHeartbeat is a helper method to define mock.On call
//   - ctx context.Context
//   - targetNode string
//   - contractAddress *pldtypes.EthAddress
//   - coordinatorSnapshot *common.CoordinatorSnapshot
func (_e *MockMessageSender_Expecter) SendHeartbeat(ctx interface{}, targetNode interface{}, contractAddress interface{}, coordinatorSnapshot interface{}) *MockMessageSender_SendHeartbeat_Call {
	return &MockMessageSender_SendHeartbeat_Call{Call: _e.mock.On("SendHeartbeat", ctx, targetNode, contractAddress, coordinatorSnapshot)}
}

func (_c *MockMessageSender_SendHeartbeat_Call) Run(run func(ctx context.Context, targetNode string, contractAddress *pldtypes.EthAddress, coordinatorSnapshot *common.CoordinatorSnapshot)) *MockMessageSender_SendHeartbeat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *pldtypes.EthAddress
		if args[2] != nil {
			arg2 = args[2].(*pldtypes.EthAddress)
		}
		var arg3 *common.CoordinatorSnapshot
		if args[3] != nil {
			arg3 = args[3].(*common.CoordinatorSnapshot)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockMessageSender_SendHeartbeat_Call) Return() *MockMessageSender_SendHeartbeat_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMessageSender_SendHeartbeat_Call) RunAndReturn(run func(ctx context.Context, targetNode string, contractAddress *pldtypes.EthAddress, coordinatorSnapshot *common.CoordinatorSnapshot)) *MockMessageSender_SendHeartbeat_Call {
	_c.Run(run)
	return _c
}

// NewMockTransactionSelector creates a new instance of MockTransactionSelector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionSelector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionSelector {
	mock := &MockTransactionSelector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransactionSelector is an autogenerated mock type for the TransactionSelector type
type MockTransactionSelector struct {
	mock.Mock
}

type MockTransactionSelector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionSelector) EXPECT() *MockTransactionSelector_Expecter {
	return &MockTransactionSelector_Expecter{mock: &_m.Mock}
}

// SelectNextTransaction provides a mock function for the type MockTransactionSelector
func (_mock *MockTransactionSelector) SelectNextTransaction(ctx context.Context, event *TransactionStateTransitionEvent) (*transaction.Transaction, error) {
	ret := _mock.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for SelectNextTransaction")
	}

	var r0 *transaction.Transaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *TransactionStateTransitionEvent) (*transaction.Transaction, error)); ok {
		return returnFunc(ctx, event)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *TransactionStateTransitionEvent) *transaction.Transaction); ok {
		r0 = returnFunc(ctx, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.Transaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *TransactionStateTransitionEvent) error); ok {
		r1 = returnFunc(ctx, event)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionSelector_SelectNextTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectNextTransaction'
type MockTransactionSelector_SelectNextTransaction_Call struct {
	*mock.Call
}

// SelectNextTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - event *TransactionStateTransitionEvent
func (_e *MockTransactionSelector_Expecter) SelectNextTransaction(ctx interface{}, event interface{}) *MockTransactionSelector_SelectNextTransaction_Call {
	return &MockTransactionSelector_SelectNextTransaction_Call{Call: _e.mock.On("SelectNextTransaction", ctx, event)}
}

func (_c *MockTransactionSelector_SelectNextTransaction_Call) Run(run func(ctx context.Context, event *TransactionStateTransitionEvent)) *MockTransactionSelector_SelectNextTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *TransactionStateTransitionEvent
		if args[1] != nil {
			arg1 = args[1].(*TransactionStateTransitionEvent)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransactionSelector_SelectNextTransaction_Call) Return(transaction1 *transaction.Transaction, err error) *MockTransactionSelector_SelectNextTransaction_Call {
	_c.Call.Return(transaction1, err)
	return _c
}

func (_c *MockTransactionSelector_SelectNextTransaction_Call) RunAndReturn(run func(ctx context.Context, event *TransactionStateTransitionEvent) (*transaction.Transaction, error)) *MockTransactionSelector_SelectNextTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionPool creates a new instance of MockTransactionPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionPool(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionPool {
	mock := &MockTransactionPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransactionPool is an autogenerated mock type for the TransactionPool type
type MockTransactionPool struct {
	mock.Mock
}

type MockTransactionPool_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionPool) EXPECT() *MockTransactionPool_Expecter {
	return &MockTransactionPool_Expecter{mock: &_m.Mock}
}

// GetCurrentSenderPool provides a mock function for the type MockTransactionPool
func (_mock *MockTransactionPool) GetCurrentSenderPool(ctx context.Context) []string {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentSenderPool")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockTransactionPool_GetCurrentSenderPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentSenderPool'
type MockTransactionPool_GetCurrentSenderPool_Call struct {
	*mock.Call
}

// GetCurrentSenderPool is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTransactionPool_Expecter) GetCurrentSenderPool(ctx interface{}) *MockTransactionPool_GetCurrentSenderPool_Call {
	return &MockTransactionPool_GetCurrentSenderPool_Call{Call: _e.mock.On("GetCurrentSenderPool", ctx)}
}

func (_c *MockTransactionPool_GetCurrentSenderPool_Call) Run(run func(ctx context.Context)) *MockTransactionPool_GetCurrentSenderPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransactionPool_GetCurrentSenderPool_Call) Return(strings []string) *MockTransactionPool_GetCurrentSenderPool_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockTransactionPool_GetCurrentSenderPool_Call) RunAndReturn(run func(ctx context.Context) []string) *MockTransactionPool_GetCurrentSenderPool_Call {
	_c.Call.Return(run)
	return _c
}

// GetPooledTransactionsBySenderNodeAndIdentity provides a mock function for the type MockTransactionPool
func (_mock *MockTransactionPool) GetPooledTransactionsBySenderNodeAndIdentity(ctx context.Context) map[string]map[string]*transaction.Transaction {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPooledTransactionsBySenderNodeAndIdentity")
	}

	var r0 map[string]map[string]*transaction.Transaction
	if returnFunc, ok := ret.Get(0).(func(context.Context) map[string]map[string]*transaction.Transaction); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string]*transaction.Transaction)
		}
	}
	return r0
}

// MockTransactionPool_GetPooledTransactionsBySenderNodeAndIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPooledTransactionsBySenderNodeAndIdentity'
type MockTransactionPool_GetPooledTransactionsBySenderNodeAndIdentity_Call struct {
	*mock.Call
}

// GetPooledTransactionsBySenderNodeAndIdentity is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTransactionPool_Expecter) GetPooledTransactionsBySenderNodeAndIdentity(ctx interface{}) *MockTransactionPool_GetPooledTransactionsBySenderNodeAndIdentity_Call {
	return &MockTransactionPool_GetPooledTransactionsBySenderNodeAndIdentity_Call{Call: _e.mock.On("GetPooledTransactionsBySenderNodeAndIdentity", ctx)}
}

func (_c *MockTransactionPool_GetPooledTransactionsBySenderNodeAndIdentity_Call) Run(run func(ctx context.Context)) *MockTransactionPool_GetPooledTransactionsBySenderNodeAndIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransactionPool_GetPooledTransactionsBySenderNodeAndIdentity_Call) Return(stringToStringToTransaction map[string]map[string]*transaction.Transaction) *MockTransactionPool_GetPooledTransactionsBySenderNodeAndIdentity_Call {
	_c.Call.Return(stringToStringToTransaction)
	return _c
}

func (_c *MockTransactionPool_GetPooledTransactionsBySenderNodeAndIdentity_Call) RunAndReturn(run func(ctx context.Context) map[string]map[string]*transaction.Transaction) *MockTransactionPool_GetPooledTransactionsBySenderNodeAndIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionByID provides a mock function for the type MockTransactionPool
func (_mock *MockTransactionPool) GetTransactionByID(ctx context.Context, txnID uuid.UUID) *transaction.Transaction {
	ret := _mock.Called(ctx, txnID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByID")
	}

	var r0 *transaction.Transaction
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *transaction.Transaction); ok {
		r0 = returnFunc(ctx, txnID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.Transaction)
		}
	}
	return r0
}

// MockTransactionPool_GetTransactionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionByID'
type MockTransactionPool_GetTransactionByID_Call struct {
	*mock.Call
}

// GetTransactionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - txnID uuid.UUID
func (_e *MockTransactionPool_Expecter) GetTransactionByID(ctx interface{}, txnID interface{}) *MockTransactionPool_GetTransactionByID_Call {
	return &MockTransactionPool_GetTransactionByID_Call{Call: _e.mock.On("GetTransactionByID", ctx, txnID)}
}

func (_c *MockTransactionPool_GetTransactionByID_Call) Run(run func(ctx context.Context, txnID uuid.UUID)) *MockTransactionPool_GetTransactionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransactionPool_GetTransactionByID_Call) Return(transaction1 *transaction.Transaction) *MockTransactionPool_GetTransactionByID_Call {
	_c.Call.Return(transaction1)
	return _c
}

func (_c *MockTransactionPool_GetTransactionByID_Call) RunAndReturn(run func(ctx context.Context, txnID uuid.UUID) *transaction.Transaction) *MockTransactionPool_GetTransactionByID_Call {
	_c.Call.Return(run)
	return _c
}

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sender

import (
	"context"

	"github.com/google/uuid"
	"github.com/kaleido-io/paladin/core/internal/components"
	"github.com/kaleido-io/paladin/core/internal/sequencer/common"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEvent creates a new instance of MockEvent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEvent {
	mock := &MockEvent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEvent is an autogenerated mock type for the Event type
type MockEvent struct {
	mock.Mock
}

type MockEvent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEvent) EXPECT() *MockEvent_Expecter {
	return &MockEvent_Expecter{mock: &_m.Mock}
}

// Type provides a mock function for the type MockEvent
func (_mock *MockEvent) Type() common.EventType {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 common.EventType
	if returnFunc, ok := ret.Get(0).(func() common.EventType); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(common.EventType)
	}
	return r0
}

// MockEvent_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockEvent_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockEvent_Expecter) Type() *MockEvent_Type_Call {
	return &MockEvent_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockEvent_Type_Call) Run(run func()) *MockEvent_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvent_Type_Call) Return(eventType common.EventType) *MockEvent_Type_Call {
	_c.Call.Return(eventType)
	return _c
}

func (_c *MockEvent_Type_Call) RunAndReturn(run func() common.EventType) *MockEvent_Type_Call {
	_c.Call.Return(run)
	return _c
}

// TypeString provides a mock function for the type MockEvent
func (_mock *MockEvent) TypeString() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TypeString")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockEvent_TypeString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeString'
type MockEvent_TypeString_Call struct {
	*mock.Call
}

// TypeString is a helper method to define mock.On call
func (_e *MockEvent_Expecter) TypeString() *MockEvent_TypeString_Call {
	return &MockEvent_TypeString_Call{Call: _e.mock.On("TypeString")}
}

func (_c *MockEvent_TypeString_Call) Run(run func()) *MockEvent_TypeString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvent_TypeString_Call) Return(s string) *MockEvent_TypeString_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockEvent_TypeString_Call) RunAndReturn(run func() string) *MockEvent_TypeString_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessageSender creates a new instance of MockMessageSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageSender {
	mock := &MockMessageSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMessageSender is an autogenerated mock type for the MessageSender type
type MockMessageSender struct {
	mock.Mock
}

type MockMessageSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageSender) EXPECT() *MockMessageSender_Expecter {
	return &MockMessageSender_Expecter{mock: &_m.Mock}
}

// SendAssembleResponse provides a mock function for the type MockMessageSender
func (_mock *MockMessageSender) SendAssembleResponse(ctx context.Context, requestID uuid.UUID, postAssembly *components.TransactionPostAssembly) {
	_mock.Called(ctx, requestID, postAssembly)
	return
}

// MockMessageSender_SendAssembleResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAssembleResponse'
type MockMessageSender_SendAssembleResponse_Call struct {
	*mock.Call
}

// SendAssembleResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - requestID uuid.UUID
//   - postAssembly *components.TransactionPostAssembly
func (_e *MockMessageSender_Expecter) SendAssembleResponse(ctx interface{}, requestID interface{}, postAssembly interface{}) *MockMessageSender_SendAssembleResponse_Call {
	return &MockMessageSender_SendAssembleResponse_Call{Call: _e.mock.On("SendAssembleResponse", ctx, requestID, postAssembly)}
}

func (_c *MockMessageSender_SendAssembleResponse_Call) Run(run func(ctx context.Context, requestID uuid.UUID, postAssembly *components.TransactionPostAssembly)) *MockMessageSender_SendAssembleResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *components.TransactionPostAssembly
		if args[2] != nil {
			arg2 = args[2].(*components.TransactionPostAssembly)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMessageSender_SendAssembleResponse_Call) Return() *MockMessageSender_SendAssembleResponse_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMessageSender_SendAssembleResponse_Call) RunAndReturn(run func(ctx context.Context, requestID uuid.UUID, postAssembly *components.TransactionPostAssembly)) *MockMessageSender_SendAssembleResponse_Call {
	_c.Run(run)
	return _c
}

// SendDelegationRequest provides a mock function for the type MockMessageSender
func (_mock *MockMessageSender) SendDelegationRequest(ctx context.Context, coordinatorLocator string, transactions []*components.PrivateTransaction, sendersBlockHeight uint64) {
	_mock.Called(ctx, coordinatorLocator, transactions, sendersBlockHeight)
	return
}

// MockMessageSender_SendDelegationRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendDelegationRequest'
type MockMessageSender_SendDelegationRequest_Call struct {
	*mock.Call
}

// SendDelegationRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - coordinatorLocator string
//   - transactions []*components.PrivateTransaction
//   - sendersBlockHeight uint64
func (_e *MockMessageSender_Expecter) SendDelegationRequest(ctx interface{}, coordinatorLocator interface{}, transactions interface{}, sendersBlockHeight interface{}) *MockMessageSender_SendDelegationRequest_Call {
	return &MockMessageSender_SendDelegationRequest_Call{Call: _e.mock.On("SendDelegationRequest", ctx, coordinatorLocator, transactions, sendersBlockHeight)}
}

func (_c *MockMessageSender_SendDelegationRequest_Call) Run(run func(ctx context.Context, coordinatorLocator string, transactions []*components.PrivateTransaction, sendersBlockHeight uint64)) *MockMessageSender_SendDelegationRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []*components.PrivateTransaction
		if args[2] != nil {
			arg2 = args[2].([]*components.PrivateTransaction)
		}
		var arg3 uint64
		if args[3] != nil {
			arg3 = args[3].(uint64)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockMessageSender_SendDelegationRequest_Call) Return() *MockMessageSender_SendDelegationRequest_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMessageSender_SendDelegationRequest_Call) RunAndReturn(run func(ctx context.Context, coordinatorLocator string, transactions []*components.PrivateTransaction, sendersBlockHeight uint64)) *MockMessageSender_SendDelegationRequest_Call {
	_c.Run(run)
	return _c
}

// SendDispatchConfirmationResponse provides a mock function for the type MockMessageSender
func (_mock *MockMessageSender) SendDispatchConfirmationResponse(ctx context.Context) {
	_mock.Called(ctx)
	return
}

// MockMessageSender_SendDispatchConfirmationResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendDispatchConfirmationResponse'
type MockMessageSender_SendDispatchConfirmationResponse_Call struct {
	*mock.Call
}

// SendDispatchConfirmationResponse is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMessageSender_Expecter) SendDispatchConfirmationResponse(ctx interface{}) *MockMessageSender_SendDispatchConfirmationResponse_Call {
	return &MockMessageSender_SendDispatchConfirmationResponse_Call{Call: _e.mock.On("SendDispatchConfirmationResponse", ctx)}
}

func (_c *MockMessageSender_SendDispatchConfirmationResponse_Call) Run(run func(ctx context.Context)) *MockMessageSender_SendDispatchConfirmationResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMessageSender_SendDispatchConfirmationResponse_Call) Return() *MockMessageSender_SendDispatchConfirmationResponse_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMessageSender_SendDispatchConfirmationResponse_Call) RunAndReturn(run func(ctx context.Context)) *MockMessageSender_SendDispatchConfirmationResponse_Call {
	_c.Run(run)
	return _c
}

// NewMockSeqSender creates a new instance of MockSeqSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSeqSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSeqSender {
	mock := &MockSeqSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSeqSender is an autogenerated mock type for the SeqSender type
type MockSeqSender struct {
	mock.Mock
}

type MockSeqSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSeqSender) EXPECT() *MockSeqSender_Expecter {
	return &MockSeqSender_Expecter{mock: &_m.Mock}
}

// GetThing provides a mock function for the type MockSeqSender
func (_mock *MockSeqSender) GetThing() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetThing")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSeqSender_GetThing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetThing'
type MockSeqSender_GetThing_Call struct {
	*mock.Call
}

// GetThing is a helper method to define mock.On call
func (_e *MockSeqSender_Expecter) GetThing() *MockSeqSender_GetThing_Call {
	return &MockSeqSender_GetThing_Call{Call: _e.mock.On("GetThing")}
}

func (_c *MockSeqSender_GetThing_Call) Run(run func()) *MockSeqSender_GetThing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSeqSender_GetThing_Call) Return(err error) *MockSeqSender_GetThing_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSeqSender_GetThing_Call) RunAndReturn(run func() error) *MockSeqSender_GetThing_Call {
	_c.Call.Return(run)
	return _c
}

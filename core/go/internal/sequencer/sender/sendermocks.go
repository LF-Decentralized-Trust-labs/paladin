// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sender

import (
	"context"
	"time"

	"github.com/LF-Decentralized-Trust-labs/paladin/core/internal/components"
	"github.com/LF-Decentralized-Trust-labs/paladin/core/internal/sequencer/common"
	"github.com/LF-Decentralized-Trust-labs/paladin/toolkit/pkg/prototk"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEvent creates a new instance of MockEvent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEvent {
	mock := &MockEvent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEvent is an autogenerated mock type for the Event type
type MockEvent struct {
	mock.Mock
}

type MockEvent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEvent) EXPECT() *MockEvent_Expecter {
	return &MockEvent_Expecter{mock: &_m.Mock}
}

// GetEventTime provides a mock function for the type MockEvent
func (_mock *MockEvent) GetEventTime() time.Time {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEventTime")
	}

	var r0 time.Time
	if returnFunc, ok := ret.Get(0).(func() time.Time); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	return r0
}

// MockEvent_GetEventTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventTime'
type MockEvent_GetEventTime_Call struct {
	*mock.Call
}

// GetEventTime is a helper method to define mock.On call
func (_e *MockEvent_Expecter) GetEventTime() *MockEvent_GetEventTime_Call {
	return &MockEvent_GetEventTime_Call{Call: _e.mock.On("GetEventTime")}
}

func (_c *MockEvent_GetEventTime_Call) Run(run func()) *MockEvent_GetEventTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvent_GetEventTime_Call) Return(time1 time.Time) *MockEvent_GetEventTime_Call {
	_c.Call.Return(time1)
	return _c
}

func (_c *MockEvent_GetEventTime_Call) RunAndReturn(run func() time.Time) *MockEvent_GetEventTime_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function for the type MockEvent
func (_mock *MockEvent) Type() common.EventType {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 common.EventType
	if returnFunc, ok := ret.Get(0).(func() common.EventType); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(common.EventType)
	}
	return r0
}

// MockEvent_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockEvent_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockEvent_Expecter) Type() *MockEvent_Type_Call {
	return &MockEvent_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockEvent_Type_Call) Run(run func()) *MockEvent_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvent_Type_Call) Return(eventType common.EventType) *MockEvent_Type_Call {
	_c.Call.Return(eventType)
	return _c
}

func (_c *MockEvent_Type_Call) RunAndReturn(run func() common.EventType) *MockEvent_Type_Call {
	_c.Call.Return(run)
	return _c
}

// TypeString provides a mock function for the type MockEvent
func (_mock *MockEvent) TypeString() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TypeString")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockEvent_TypeString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeString'
type MockEvent_TypeString_Call struct {
	*mock.Call
}

// TypeString is a helper method to define mock.On call
func (_e *MockEvent_Expecter) TypeString() *MockEvent_TypeString_Call {
	return &MockEvent_TypeString_Call{Call: _e.mock.On("TypeString")}
}

func (_c *MockEvent_TypeString_Call) Run(run func()) *MockEvent_TypeString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvent_TypeString_Call) Return(s string) *MockEvent_TypeString_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockEvent_TypeString_Call) RunAndReturn(run func() string) *MockEvent_TypeString_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessageSender creates a new instance of MockMessageSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageSender {
	mock := &MockMessageSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMessageSender is an autogenerated mock type for the MessageSender type
type MockMessageSender struct {
	mock.Mock
}

type MockMessageSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageSender) EXPECT() *MockMessageSender_Expecter {
	return &MockMessageSender_Expecter{mock: &_m.Mock}
}

// SendAssembleResponse provides a mock function for the type MockMessageSender
func (_mock *MockMessageSender) SendAssembleResponse(ctx context.Context, txID uuid.UUID, requestID uuid.UUID, postAssembly *components.TransactionPostAssembly, preAssembly *components.TransactionPreAssembly, recipient string) {
	_mock.Called(ctx, txID, requestID, postAssembly, preAssembly, recipient)
	return
}

// MockMessageSender_SendAssembleResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAssembleResponse'
type MockMessageSender_SendAssembleResponse_Call struct {
	*mock.Call
}

// SendAssembleResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - txID uuid.UUID
//   - requestID uuid.UUID
//   - postAssembly *components.TransactionPostAssembly
//   - preAssembly *components.TransactionPreAssembly
//   - recipient string
func (_e *MockMessageSender_Expecter) SendAssembleResponse(ctx interface{}, txID interface{}, requestID interface{}, postAssembly interface{}, preAssembly interface{}, recipient interface{}) *MockMessageSender_SendAssembleResponse_Call {
	return &MockMessageSender_SendAssembleResponse_Call{Call: _e.mock.On("SendAssembleResponse", ctx, txID, requestID, postAssembly, preAssembly, recipient)}
}

func (_c *MockMessageSender_SendAssembleResponse_Call) Run(run func(ctx context.Context, txID uuid.UUID, requestID uuid.UUID, postAssembly *components.TransactionPostAssembly, preAssembly *components.TransactionPreAssembly, recipient string)) *MockMessageSender_SendAssembleResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 *components.TransactionPostAssembly
		if args[3] != nil {
			arg3 = args[3].(*components.TransactionPostAssembly)
		}
		var arg4 *components.TransactionPreAssembly
		if args[4] != nil {
			arg4 = args[4].(*components.TransactionPreAssembly)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockMessageSender_SendAssembleResponse_Call) Return() *MockMessageSender_SendAssembleResponse_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMessageSender_SendAssembleResponse_Call) RunAndReturn(run func(ctx context.Context, txID uuid.UUID, requestID uuid.UUID, postAssembly *components.TransactionPostAssembly, preAssembly *components.TransactionPreAssembly, recipient string)) *MockMessageSender_SendAssembleResponse_Call {
	_c.Run(run)
	return _c
}

// SendDelegationRequest provides a mock function for the type MockMessageSender
func (_mock *MockMessageSender) SendDelegationRequest(ctx context.Context, coordinatorLocator string, transactions []*components.PrivateTransaction, sendersBlockHeight uint64) {
	_mock.Called(ctx, coordinatorLocator, transactions, sendersBlockHeight)
	return
}

// MockMessageSender_SendDelegationRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendDelegationRequest'
type MockMessageSender_SendDelegationRequest_Call struct {
	*mock.Call
}

// SendDelegationRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - coordinatorLocator string
//   - transactions []*components.PrivateTransaction
//   - sendersBlockHeight uint64
func (_e *MockMessageSender_Expecter) SendDelegationRequest(ctx interface{}, coordinatorLocator interface{}, transactions interface{}, sendersBlockHeight interface{}) *MockMessageSender_SendDelegationRequest_Call {
	return &MockMessageSender_SendDelegationRequest_Call{Call: _e.mock.On("SendDelegationRequest", ctx, coordinatorLocator, transactions, sendersBlockHeight)}
}

func (_c *MockMessageSender_SendDelegationRequest_Call) Run(run func(ctx context.Context, coordinatorLocator string, transactions []*components.PrivateTransaction, sendersBlockHeight uint64)) *MockMessageSender_SendDelegationRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []*components.PrivateTransaction
		if args[2] != nil {
			arg2 = args[2].([]*components.PrivateTransaction)
		}
		var arg3 uint64
		if args[3] != nil {
			arg3 = args[3].(uint64)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockMessageSender_SendDelegationRequest_Call) Return() *MockMessageSender_SendDelegationRequest_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMessageSender_SendDelegationRequest_Call) RunAndReturn(run func(ctx context.Context, coordinatorLocator string, transactions []*components.PrivateTransaction, sendersBlockHeight uint64)) *MockMessageSender_SendDelegationRequest_Call {
	_c.Run(run)
	return _c
}

// SendPreDispatchResponse provides a mock function for the type MockMessageSender
func (_mock *MockMessageSender) SendPreDispatchResponse(ctx context.Context, transactionSender string, idempotencyKey uuid.UUID, transactionSpecification *prototk.TransactionSpecification) error {
	ret := _mock.Called(ctx, transactionSender, idempotencyKey, transactionSpecification)

	if len(ret) == 0 {
		panic("no return value specified for SendPreDispatchResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, *prototk.TransactionSpecification) error); ok {
		r0 = returnFunc(ctx, transactionSender, idempotencyKey, transactionSpecification)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMessageSender_SendPreDispatchResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPreDispatchResponse'
type MockMessageSender_SendPreDispatchResponse_Call struct {
	*mock.Call
}

// SendPreDispatchResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionSender string
//   - idempotencyKey uuid.UUID
//   - transactionSpecification *prototk.TransactionSpecification
func (_e *MockMessageSender_Expecter) SendPreDispatchResponse(ctx interface{}, transactionSender interface{}, idempotencyKey interface{}, transactionSpecification interface{}) *MockMessageSender_SendPreDispatchResponse_Call {
	return &MockMessageSender_SendPreDispatchResponse_Call{Call: _e.mock.On("SendPreDispatchResponse", ctx, transactionSender, idempotencyKey, transactionSpecification)}
}

func (_c *MockMessageSender_SendPreDispatchResponse_Call) Run(run func(ctx context.Context, transactionSender string, idempotencyKey uuid.UUID, transactionSpecification *prototk.TransactionSpecification)) *MockMessageSender_SendPreDispatchResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 *prototk.TransactionSpecification
		if args[3] != nil {
			arg3 = args[3].(*prototk.TransactionSpecification)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockMessageSender_SendPreDispatchResponse_Call) Return(err error) *MockMessageSender_SendPreDispatchResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMessageSender_SendPreDispatchResponse_Call) RunAndReturn(run func(ctx context.Context, transactionSender string, idempotencyKey uuid.UUID, transactionSpecification *prototk.TransactionSpecification) error) *MockMessageSender_SendPreDispatchResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSeqSender creates a new instance of MockSeqSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSeqSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSeqSender {
	mock := &MockSeqSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSeqSender is an autogenerated mock type for the SeqSender type
type MockSeqSender struct {
	mock.Mock
}

type MockSeqSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSeqSender) EXPECT() *MockSeqSender_Expecter {
	return &MockSeqSender_Expecter{mock: &_m.Mock}
}

// GetTxStatus provides a mock function for the type MockSeqSender
func (_mock *MockSeqSender) GetTxStatus(ctx context.Context, txID uuid.UUID) (components.PrivateTxStatus, error) {
	ret := _mock.Called(ctx, txID)

	if len(ret) == 0 {
		panic("no return value specified for GetTxStatus")
	}

	var r0 components.PrivateTxStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (components.PrivateTxStatus, error)); ok {
		return returnFunc(ctx, txID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) components.PrivateTxStatus); ok {
		r0 = returnFunc(ctx, txID)
	} else {
		r0 = ret.Get(0).(components.PrivateTxStatus)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, txID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSeqSender_GetTxStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTxStatus'
type MockSeqSender_GetTxStatus_Call struct {
	*mock.Call
}

// GetTxStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - txID uuid.UUID
func (_e *MockSeqSender_Expecter) GetTxStatus(ctx interface{}, txID interface{}) *MockSeqSender_GetTxStatus_Call {
	return &MockSeqSender_GetTxStatus_Call{Call: _e.mock.On("GetTxStatus", ctx, txID)}
}

func (_c *MockSeqSender_GetTxStatus_Call) Run(run func(ctx context.Context, txID uuid.UUID)) *MockSeqSender_GetTxStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSeqSender_GetTxStatus_Call) Return(status components.PrivateTxStatus, err error) *MockSeqSender_GetTxStatus_Call {
	_c.Call.Return(status, err)
	return _c
}

func (_c *MockSeqSender_GetTxStatus_Call) RunAndReturn(run func(ctx context.Context, txID uuid.UUID) (components.PrivateTxStatus, error)) *MockSeqSender_GetTxStatus_Call {
	_c.Call.Return(run)
	return _c
}

// HandleEvent provides a mock function for the type MockSeqSender
func (_mock *MockSeqSender) HandleEvent(ctx context.Context, event common.Event) error {
	ret := _mock.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for HandleEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.Event) error); ok {
		r0 = returnFunc(ctx, event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSeqSender_HandleEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleEvent'
type MockSeqSender_HandleEvent_Call struct {
	*mock.Call
}

// HandleEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - event common.Event
func (_e *MockSeqSender_Expecter) HandleEvent(ctx interface{}, event interface{}) *MockSeqSender_HandleEvent_Call {
	return &MockSeqSender_HandleEvent_Call{Call: _e.mock.On("HandleEvent", ctx, event)}
}

func (_c *MockSeqSender_HandleEvent_Call) Run(run func(ctx context.Context, event common.Event)) *MockSeqSender_HandleEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 common.Event
		if args[1] != nil {
			arg1 = args[1].(common.Event)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSeqSender_HandleEvent_Call) Return(err error) *MockSeqSender_HandleEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSeqSender_HandleEvent_Call) RunAndReturn(run func(ctx context.Context, event common.Event) error) *MockSeqSender_HandleEvent_Call {
	_c.Call.Return(run)
	return _c
}

// SetActiveCoordinator provides a mock function for the type MockSeqSender
func (_mock *MockSeqSender) SetActiveCoordinator(ctx context.Context, coordinator string) error {
	ret := _mock.Called(ctx, coordinator)

	if len(ret) == 0 {
		panic("no return value specified for SetActiveCoordinator")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, coordinator)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSeqSender_SetActiveCoordinator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetActiveCoordinator'
type MockSeqSender_SetActiveCoordinator_Call struct {
	*mock.Call
}

// SetActiveCoordinator is a helper method to define mock.On call
//   - ctx context.Context
//   - coordinator string
func (_e *MockSeqSender_Expecter) SetActiveCoordinator(ctx interface{}, coordinator interface{}) *MockSeqSender_SetActiveCoordinator_Call {
	return &MockSeqSender_SetActiveCoordinator_Call{Call: _e.mock.On("SetActiveCoordinator", ctx, coordinator)}
}

func (_c *MockSeqSender_SetActiveCoordinator_Call) Run(run func(ctx context.Context, coordinator string)) *MockSeqSender_SetActiveCoordinator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSeqSender_SetActiveCoordinator_Call) Return(err error) *MockSeqSender_SetActiveCoordinator_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSeqSender_SetActiveCoordinator_Call) RunAndReturn(run func(ctx context.Context, coordinator string) error) *MockSeqSender_SetActiveCoordinator_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockSeqSender
func (_mock *MockSeqSender) Stop() {
	_mock.Called()
	return
}

// MockSeqSender_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockSeqSender_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockSeqSender_Expecter) Stop() *MockSeqSender_Stop_Call {
	return &MockSeqSender_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockSeqSender_Stop_Call) Run(run func()) *MockSeqSender_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSeqSender_Stop_Call) Return() *MockSeqSender_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSeqSender_Stop_Call) RunAndReturn(run func()) *MockSeqSender_Stop_Call {
	_c.Run(run)
	return _c
}

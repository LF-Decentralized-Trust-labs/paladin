// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package transport

import (
	"context"

	"github.com/LF-Decentralized-Trust-labs/paladin/core/internal/components"
	"github.com/LF-Decentralized-Trust-labs/paladin/core/internal/sequencer/common"
	"github.com/LF-Decentralized-Trust-labs/paladin/sdk/go/pkg/pldtypes"
	"github.com/LF-Decentralized-Trust-labs/paladin/toolkit/pkg/prototk"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockLoopbackTransportManager creates a new instance of MockLoopbackTransportManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoopbackTransportManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoopbackTransportManager {
	mock := &MockLoopbackTransportManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLoopbackTransportManager is an autogenerated mock type for the LoopbackTransportManager type
type MockLoopbackTransportManager struct {
	mock.Mock
}

type MockLoopbackTransportManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoopbackTransportManager) EXPECT() *MockLoopbackTransportManager_Expecter {
	return &MockLoopbackTransportManager_Expecter{mock: &_m.Mock}
}

// Send provides a mock function for the type MockLoopbackTransportManager
func (_mock *MockLoopbackTransportManager) Send(ctx context.Context, send *components.FireAndForgetMessageSend) error {
	ret := _mock.Called(ctx, send)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *components.FireAndForgetMessageSend) error); ok {
		r0 = returnFunc(ctx, send)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLoopbackTransportManager_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockLoopbackTransportManager_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - send *components.FireAndForgetMessageSend
func (_e *MockLoopbackTransportManager_Expecter) Send(ctx interface{}, send interface{}) *MockLoopbackTransportManager_Send_Call {
	return &MockLoopbackTransportManager_Send_Call{Call: _e.mock.On("Send", ctx, send)}
}

func (_c *MockLoopbackTransportManager_Send_Call) Run(run func(ctx context.Context, send *components.FireAndForgetMessageSend)) *MockLoopbackTransportManager_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *components.FireAndForgetMessageSend
		if args[1] != nil {
			arg1 = args[1].(*components.FireAndForgetMessageSend)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLoopbackTransportManager_Send_Call) Return(err error) *MockLoopbackTransportManager_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLoopbackTransportManager_Send_Call) RunAndReturn(run func(ctx context.Context, send *components.FireAndForgetMessageSend) error) *MockLoopbackTransportManager_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransportWriter creates a new instance of MockTransportWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransportWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransportWriter {
	mock := &MockTransportWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransportWriter is an autogenerated mock type for the TransportWriter type
type MockTransportWriter struct {
	mock.Mock
}

type MockTransportWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransportWriter) EXPECT() *MockTransportWriter_Expecter {
	return &MockTransportWriter_Expecter{mock: &_m.Mock}
}

// SendAssembleRequest provides a mock function for the type MockTransportWriter
func (_mock *MockTransportWriter) SendAssembleRequest(ctx context.Context, assemblingNode string, txID uuid.UUID, idempotencyId uuid.UUID, preAssembly *components.TransactionPreAssembly, stateLocksJSON []byte, blockHeight int64) error {
	ret := _mock.Called(ctx, assemblingNode, txID, idempotencyId, preAssembly, stateLocksJSON, blockHeight)

	if len(ret) == 0 {
		panic("no return value specified for SendAssembleRequest")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, uuid.UUID, *components.TransactionPreAssembly, []byte, int64) error); ok {
		r0 = returnFunc(ctx, assemblingNode, txID, idempotencyId, preAssembly, stateLocksJSON, blockHeight)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransportWriter_SendAssembleRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAssembleRequest'
type MockTransportWriter_SendAssembleRequest_Call struct {
	*mock.Call
}

// SendAssembleRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - assemblingNode string
//   - txID uuid.UUID
//   - idempotencyId uuid.UUID
//   - preAssembly *components.TransactionPreAssembly
//   - stateLocksJSON []byte
//   - blockHeight int64
func (_e *MockTransportWriter_Expecter) SendAssembleRequest(ctx interface{}, assemblingNode interface{}, txID interface{}, idempotencyId interface{}, preAssembly interface{}, stateLocksJSON interface{}, blockHeight interface{}) *MockTransportWriter_SendAssembleRequest_Call {
	return &MockTransportWriter_SendAssembleRequest_Call{Call: _e.mock.On("SendAssembleRequest", ctx, assemblingNode, txID, idempotencyId, preAssembly, stateLocksJSON, blockHeight)}
}

func (_c *MockTransportWriter_SendAssembleRequest_Call) Run(run func(ctx context.Context, assemblingNode string, txID uuid.UUID, idempotencyId uuid.UUID, preAssembly *components.TransactionPreAssembly, stateLocksJSON []byte, blockHeight int64)) *MockTransportWriter_SendAssembleRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 uuid.UUID
		if args[3] != nil {
			arg3 = args[3].(uuid.UUID)
		}
		var arg4 *components.TransactionPreAssembly
		if args[4] != nil {
			arg4 = args[4].(*components.TransactionPreAssembly)
		}
		var arg5 []byte
		if args[5] != nil {
			arg5 = args[5].([]byte)
		}
		var arg6 int64
		if args[6] != nil {
			arg6 = args[6].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *MockTransportWriter_SendAssembleRequest_Call) Return(err error) *MockTransportWriter_SendAssembleRequest_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransportWriter_SendAssembleRequest_Call) RunAndReturn(run func(ctx context.Context, assemblingNode string, txID uuid.UUID, idempotencyId uuid.UUID, preAssembly *components.TransactionPreAssembly, stateLocksJSON []byte, blockHeight int64) error) *MockTransportWriter_SendAssembleRequest_Call {
	_c.Call.Return(run)
	return _c
}

// SendAssembleResponse provides a mock function for the type MockTransportWriter
func (_mock *MockTransportWriter) SendAssembleResponse(ctx context.Context, txID uuid.UUID, assembleRequestId uuid.UUID, postAssembly *components.TransactionPostAssembly, preAssembly *components.TransactionPreAssembly, recipient string) error {
	ret := _mock.Called(ctx, txID, assembleRequestId, postAssembly, preAssembly, recipient)

	if len(ret) == 0 {
		panic("no return value specified for SendAssembleResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, *components.TransactionPostAssembly, *components.TransactionPreAssembly, string) error); ok {
		r0 = returnFunc(ctx, txID, assembleRequestId, postAssembly, preAssembly, recipient)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransportWriter_SendAssembleResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAssembleResponse'
type MockTransportWriter_SendAssembleResponse_Call struct {
	*mock.Call
}

// SendAssembleResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - txID uuid.UUID
//   - assembleRequestId uuid.UUID
//   - postAssembly *components.TransactionPostAssembly
//   - preAssembly *components.TransactionPreAssembly
//   - recipient string
func (_e *MockTransportWriter_Expecter) SendAssembleResponse(ctx interface{}, txID interface{}, assembleRequestId interface{}, postAssembly interface{}, preAssembly interface{}, recipient interface{}) *MockTransportWriter_SendAssembleResponse_Call {
	return &MockTransportWriter_SendAssembleResponse_Call{Call: _e.mock.On("SendAssembleResponse", ctx, txID, assembleRequestId, postAssembly, preAssembly, recipient)}
}

func (_c *MockTransportWriter_SendAssembleResponse_Call) Run(run func(ctx context.Context, txID uuid.UUID, assembleRequestId uuid.UUID, postAssembly *components.TransactionPostAssembly, preAssembly *components.TransactionPreAssembly, recipient string)) *MockTransportWriter_SendAssembleResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 *components.TransactionPostAssembly
		if args[3] != nil {
			arg3 = args[3].(*components.TransactionPostAssembly)
		}
		var arg4 *components.TransactionPreAssembly
		if args[4] != nil {
			arg4 = args[4].(*components.TransactionPreAssembly)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockTransportWriter_SendAssembleResponse_Call) Return(err error) *MockTransportWriter_SendAssembleResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransportWriter_SendAssembleResponse_Call) RunAndReturn(run func(ctx context.Context, txID uuid.UUID, assembleRequestId uuid.UUID, postAssembly *components.TransactionPostAssembly, preAssembly *components.TransactionPreAssembly, recipient string) error) *MockTransportWriter_SendAssembleResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SendDelegationRequest provides a mock function for the type MockTransportWriter
func (_mock *MockTransportWriter) SendDelegationRequest(ctx context.Context, coordinatorLocator string, transactions []*components.PrivateTransaction, blockHeight uint64) error {
	ret := _mock.Called(ctx, coordinatorLocator, transactions, blockHeight)

	if len(ret) == 0 {
		panic("no return value specified for SendDelegationRequest")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []*components.PrivateTransaction, uint64) error); ok {
		r0 = returnFunc(ctx, coordinatorLocator, transactions, blockHeight)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransportWriter_SendDelegationRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendDelegationRequest'
type MockTransportWriter_SendDelegationRequest_Call struct {
	*mock.Call
}

// SendDelegationRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - coordinatorLocator string
//   - transactions []*components.PrivateTransaction
//   - blockHeight uint64
func (_e *MockTransportWriter_Expecter) SendDelegationRequest(ctx interface{}, coordinatorLocator interface{}, transactions interface{}, blockHeight interface{}) *MockTransportWriter_SendDelegationRequest_Call {
	return &MockTransportWriter_SendDelegationRequest_Call{Call: _e.mock.On("SendDelegationRequest", ctx, coordinatorLocator, transactions, blockHeight)}
}

func (_c *MockTransportWriter_SendDelegationRequest_Call) Run(run func(ctx context.Context, coordinatorLocator string, transactions []*components.PrivateTransaction, blockHeight uint64)) *MockTransportWriter_SendDelegationRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []*components.PrivateTransaction
		if args[2] != nil {
			arg2 = args[2].([]*components.PrivateTransaction)
		}
		var arg3 uint64
		if args[3] != nil {
			arg3 = args[3].(uint64)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTransportWriter_SendDelegationRequest_Call) Return(err error) *MockTransportWriter_SendDelegationRequest_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransportWriter_SendDelegationRequest_Call) RunAndReturn(run func(ctx context.Context, coordinatorLocator string, transactions []*components.PrivateTransaction, blockHeight uint64) error) *MockTransportWriter_SendDelegationRequest_Call {
	_c.Call.Return(run)
	return _c
}

// SendDelegationRequestAcknowledgment provides a mock function for the type MockTransportWriter
func (_mock *MockTransportWriter) SendDelegationRequestAcknowledgment(ctx context.Context, delegatingNodeName string, delegationId string, delegateNodeName string, transactionID string) error {
	ret := _mock.Called(ctx, delegatingNodeName, delegationId, delegateNodeName, transactionID)

	if len(ret) == 0 {
		panic("no return value specified for SendDelegationRequestAcknowledgment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = returnFunc(ctx, delegatingNodeName, delegationId, delegateNodeName, transactionID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransportWriter_SendDelegationRequestAcknowledgment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendDelegationRequestAcknowledgment'
type MockTransportWriter_SendDelegationRequestAcknowledgment_Call struct {
	*mock.Call
}

// SendDelegationRequestAcknowledgment is a helper method to define mock.On call
//   - ctx context.Context
//   - delegatingNodeName string
//   - delegationId string
//   - delegateNodeName string
//   - transactionID string
func (_e *MockTransportWriter_Expecter) SendDelegationRequestAcknowledgment(ctx interface{}, delegatingNodeName interface{}, delegationId interface{}, delegateNodeName interface{}, transactionID interface{}) *MockTransportWriter_SendDelegationRequestAcknowledgment_Call {
	return &MockTransportWriter_SendDelegationRequestAcknowledgment_Call{Call: _e.mock.On("SendDelegationRequestAcknowledgment", ctx, delegatingNodeName, delegationId, delegateNodeName, transactionID)}
}

func (_c *MockTransportWriter_SendDelegationRequestAcknowledgment_Call) Run(run func(ctx context.Context, delegatingNodeName string, delegationId string, delegateNodeName string, transactionID string)) *MockTransportWriter_SendDelegationRequestAcknowledgment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockTransportWriter_SendDelegationRequestAcknowledgment_Call) Return(err error) *MockTransportWriter_SendDelegationRequestAcknowledgment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransportWriter_SendDelegationRequestAcknowledgment_Call) RunAndReturn(run func(ctx context.Context, delegatingNodeName string, delegationId string, delegateNodeName string, transactionID string) error) *MockTransportWriter_SendDelegationRequestAcknowledgment_Call {
	_c.Call.Return(run)
	return _c
}

// SendDispatched provides a mock function for the type MockTransportWriter
func (_mock *MockTransportWriter) SendDispatched(ctx context.Context, transactionOriginator string, idempotencyKey uuid.UUID, transactionSpecification *prototk.TransactionSpecification) error {
	ret := _mock.Called(ctx, transactionOriginator, idempotencyKey, transactionSpecification)

	if len(ret) == 0 {
		panic("no return value specified for SendDispatched")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, *prototk.TransactionSpecification) error); ok {
		r0 = returnFunc(ctx, transactionOriginator, idempotencyKey, transactionSpecification)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransportWriter_SendDispatched_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendDispatched'
type MockTransportWriter_SendDispatched_Call struct {
	*mock.Call
}

// SendDispatched is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionOriginator string
//   - idempotencyKey uuid.UUID
//   - transactionSpecification *prototk.TransactionSpecification
func (_e *MockTransportWriter_Expecter) SendDispatched(ctx interface{}, transactionOriginator interface{}, idempotencyKey interface{}, transactionSpecification interface{}) *MockTransportWriter_SendDispatched_Call {
	return &MockTransportWriter_SendDispatched_Call{Call: _e.mock.On("SendDispatched", ctx, transactionOriginator, idempotencyKey, transactionSpecification)}
}

func (_c *MockTransportWriter_SendDispatched_Call) Run(run func(ctx context.Context, transactionOriginator string, idempotencyKey uuid.UUID, transactionSpecification *prototk.TransactionSpecification)) *MockTransportWriter_SendDispatched_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 *prototk.TransactionSpecification
		if args[3] != nil {
			arg3 = args[3].(*prototk.TransactionSpecification)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTransportWriter_SendDispatched_Call) Return(err error) *MockTransportWriter_SendDispatched_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransportWriter_SendDispatched_Call) RunAndReturn(run func(ctx context.Context, transactionOriginator string, idempotencyKey uuid.UUID, transactionSpecification *prototk.TransactionSpecification) error) *MockTransportWriter_SendDispatched_Call {
	_c.Call.Return(run)
	return _c
}

// SendEndorsementRequest provides a mock function for the type MockTransportWriter
func (_mock *MockTransportWriter) SendEndorsementRequest(ctx context.Context, txID uuid.UUID, idempotencyKey uuid.UUID, party string, attRequest *prototk.AttestationRequest, transactionSpecification *prototk.TransactionSpecification, verifiers []*prototk.ResolvedVerifier, signatures []*prototk.AttestationResult, inputStates []*prototk.EndorsableState, readStates []*prototk.EndorsableState, outputStates []*prototk.EndorsableState, infoStates []*prototk.EndorsableState) error {
	ret := _mock.Called(ctx, txID, idempotencyKey, party, attRequest, transactionSpecification, verifiers, signatures, inputStates, readStates, outputStates, infoStates)

	if len(ret) == 0 {
		panic("no return value specified for SendEndorsementRequest")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string, *prototk.AttestationRequest, *prototk.TransactionSpecification, []*prototk.ResolvedVerifier, []*prototk.AttestationResult, []*prototk.EndorsableState, []*prototk.EndorsableState, []*prototk.EndorsableState, []*prototk.EndorsableState) error); ok {
		r0 = returnFunc(ctx, txID, idempotencyKey, party, attRequest, transactionSpecification, verifiers, signatures, inputStates, readStates, outputStates, infoStates)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransportWriter_SendEndorsementRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEndorsementRequest'
type MockTransportWriter_SendEndorsementRequest_Call struct {
	*mock.Call
}

// SendEndorsementRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - txID uuid.UUID
//   - idempotencyKey uuid.UUID
//   - party string
//   - attRequest *prototk.AttestationRequest
//   - transactionSpecification *prototk.TransactionSpecification
//   - verifiers []*prototk.ResolvedVerifier
//   - signatures []*prototk.AttestationResult
//   - inputStates []*prototk.EndorsableState
//   - readStates []*prototk.EndorsableState
//   - outputStates []*prototk.EndorsableState
//   - infoStates []*prototk.EndorsableState
func (_e *MockTransportWriter_Expecter) SendEndorsementRequest(ctx interface{}, txID interface{}, idempotencyKey interface{}, party interface{}, attRequest interface{}, transactionSpecification interface{}, verifiers interface{}, signatures interface{}, inputStates interface{}, readStates interface{}, outputStates interface{}, infoStates interface{}) *MockTransportWriter_SendEndorsementRequest_Call {
	return &MockTransportWriter_SendEndorsementRequest_Call{Call: _e.mock.On("SendEndorsementRequest", ctx, txID, idempotencyKey, party, attRequest, transactionSpecification, verifiers, signatures, inputStates, readStates, outputStates, infoStates)}
}

func (_c *MockTransportWriter_SendEndorsementRequest_Call) Run(run func(ctx context.Context, txID uuid.UUID, idempotencyKey uuid.UUID, party string, attRequest *prototk.AttestationRequest, transactionSpecification *prototk.TransactionSpecification, verifiers []*prototk.ResolvedVerifier, signatures []*prototk.AttestationResult, inputStates []*prototk.EndorsableState, readStates []*prototk.EndorsableState, outputStates []*prototk.EndorsableState, infoStates []*prototk.EndorsableState)) *MockTransportWriter_SendEndorsementRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 *prototk.AttestationRequest
		if args[4] != nil {
			arg4 = args[4].(*prototk.AttestationRequest)
		}
		var arg5 *prototk.TransactionSpecification
		if args[5] != nil {
			arg5 = args[5].(*prototk.TransactionSpecification)
		}
		var arg6 []*prototk.ResolvedVerifier
		if args[6] != nil {
			arg6 = args[6].([]*prototk.ResolvedVerifier)
		}
		var arg7 []*prototk.AttestationResult
		if args[7] != nil {
			arg7 = args[7].([]*prototk.AttestationResult)
		}
		var arg8 []*prototk.EndorsableState
		if args[8] != nil {
			arg8 = args[8].([]*prototk.EndorsableState)
		}
		var arg9 []*prototk.EndorsableState
		if args[9] != nil {
			arg9 = args[9].([]*prototk.EndorsableState)
		}
		var arg10 []*prototk.EndorsableState
		if args[10] != nil {
			arg10 = args[10].([]*prototk.EndorsableState)
		}
		var arg11 []*prototk.EndorsableState
		if args[11] != nil {
			arg11 = args[11].([]*prototk.EndorsableState)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7,
			arg8,
			arg9,
			arg10,
			arg11,
		)
	})
	return _c
}

func (_c *MockTransportWriter_SendEndorsementRequest_Call) Return(err error) *MockTransportWriter_SendEndorsementRequest_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransportWriter_SendEndorsementRequest_Call) RunAndReturn(run func(ctx context.Context, txID uuid.UUID, idempotencyKey uuid.UUID, party string, attRequest *prototk.AttestationRequest, transactionSpecification *prototk.TransactionSpecification, verifiers []*prototk.ResolvedVerifier, signatures []*prototk.AttestationResult, inputStates []*prototk.EndorsableState, readStates []*prototk.EndorsableState, outputStates []*prototk.EndorsableState, infoStates []*prototk.EndorsableState) error) *MockTransportWriter_SendEndorsementRequest_Call {
	_c.Call.Return(run)
	return _c
}

// SendEndorsementResponse provides a mock function for the type MockTransportWriter
func (_mock *MockTransportWriter) SendEndorsementResponse(ctx context.Context, transactionId string, idempotencyKey string, contractAddress string, attResult *prototk.AttestationResult, endorsementResult *components.EndorsementResult, revertReason string, endorsementName string, party string, node string) error {
	ret := _mock.Called(ctx, transactionId, idempotencyKey, contractAddress, attResult, endorsementResult, revertReason, endorsementName, party, node)

	if len(ret) == 0 {
		panic("no return value specified for SendEndorsementResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, *prototk.AttestationResult, *components.EndorsementResult, string, string, string, string) error); ok {
		r0 = returnFunc(ctx, transactionId, idempotencyKey, contractAddress, attResult, endorsementResult, revertReason, endorsementName, party, node)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransportWriter_SendEndorsementResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEndorsementResponse'
type MockTransportWriter_SendEndorsementResponse_Call struct {
	*mock.Call
}

// SendEndorsementResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionId string
//   - idempotencyKey string
//   - contractAddress string
//   - attResult *prototk.AttestationResult
//   - endorsementResult *components.EndorsementResult
//   - revertReason string
//   - endorsementName string
//   - party string
//   - node string
func (_e *MockTransportWriter_Expecter) SendEndorsementResponse(ctx interface{}, transactionId interface{}, idempotencyKey interface{}, contractAddress interface{}, attResult interface{}, endorsementResult interface{}, revertReason interface{}, endorsementName interface{}, party interface{}, node interface{}) *MockTransportWriter_SendEndorsementResponse_Call {
	return &MockTransportWriter_SendEndorsementResponse_Call{Call: _e.mock.On("SendEndorsementResponse", ctx, transactionId, idempotencyKey, contractAddress, attResult, endorsementResult, revertReason, endorsementName, party, node)}
}

func (_c *MockTransportWriter_SendEndorsementResponse_Call) Run(run func(ctx context.Context, transactionId string, idempotencyKey string, contractAddress string, attResult *prototk.AttestationResult, endorsementResult *components.EndorsementResult, revertReason string, endorsementName string, party string, node string)) *MockTransportWriter_SendEndorsementResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 *prototk.AttestationResult
		if args[4] != nil {
			arg4 = args[4].(*prototk.AttestationResult)
		}
		var arg5 *components.EndorsementResult
		if args[5] != nil {
			arg5 = args[5].(*components.EndorsementResult)
		}
		var arg6 string
		if args[6] != nil {
			arg6 = args[6].(string)
		}
		var arg7 string
		if args[7] != nil {
			arg7 = args[7].(string)
		}
		var arg8 string
		if args[8] != nil {
			arg8 = args[8].(string)
		}
		var arg9 string
		if args[9] != nil {
			arg9 = args[9].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7,
			arg8,
			arg9,
		)
	})
	return _c
}

func (_c *MockTransportWriter_SendEndorsementResponse_Call) Return(err error) *MockTransportWriter_SendEndorsementResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransportWriter_SendEndorsementResponse_Call) RunAndReturn(run func(ctx context.Context, transactionId string, idempotencyKey string, contractAddress string, attResult *prototk.AttestationResult, endorsementResult *components.EndorsementResult, revertReason string, endorsementName string, party string, node string) error) *MockTransportWriter_SendEndorsementResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SendHandoverRequest provides a mock function for the type MockTransportWriter
func (_mock *MockTransportWriter) SendHandoverRequest(ctx context.Context, activeCoordinator string, contractAddress *pldtypes.EthAddress) error {
	ret := _mock.Called(ctx, activeCoordinator, contractAddress)

	if len(ret) == 0 {
		panic("no return value specified for SendHandoverRequest")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *pldtypes.EthAddress) error); ok {
		r0 = returnFunc(ctx, activeCoordinator, contractAddress)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransportWriter_SendHandoverRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendHandoverRequest'
type MockTransportWriter_SendHandoverRequest_Call struct {
	*mock.Call
}

// SendHandoverRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - activeCoordinator string
//   - contractAddress *pldtypes.EthAddress
func (_e *MockTransportWriter_Expecter) SendHandoverRequest(ctx interface{}, activeCoordinator interface{}, contractAddress interface{}) *MockTransportWriter_SendHandoverRequest_Call {
	return &MockTransportWriter_SendHandoverRequest_Call{Call: _e.mock.On("SendHandoverRequest", ctx, activeCoordinator, contractAddress)}
}

func (_c *MockTransportWriter_SendHandoverRequest_Call) Run(run func(ctx context.Context, activeCoordinator string, contractAddress *pldtypes.EthAddress)) *MockTransportWriter_SendHandoverRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *pldtypes.EthAddress
		if args[2] != nil {
			arg2 = args[2].(*pldtypes.EthAddress)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTransportWriter_SendHandoverRequest_Call) Return(err error) *MockTransportWriter_SendHandoverRequest_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransportWriter_SendHandoverRequest_Call) RunAndReturn(run func(ctx context.Context, activeCoordinator string, contractAddress *pldtypes.EthAddress) error) *MockTransportWriter_SendHandoverRequest_Call {
	_c.Call.Return(run)
	return _c
}

// SendHeartbeat provides a mock function for the type MockTransportWriter
func (_mock *MockTransportWriter) SendHeartbeat(ctx context.Context, targetNode string, contractAddress *pldtypes.EthAddress, coordinatorSnapshot *common.CoordinatorSnapshot) error {
	ret := _mock.Called(ctx, targetNode, contractAddress, coordinatorSnapshot)

	if len(ret) == 0 {
		panic("no return value specified for SendHeartbeat")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *pldtypes.EthAddress, *common.CoordinatorSnapshot) error); ok {
		r0 = returnFunc(ctx, targetNode, contractAddress, coordinatorSnapshot)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransportWriter_SendHeartbeat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendHeartbeat'
type MockTransportWriter_SendHeartbeat_Call struct {
	*mock.Call
}

// SendHeartbeat is a helper method to define mock.On call
//   - ctx context.Context
//   - targetNode string
//   - contractAddress *pldtypes.EthAddress
//   - coordinatorSnapshot *common.CoordinatorSnapshot
func (_e *MockTransportWriter_Expecter) SendHeartbeat(ctx interface{}, targetNode interface{}, contractAddress interface{}, coordinatorSnapshot interface{}) *MockTransportWriter_SendHeartbeat_Call {
	return &MockTransportWriter_SendHeartbeat_Call{Call: _e.mock.On("SendHeartbeat", ctx, targetNode, contractAddress, coordinatorSnapshot)}
}

func (_c *MockTransportWriter_SendHeartbeat_Call) Run(run func(ctx context.Context, targetNode string, contractAddress *pldtypes.EthAddress, coordinatorSnapshot *common.CoordinatorSnapshot)) *MockTransportWriter_SendHeartbeat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *pldtypes.EthAddress
		if args[2] != nil {
			arg2 = args[2].(*pldtypes.EthAddress)
		}
		var arg3 *common.CoordinatorSnapshot
		if args[3] != nil {
			arg3 = args[3].(*common.CoordinatorSnapshot)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTransportWriter_SendHeartbeat_Call) Return(err error) *MockTransportWriter_SendHeartbeat_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransportWriter_SendHeartbeat_Call) RunAndReturn(run func(ctx context.Context, targetNode string, contractAddress *pldtypes.EthAddress, coordinatorSnapshot *common.CoordinatorSnapshot) error) *MockTransportWriter_SendHeartbeat_Call {
	_c.Call.Return(run)
	return _c
}

// SendNonceAssigned provides a mock function for the type MockTransportWriter
func (_mock *MockTransportWriter) SendNonceAssigned(ctx context.Context, txID uuid.UUID, originatorNode string, contractAddress *pldtypes.EthAddress, nonce uint64) error {
	ret := _mock.Called(ctx, txID, originatorNode, contractAddress, nonce)

	if len(ret) == 0 {
		panic("no return value specified for SendNonceAssigned")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, *pldtypes.EthAddress, uint64) error); ok {
		r0 = returnFunc(ctx, txID, originatorNode, contractAddress, nonce)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransportWriter_SendNonceAssigned_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendNonceAssigned'
type MockTransportWriter_SendNonceAssigned_Call struct {
	*mock.Call
}

// SendNonceAssigned is a helper method to define mock.On call
//   - ctx context.Context
//   - txID uuid.UUID
//   - originatorNode string
//   - contractAddress *pldtypes.EthAddress
//   - nonce uint64
func (_e *MockTransportWriter_Expecter) SendNonceAssigned(ctx interface{}, txID interface{}, originatorNode interface{}, contractAddress interface{}, nonce interface{}) *MockTransportWriter_SendNonceAssigned_Call {
	return &MockTransportWriter_SendNonceAssigned_Call{Call: _e.mock.On("SendNonceAssigned", ctx, txID, originatorNode, contractAddress, nonce)}
}

func (_c *MockTransportWriter_SendNonceAssigned_Call) Run(run func(ctx context.Context, txID uuid.UUID, originatorNode string, contractAddress *pldtypes.EthAddress, nonce uint64)) *MockTransportWriter_SendNonceAssigned_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *pldtypes.EthAddress
		if args[3] != nil {
			arg3 = args[3].(*pldtypes.EthAddress)
		}
		var arg4 uint64
		if args[4] != nil {
			arg4 = args[4].(uint64)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockTransportWriter_SendNonceAssigned_Call) Return(err error) *MockTransportWriter_SendNonceAssigned_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransportWriter_SendNonceAssigned_Call) RunAndReturn(run func(ctx context.Context, txID uuid.UUID, originatorNode string, contractAddress *pldtypes.EthAddress, nonce uint64) error) *MockTransportWriter_SendNonceAssigned_Call {
	_c.Call.Return(run)
	return _c
}

// SendPreDispatchRequest provides a mock function for the type MockTransportWriter
func (_mock *MockTransportWriter) SendPreDispatchRequest(ctx context.Context, originatorNode string, idempotencyKey uuid.UUID, transactionSpecification *prototk.TransactionSpecification, hash *pldtypes.Bytes32) error {
	ret := _mock.Called(ctx, originatorNode, idempotencyKey, transactionSpecification, hash)

	if len(ret) == 0 {
		panic("no return value specified for SendPreDispatchRequest")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, *prototk.TransactionSpecification, *pldtypes.Bytes32) error); ok {
		r0 = returnFunc(ctx, originatorNode, idempotencyKey, transactionSpecification, hash)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransportWriter_SendPreDispatchRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPreDispatchRequest'
type MockTransportWriter_SendPreDispatchRequest_Call struct {
	*mock.Call
}

// SendPreDispatchRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - originatorNode string
//   - idempotencyKey uuid.UUID
//   - transactionSpecification *prototk.TransactionSpecification
//   - hash *pldtypes.Bytes32
func (_e *MockTransportWriter_Expecter) SendPreDispatchRequest(ctx interface{}, originatorNode interface{}, idempotencyKey interface{}, transactionSpecification interface{}, hash interface{}) *MockTransportWriter_SendPreDispatchRequest_Call {
	return &MockTransportWriter_SendPreDispatchRequest_Call{Call: _e.mock.On("SendPreDispatchRequest", ctx, originatorNode, idempotencyKey, transactionSpecification, hash)}
}

func (_c *MockTransportWriter_SendPreDispatchRequest_Call) Run(run func(ctx context.Context, originatorNode string, idempotencyKey uuid.UUID, transactionSpecification *prototk.TransactionSpecification, hash *pldtypes.Bytes32)) *MockTransportWriter_SendPreDispatchRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 *prototk.TransactionSpecification
		if args[3] != nil {
			arg3 = args[3].(*prototk.TransactionSpecification)
		}
		var arg4 *pldtypes.Bytes32
		if args[4] != nil {
			arg4 = args[4].(*pldtypes.Bytes32)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockTransportWriter_SendPreDispatchRequest_Call) Return(err error) *MockTransportWriter_SendPreDispatchRequest_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransportWriter_SendPreDispatchRequest_Call) RunAndReturn(run func(ctx context.Context, originatorNode string, idempotencyKey uuid.UUID, transactionSpecification *prototk.TransactionSpecification, hash *pldtypes.Bytes32) error) *MockTransportWriter_SendPreDispatchRequest_Call {
	_c.Call.Return(run)
	return _c
}

// SendPreDispatchResponse provides a mock function for the type MockTransportWriter
func (_mock *MockTransportWriter) SendPreDispatchResponse(ctx context.Context, transactionOriginator string, idempotencyKey uuid.UUID, transactionSpecification *prototk.TransactionSpecification) error {
	ret := _mock.Called(ctx, transactionOriginator, idempotencyKey, transactionSpecification)

	if len(ret) == 0 {
		panic("no return value specified for SendPreDispatchResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, *prototk.TransactionSpecification) error); ok {
		r0 = returnFunc(ctx, transactionOriginator, idempotencyKey, transactionSpecification)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransportWriter_SendPreDispatchResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPreDispatchResponse'
type MockTransportWriter_SendPreDispatchResponse_Call struct {
	*mock.Call
}

// SendPreDispatchResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionOriginator string
//   - idempotencyKey uuid.UUID
//   - transactionSpecification *prototk.TransactionSpecification
func (_e *MockTransportWriter_Expecter) SendPreDispatchResponse(ctx interface{}, transactionOriginator interface{}, idempotencyKey interface{}, transactionSpecification interface{}) *MockTransportWriter_SendPreDispatchResponse_Call {
	return &MockTransportWriter_SendPreDispatchResponse_Call{Call: _e.mock.On("SendPreDispatchResponse", ctx, transactionOriginator, idempotencyKey, transactionSpecification)}
}

func (_c *MockTransportWriter_SendPreDispatchResponse_Call) Run(run func(ctx context.Context, transactionOriginator string, idempotencyKey uuid.UUID, transactionSpecification *prototk.TransactionSpecification)) *MockTransportWriter_SendPreDispatchResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 *prototk.TransactionSpecification
		if args[3] != nil {
			arg3 = args[3].(*prototk.TransactionSpecification)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTransportWriter_SendPreDispatchResponse_Call) Return(err error) *MockTransportWriter_SendPreDispatchResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransportWriter_SendPreDispatchResponse_Call) RunAndReturn(run func(ctx context.Context, transactionOriginator string, idempotencyKey uuid.UUID, transactionSpecification *prototk.TransactionSpecification) error) *MockTransportWriter_SendPreDispatchResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SendTransactionConfirmed provides a mock function for the type MockTransportWriter
func (_mock *MockTransportWriter) SendTransactionConfirmed(ctx context.Context, txID uuid.UUID, originatorNode string, contractAddress *pldtypes.EthAddress, nonce *pldtypes.HexUint64, revertReason pldtypes.HexBytes) error {
	ret := _mock.Called(ctx, txID, originatorNode, contractAddress, nonce, revertReason)

	if len(ret) == 0 {
		panic("no return value specified for SendTransactionConfirmed")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, *pldtypes.EthAddress, *pldtypes.HexUint64, pldtypes.HexBytes) error); ok {
		r0 = returnFunc(ctx, txID, originatorNode, contractAddress, nonce, revertReason)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransportWriter_SendTransactionConfirmed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTransactionConfirmed'
type MockTransportWriter_SendTransactionConfirmed_Call struct {
	*mock.Call
}

// SendTransactionConfirmed is a helper method to define mock.On call
//   - ctx context.Context
//   - txID uuid.UUID
//   - originatorNode string
//   - contractAddress *pldtypes.EthAddress
//   - nonce *pldtypes.HexUint64
//   - revertReason pldtypes.HexBytes
func (_e *MockTransportWriter_Expecter) SendTransactionConfirmed(ctx interface{}, txID interface{}, originatorNode interface{}, contractAddress interface{}, nonce interface{}, revertReason interface{}) *MockTransportWriter_SendTransactionConfirmed_Call {
	return &MockTransportWriter_SendTransactionConfirmed_Call{Call: _e.mock.On("SendTransactionConfirmed", ctx, txID, originatorNode, contractAddress, nonce, revertReason)}
}

func (_c *MockTransportWriter_SendTransactionConfirmed_Call) Run(run func(ctx context.Context, txID uuid.UUID, originatorNode string, contractAddress *pldtypes.EthAddress, nonce *pldtypes.HexUint64, revertReason pldtypes.HexBytes)) *MockTransportWriter_SendTransactionConfirmed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *pldtypes.EthAddress
		if args[3] != nil {
			arg3 = args[3].(*pldtypes.EthAddress)
		}
		var arg4 *pldtypes.HexUint64
		if args[4] != nil {
			arg4 = args[4].(*pldtypes.HexUint64)
		}
		var arg5 pldtypes.HexBytes
		if args[5] != nil {
			arg5 = args[5].(pldtypes.HexBytes)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockTransportWriter_SendTransactionConfirmed_Call) Return(err error) *MockTransportWriter_SendTransactionConfirmed_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransportWriter_SendTransactionConfirmed_Call) RunAndReturn(run func(ctx context.Context, txID uuid.UUID, originatorNode string, contractAddress *pldtypes.EthAddress, nonce *pldtypes.HexUint64, revertReason pldtypes.HexBytes) error) *MockTransportWriter_SendTransactionConfirmed_Call {
	_c.Call.Return(run)
	return _c
}

// SendTransactionSubmitted provides a mock function for the type MockTransportWriter
func (_mock *MockTransportWriter) SendTransactionSubmitted(ctx context.Context, txID uuid.UUID, originatorNode string, contractAddress *pldtypes.EthAddress, txHash *pldtypes.Bytes32) error {
	ret := _mock.Called(ctx, txID, originatorNode, contractAddress, txHash)

	if len(ret) == 0 {
		panic("no return value specified for SendTransactionSubmitted")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, *pldtypes.EthAddress, *pldtypes.Bytes32) error); ok {
		r0 = returnFunc(ctx, txID, originatorNode, contractAddress, txHash)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransportWriter_SendTransactionSubmitted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTransactionSubmitted'
type MockTransportWriter_SendTransactionSubmitted_Call struct {
	*mock.Call
}

// SendTransactionSubmitted is a helper method to define mock.On call
//   - ctx context.Context
//   - txID uuid.UUID
//   - originatorNode string
//   - contractAddress *pldtypes.EthAddress
//   - txHash *pldtypes.Bytes32
func (_e *MockTransportWriter_Expecter) SendTransactionSubmitted(ctx interface{}, txID interface{}, originatorNode interface{}, contractAddress interface{}, txHash interface{}) *MockTransportWriter_SendTransactionSubmitted_Call {
	return &MockTransportWriter_SendTransactionSubmitted_Call{Call: _e.mock.On("SendTransactionSubmitted", ctx, txID, originatorNode, contractAddress, txHash)}
}

func (_c *MockTransportWriter_SendTransactionSubmitted_Call) Run(run func(ctx context.Context, txID uuid.UUID, originatorNode string, contractAddress *pldtypes.EthAddress, txHash *pldtypes.Bytes32)) *MockTransportWriter_SendTransactionSubmitted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *pldtypes.EthAddress
		if args[3] != nil {
			arg3 = args[3].(*pldtypes.EthAddress)
		}
		var arg4 *pldtypes.Bytes32
		if args[4] != nil {
			arg4 = args[4].(*pldtypes.Bytes32)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockTransportWriter_SendTransactionSubmitted_Call) Return(err error) *MockTransportWriter_SendTransactionSubmitted_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransportWriter_SendTransactionSubmitted_Call) RunAndReturn(run func(ctx context.Context, txID uuid.UUID, originatorNode string, contractAddress *pldtypes.EthAddress, txHash *pldtypes.Bytes32) error) *MockTransportWriter_SendTransactionSubmitted_Call {
	_c.Call.Return(run)
	return _c
}

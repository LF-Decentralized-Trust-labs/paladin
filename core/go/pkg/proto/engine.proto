/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

syntax = "proto3";

package io.kaleido.paladin.kata.engine;
option go_package = "pkg/proto/engine";
import "google/protobuf/any.proto";


message TransactionDispatched {
    string id = 1;
    string contract_address = 2;
    string transaction_id = 3;
}

message EndorsementRequest {
    // TODO we are using google.protobuf.Any here for a few fields that should be more specific
    // need to figure out the build magic to import these from toolkit protos
    google.protobuf.Any attestation_request = 1;
    string idempotency_key = 2;
    string transaction_id = 3;
    string contract_address = 4;
    string party = 5;
    google.protobuf.Any transaction_specification = 6;
    repeated google.protobuf.Any verifiers = 7;
    repeated google.protobuf.Any signatures = 8;
    repeated google.protobuf.Any inputStates = 9;
    repeated google.protobuf.Any readStates = 10;
    repeated google.protobuf.Any outputStates = 11;
    repeated google.protobuf.Any infoStates = 12;
}

message EndorsementResponse {
    string transaction_id = 1;
    string idempotency_key = 2;
    string contract_address = 3;
    optional google.protobuf.Any endorsement = 4;
    optional string revert_reason = 5;
    string party = 6;
    string attestation_request_name = 7;
}

message ResolveVerifierRequest {
    string lookup = 1;
    string algorithm = 2;
    string verifier_type = 3;
}

message ResolveVerifierResponse {
    string lookup = 1;
    string algorithm = 2;
    string verifier_type = 3;
    string verifier = 4;
}

message ResolveVerifierError {
    string lookup = 1;
    string algorithm = 2;
    string verifier_type = 3;
    string error_message = 4;
}

message DelegationRequest {
    string transaction_id = 1;
    string delegate_node_id = 2;
    string delegation_id = 3; //this is used to correlate the acknowledgement back to the delegation. unlike the transport message id / correlation id, this is not unique across retries
    bytes private_transaction = 4; //json serialized copy of the in-memory private transaction object
    int64 block_height = 5; // the block height upon which this delegation was calculated (the highest delegation wins when crossing in the post)
    
    
    // TODO we are using google.protobuf.Any here for TransactionSpecification which is defined in toolkit protos
    // need to figure out the build magic to import these from toolkit protos
    //google.protobuf.Any transaction_specification = 4; // serialized io.kaleido.paladin.toolkit.TransactionSpecification
    //optional google.protobuf.Any assembled_transaction = 5; // serialized io.kaleido.paladin.toolkit.AssembledTransaction
    //repeated google.protobuf.Any attestation_plan = 6; // serialized io.kaleido.paladin.toolkit.AttestationRequest
    //repeated google.protobuf.Any verifiers = 7; // serialized io.kaleido.paladin.toolkit.ResolvedVerifier
}

message DelegationRequestAcknowledgment {
    string transaction_id = 1;
    string delegate_node_id = 2;
    string delegation_id = 3;//this is used to correlate the acknowledgement back to the delegation. unlike the transport message id / correlation id, this is not unique across retries
    string contract_address = 4;
}

message StateAcknowledgedEvent {
    string state_id = 1;
    string state_data_json = 2;
    string party = 3;
    string domain_name = 4;
	string contract_address = 5;
	string schema_id = 6 ;
    string distribution_id = 7; //this is used to correlate the acknowledgement back to the distribution. unlike the transport message id / correlation id, this is not unique across retries
}

message PreparedTransactionMessage {
    string prepared_txn_id = 1;
    bytes  prepared_transaction_json = 2;
    string party = 3;
    string domain_name = 4;
	string contract_address = 5;
    string distribution_id = 6; //this is used to correlate the acknowledgement back to the distribution. unlike the transport message id / correlation id, this is not unique across retries
}

message PreparedTransactionAcknowledgedMessage {
    string prepared_txn_id = 1;
    string party = 2;
    string domain_name = 3;
	string contract_address = 4;
    string distribution_id = 5; //this is used to correlate the acknowledgement back to the distribution. unlike the transport message id / correlation id, this is not unique across retries
}

message AssembleRequest {
    string transaction_id = 1;
    string assemble_request_id = 2;
    string contract_address = 3;
    bytes pre_assembly = 5;
    bytes state_locks = 6;
    int64 block_height = 7;
}

message AssembleResponse {
    string transaction_id = 1;
    string assemble_request_id = 2;
    string contract_address = 3;
    bytes post_assembly = 4;
}

message AssembleError {
    string transaction_id = 1;
    string assemble_request_id = 2;
    string contract_address = 3;
    string error_message = 4;
}

message CoordinatorHeartbeatNotification {
    string from = 1;
    string contract_address = 2; // Represent as hex address?
    bytes coordinator_snapshot = 3;
}

message HandoverRequest {
    string contract_address = 1; // Represent as hex address?
}
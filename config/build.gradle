/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

ext {
    goFiles = fileTree(".") {
        include "internal/**/*.go"
        include "pkg/**/*.go"
    }
}

configurations {
    // Consumable configurations - used by core and operator
    goSource {
        canBeConsumed = true
        canBeResolved = false
    }
    toolkitGo {
        canBeConsumed = false
        canBeResolved = true
    }
    coreGo {
        canBeConsumed = false
        canBeResolved = true
    }
}

dependencies {
    // Config should not have any dependencies outside of public go dependencies
    // It is a pure go set of code that can be shared between the operator and core.
}

task goUnitTest(type: GoTestRunner, dependsOn: ":core:go:makeMocks") {
    addTestArgs("./internal/...", "./pkg/...")
    def relativePath = project.path.replace(":", "_").replaceAll("^_","").replace("/", "_")
    def prefix = "${relativePath}.unit_test"
    resultsOutputFile = project.helpers.generateResultsFileName(name, prefix)
}

task test(dependsOn: goUnitTest) {
    mustRunAfter goUnitTest
}

task build {
    dependsOn test
}

task clean(type: Delete) {
    delete 'coverage'
    delete 'results'
}

dependencies {
    goSource files(goFiles)
}

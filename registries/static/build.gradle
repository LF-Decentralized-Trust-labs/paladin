/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

ext {
    goFiles = fileTree(".") {
        include "internal/**/*.go"
        include "pkg/**/*.go"
        include "main.go"
    }
}

configurations {
    // Resolvable configurations
    toolkitGo {
        canBeConsumed = false
        canBeResolved = true
    }
}

dependencies {
    toolkitGo project(path: ":toolkit:go", configuration: "goSource")
}

task installTools(type: Exec) {
    workingDir '.'
    environment('GOBIN', "${projectDir}/bin")
    executable 'go'
    args 'install'
    inputs.files('go.mod','go.sum')
    outputs.files(
        "bin/golangci-lint",
        "bin/mockery",
    )
    // We use go.mod for dependency version management
    // tools/tools.go tracks deps too - to avoid go mod tidy discarding them all
    args 'github.com/golangci/golangci-lint/cmd/golangci-lint'
    args 'github.com/vektra/mockery/v2'
}

task lint(type: Exec, dependsOn: installTools) {
    workingDir '.'

    helpers.lockResource(it, "lint.lock")
    inputs.files(configurations.toolkitGo)
    inputs.files(goFiles);
    environment 'GOGC', '20'

    executable "bin/golangci-lint"
    args 'run'
    args '-v'
    args '--color=always'
    args '--timeout', '5m'
}

task test(type: Exec) {
    inputs.files(configurations.toolkitGo)
    inputs.files(goFiles)
    outputs.dir('coverage')

    workingDir '.'
    executable 'go'
    args 'test'
    args './internal/...'
    args '-cover'
    args '-covermode=atomic'
    args '-timeout=30s'
    args "-test.gocoverdir=${projectDir}/coverage"

    dependsOn ':testinfra:startTestInfra'
}

task build {
    dependsOn lint
    dependsOn test
}

task clean(type: Delete) {
    delete 'coverage'
}

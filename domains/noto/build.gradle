/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

ext {
    goFiles = fileTree(".") {
        include "internal/**/*.go"
    }
}

configurations {
    // Resolvable configurations
    contractCompile {
        canBeConsumed = false
        canBeResolved = true
    }
    toolkitProtoCompiled {
        canBeConsumed = false
        canBeResolved = true
    }
    coreProtoCompiled {
        canBeConsumed = false
        canBeResolved = true
    }
}

dependencies {
    contractCompile project(path: ":solidity", configuration: "compiledContracts")
    toolkitProtoCompiled project(path: ":toolkit_go", configuration: "protoCompiled")
    coreProtoCompiled project(path: ":core:go", configuration: "protoCompiled")
}

task copySolidity(type: Copy) {
    inputs.files(configurations.contractCompile)
    from fileTree(configurations.contractCompile.asPath) {
        include 'contracts/noto/NotoFactory.sol/NotoFactory.json'
        include 'contracts/noto/Noto.sol/Noto.json'
        include 'contracts/noto/NotoSelfSubmitFactory.sol/NotoSelfSubmitFactory.json'
        include 'contracts/noto/NotoSelfSubmit.sol/NotoSelfSubmit.json'
    }
    into 'internal/noto/abis'

    // Flatten all paths into the destination folder
    eachFile { path = name }
    includeEmptyDirs = false
}

task test(type: Exec) {
    inputs.files(configurations.toolkitProtoCompiled)
    inputs.files(configurations.coreProtoCompiled)
    inputs.files(goFiles)
    outputs.dir('coverage')

    workingDir '.'
    executable 'go'
    args 'test'
    args './internal/...'
    args '-cover'
    args '-covermode=atomic'
    args '-timeout=30s'
    args "-test.gocoverdir=${projectDir}/coverage"

    dependsOn copySolidity
    dependsOn ':testinfra:startTestInfra'
    lockTestInfra(it)
    dumpLogsOnFailure(it, ':testinfra:startTestInfra')
}

task build {
    dependsOn test
}

task clean(type: Delete) {
    delete 'coverage'
    delete 'internal/noto/abis'
}

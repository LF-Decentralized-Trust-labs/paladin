/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

ext {
    testProcess = null
}

configurations {
    compiledContracts {
        canBeConsumed = false
    }
}

dependencies {
    compiledContracts project(path: ":solidity", configuration: "compiledContracts")
}

task copySolidity(type: Copy) {
    inputs.files(configurations.compiledContracts)
    from fileTree(configurations.compiledContracts.asPath) {
        include 'contracts/noto/NotoFactory.sol/NotoFactory.json'
    }
    into 'internal/noto/abis'

    // Flatten all paths into the destination folder
    eachFile { path = name }
    includeEmptyDirs = false
}

task startTestbed {
    doFirst {
        project.ext.testProcess = new ProcessBuilder()
            .directory(project(':kata').projectDir)
            .command("go", "run", "./testbed", "${projectDir}/testbed.config.yaml")
            .start()
    }
}

task stopTestbed {
    doFirst {
        project.ext.testProcess.destroy()
    }
}

task test(type: Exec) {
    executable 'go'
    args 'run'
    args 'main.go'

    dependsOn ':kata:build' // TODO: is there a better way?
    dependsOn copySolidity
    dependsOn startTestbed
    finalizedBy stopTestbed
}

task build(dependsOn: test) {}

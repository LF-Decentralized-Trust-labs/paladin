import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
    id 'java'
}

group = 'io.kaleido'

configurations {
    // Resolvable configurations
    toolkitProtoDefinitions {
        canBeConsumed = false
        canBeResolved = true
    }
    libcore {
        canBeConsumed = false
        canBeResolved = true
    }
    compiledContracts {
        canBeConsumed = false
        canBeResolved = true
    }
}

jar {
    dependsOn 'classes'  // Ensure the classes are compiled before creating the JAR
    dependsOn ':solidity:compile'

    if (project.hasProperty('jarVersion')) {
        archiveVersion = project.jarVersion
    } else {
        archiveVersion = ''
    }

    archiveBaseName = 'pente'  // Base name of the JAR, the version will be added to this

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    from(configurations.compiledContracts) {
        include 'contracts/domains/pente/PenteFactory.sol/PenteFactory.json'
        include 'contracts/domains/pente/PentePrivacyGroup.sol/PentePrivacyGroup.json'
        include 'contracts/domains/interfaces/IPente.sol/IPente.json'
        include 'contracts/private/interfaces/IPenteExternalCall.sol/IPenteExternalCall.json'
    }

    from sourceSets.main.output

    // Exclude signature files from dependencies
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

assemble.dependsOn jar

test {
    testLogging {
        showStandardStreams = true
        testLogging {
            events("passed", "skipped", "failed")
            showStackTraces = true
            exceptionFormat = TestExceptionFormat.FULL
        }
    }
    useJUnitPlatform()
    systemProperty "jna.library.path", [
        new File(project(":core:go").buildDir, "libs").absolutePath,
        new File(project(":toolkit:go").buildDir, "libs").absolutePath,
        new File(project(":domains:noto").buildDir, "libs").absolutePath
    ].join(File.pathSeparator)
    dependsOn ':testinfra:startTestInfra'
}

repositories {
    maven {
        url 'https://hyperledger.jfrog.io/hyperledger/besu-maven'
        content { includeGroupByRegex('org\\.hyperledger\\..*') }
    }
    maven {
        url 'https://artifacts.consensys.net/public/maven/maven/'
        content { includeGroupByRegex('tech\\.pegasys(\\..*)?') }
    }
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    mavenCentral()
}

def grpcVersion = '1.65+'
def protobufVersion = '3.25+'

dependencies {
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-services:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.17+'

    implementation 'io.netty:netty-all:4.1+'
    implementation 'org.apache.logging.log4j:log4j-core:2.23+'

    testImplementation project(path: ":core:java")
    testImplementation project(path: ":solidity", configuration: "compiledContracts")
    testImplementation project(path: ":core:go", configuration: "libcore")
    testImplementation project(path: ":domains:noto", configuration: "libnoto")

    testImplementation platform('org.junit:junit-bom:5.9+')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-core:5.12+'
    testImplementation 'org.slf4j:slf4j-reload4j:2.0+'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.17+'

    implementation 'org.hyperledger.besu:evm:24.5.4'
    implementation 'org.hyperledger.besu:besu-datatypes:24.5.4'
    implementation 'org.hyperledger.besu.internal:trie:24.5.4'

    implementation 'org.web3j:rlp:4+'
    implementation 'org.web3j:core:4+'

    implementation 'commons-io:commons-io:2.16.1'
    implementation 'io.tmio:tuweni-bytes:2.4.2'
    implementation 'io.tmio:tuweni-units:2.4.2'

    implementation project(path: ":toolkit_java")

    compiledContracts project(path: ":solidity", configuration: "compiledContracts")

}

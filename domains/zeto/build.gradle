/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import org.apache.tools.ant.taskdefs.condition.Os

ext {
    goFiles = fileTree(".") {
        include "internal/**/*.go"
        include "pkg/**/*.go"
    }
    goFilesE2E = fileTree(".") {
        include "integration-test/**/*.go"
    }
    zetoVersion = "v0.0.3"
    zkpOut = "${projectDir}/zkp"
    toolsOut = "${projectDir}/tools"
}

configurations {
    // Resolvable configurations
    contractCompile {
        canBeConsumed = false
        canBeResolved = true
    }
    toolkitGo {
        canBeConsumed = false
        canBeResolved = true
    }
    coreGo {
        canBeConsumed = false
        canBeResolved = true
    }
}

dependencies {
    contractCompile project(path: ":solidity", configuration: "compiledContracts")
    toolkitGo project(path: ":toolkit:go", configuration: "goSource")
    coreGo project(path: ":core:go", configuration: "goSource")
}

task downloadZetoProver {
    def outname = "zeto-wasm-${zetoVersion}.tar.gz"
    def url = "https://github.com/hyperledger-labs/zeto/releases/download/${zetoVersion}/${outname}"
    def f = new File(toolsOut, outname)
    doFirst {
        mkdir(f.parent)
        new URL(url).withInputStream{ i -> f.withOutputStream{ it << i }}
    }
    outputs.file(f)
}

task downloadZetoTestProvingKeys {
    def outname = "zeto-test-proving-keys-${zetoVersion}.tar.gz"
    def url = "https://github.com/hyperledger-labs/zeto/releases/download/${zetoVersion}/${outname}"
    def f = new File(toolsOut, outname)
    doFirst {
        mkdir(f.parent)
        new URL(url).withInputStream{ i -> f.withOutputStream{ it << i }}
    }
    outputs.file(f)
}

task downloadZetoCompiledContracts {
    def outname = "zeto-contracts-${zetoVersion}.tar.gz"
    def url = "https://github.com/hyperledger-labs/zeto/releases/download/${zetoVersion}/${outname}"
    def f = new File(toolsOut, outname)
    doFirst {
        mkdir(f.parent)
        new URL(url).withInputStream{ i -> f.withOutputStream{ it << i }}
    }
    outputs.file(f)
}

task extractZetoArtifacts(type: Copy, dependsOn: [downloadZetoProver, downloadZetoTestProvingKeys, downloadZetoCompiledContracts]) {
    from tarTree("${toolsOut}/zeto-wasm-${zetoVersion}.tar.gz")
    from tarTree("${toolsOut}/zeto-test-proving-keys-${zetoVersion}.tar.gz")
    from tarTree("${toolsOut}/zeto-contracts-${zetoVersion}.tar.gz")
    into zkpOut
}

task copySolidity(type: Copy, dependsOn: [":solidity:compile"]) {
    inputs.files(fileTree("${rootDir}/solidity/artifacts"))
    from fileTree("${rootDir}/solidity/artifacts") {
        include 'contracts/domains/zeto/ZetoFactory.sol/ZetoFactory.json'
    }
    into 'internal/zeto/abis'

    // Flatten all paths into the destination folder
    eachFile { path = name }
    includeEmptyDirs = false
}

task copySolidityForTest(type: Copy, dependsOn: [extractZetoArtifacts, ":solidity:compile"]) {
    inputs.files(fileTree("${zkpOut}/artifacts/contracts"))
    from fileTree("${rootDir}/solidity/artifacts") {
        include 'contracts/domains/zeto/ZetoFactory.sol/ZetoFactory.json'
    }
    from fileTree("${zkpOut}/artifacts/contracts") {
        include '**/*.json'
        exclude '**/*.dbg.json'
    }
    into 'integration-test/abis'

    // Flatten all paths into the destination folder
    eachFile { path = name }
    includeEmptyDirs = false
}

task testE2E(type: Exec) {
    inputs.files(configurations.toolkitGo)
    inputs.files(configurations.coreGo)
    inputs.files(goFiles)
    inputs.files(goFilesE2E)
    inputs.file('./integration-test/config-for-deploy.yaml')
    inputs.file('./integration-test/config-local.yaml')
    outputs.dir('coverage')

    workingDir '.'
    executable 'go'
    args 'test'
    args '-v'
    args './integration-test'
    args '-cover'
    args '-covermode=atomic'
    args '-timeout=300s'
    args "-test.gocoverdir=${projectDir}/coverage"

    dependsOn copySolidity
    dependsOn copySolidityForTest
    dependsOn ':testinfra:startTestInfra'
    helpers.dumpLogsOnFailure(it, ':testinfra:startTestInfra')
}

task test(type: Exec) {

    inputs.files(configurations.toolkitGo)
    inputs.files(configurations.coreGo)
    inputs.files(goFiles)
    outputs.dir('coverage')

    workingDir '.'
    executable 'go'
    args 'test'
    args '-v'
    args './internal/...'
    args './pkg/...'
    args '-cover'
    args '-covermode=atomic'
    args '-timeout=30s'
    args "-test.gocoverdir=${projectDir}/coverage"

    dependsOn copySolidity
    dependsOn ':testinfra:startTestInfra'
    helpers.dumpLogsOnFailure(it, ':testinfra:startTestInfra')
}

task build {
    dependsOn test
    dependsOn testE2E
}

task clean(type: Delete) {
    delete 'coverage'
    delete 'internal/zeto/abis'
    delete zkpOut
    delete toolsOut
}

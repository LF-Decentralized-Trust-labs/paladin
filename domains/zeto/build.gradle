/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import org.apache.tools.ant.taskdefs.condition.Os

ext {
    goFiles = fileTree(".") {
        include "internal/**/*.go"
        include "pkg/**/*.go"
    }
    zetoVersion = "v0.0.2"
    zkpOut = "${projectDir}/zkp"
    toolsOut = "${projectDir}/tools"
}

configurations {
    // Resolvable configurations
    contractCompile {
        canBeConsumed = false
        canBeResolved = true
    }
    toolkitProtoCompiled {
        canBeConsumed = false
        canBeResolved = true
    }
    coreProtoCompiled {
        canBeConsumed = false
        canBeResolved = true
    }
}

dependencies {
    contractCompile project(path: ":solidity", configuration: "compiledContracts")
    toolkitProtoCompiled project(path: ":toolkit:go", configuration: "protoCompiled")
    coreProtoCompiled project(path: ":core:go", configuration: "protoCompiled")
}

task copySolidity(type: Copy) {
    inputs.files(configurations.contractCompile)
    from fileTree(configurations.contractCompile.asPath) {
        include 'contracts/zeto/ZetoSample.sol/ZetoSample.json'
        include 'contracts/zeto/ZetoSampleFactory.sol/ZetoSampleFactory.json'
        include 'zeto/contracts/lib/common.sol/Commonlib.json'
        include 'zeto/contracts/lib/verifier_anon.sol/Groth16Verifier_Anon.json'
        include 'zeto/contracts/lib/verifier_check_hashes_value.sol/Groth16Verifier_CheckHashesValue.json'
        include 'zeto/contracts/lib/verifier_check_inputs_outputs_value.sol/Groth16Verifier_CheckInputsOutputsValue.json'
    }
    into 'internal/zeto/abis'

    // Flatten all paths into the destination folder
    eachFile { path = name }
    includeEmptyDirs = false
}

task downloadZetoProver {
    def outname = "zeto-wasm-${zetoVersion}.tar.gz"
    def url = "https://github.com/hyperledger-labs/zeto/releases/download/${zetoVersion}/${outname}"
    def f = new File(toolsOut, outname)
    doFirst {
        mkdir(f.parent)
        new URL(url).withInputStream{ i -> f.withOutputStream{ it << i }}
        f.setExecutable(true)
        mkdir(zkpOut)
    }
    outputs.file(f)
}

task downloadZetoTestProvingKeys {
    def outname = "zeto-test-proving-keys-${zetoVersion}.tar.gz"
    def url = "https://github.com/hyperledger-labs/zeto/releases/download/${zetoVersion}/${outname}"
    def f = new File(toolsOut, outname)
    doFirst {
        mkdir(f.parent)
        new URL(url).withInputStream{ i -> f.withOutputStream{ it << i }}
        f.setExecutable(true)
    }
    outputs.file(f)
}

task extractZetoProver(type: Exec, dependsOn: [downloadZetoProver]) {
    executable 'tar'
    args '-xzvf'
    args "${toolsOut}/zeto-wasm-${zetoVersion}.tar.gz"
    workingDir zkpOut

    environment "CIRCUITS_ROOT", zkpOut

    inputs.dir(workingDir)
    outputs.dir(zkpOut)
}

task extractZetoTestProvingKeys(type: Exec, dependsOn: [extractZetoProver, downloadZetoTestProvingKeys]) {
    executable 'tar'
    args '-xzvf'
    args "${toolsOut}/zeto-test-proving-keys-${zetoVersion}.tar.gz"
    workingDir zkpOut

    environment "PROVING_KEYS_ROOT", zkpOut

    inputs.dir(workingDir)
    outputs.dir(zkpOut)
}

task test(type: Exec) {
    inputs.files(configurations.toolkitProtoCompiled)
    inputs.files(configurations.coreProtoCompiled)
    inputs.files(goFiles)
    outputs.dir('coverage')

    workingDir '.'
    executable 'go'
    args 'test'
    args './internal/...'
    args './pkg/...'
    args '-cover'
    args '-covermode=atomic'
    args '-timeout=30s'
    args "-test.gocoverdir=${projectDir}/coverage"

    dependsOn copySolidity
    dependsOn extractZetoProver
    dependsOn extractZetoTestProvingKeys
    dependsOn ':testinfra:startTestInfra'
    lockTestInfra(it)
    dumpLogsOnFailure(it, ':testinfra:startTestInfra')
}

task build {
    dependsOn test
}

task clean(type: Delete) {
    delete 'coverage'
    delete 'internal/zeto/abis'
    delete zkpOut
    delete toolsOut
}

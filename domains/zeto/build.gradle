/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

ext {
    goFiles = fileTree(".") {
        include "internal/**/*.go"
    }
    jsCircuits = "${rootDir}/zeto/zkp/circuits"
    zkpOut = "${projectDir}/zkp"
}

configurations {
    // Resolvable configurations
    contractCompile {
        canBeConsumed = false
        canBeResolved = true
    }
    toolkitProtoCompiled {
        canBeConsumed = false
        canBeResolved = true
    }
    kataProtoCompiled {
        canBeConsumed = false
        canBeResolved = true
    }
}

dependencies {
    contractCompile project(path: ":solidity", configuration: "compiledContracts")
    toolkitProtoCompiled project(path: ":toolkit_go", configuration: "protoCompiled")
    kataProtoCompiled project(path: ":kata", configuration: "protoCompiled")
}

task copySolidity(type: Copy) {
    inputs.files(configurations.contractCompile)
    from fileTree(configurations.contractCompile.asPath) {
        include 'contracts/zeto/ZetoSample.sol/ZetoSample.json'
        include 'contracts/zeto/ZetoSampleFactory.sol/ZetoSampleFactory.json'
        include 'zeto/contracts/lib/common.sol/Commonlib.json'
        include 'zeto/contracts/lib/verifier_anon.sol/Groth16Verifier_Anon.json'
        include 'zeto/contracts/lib/verifier_check_hashes_value.sol/Groth16Verifier_CheckHashesValue.json'
        include 'zeto/contracts/lib/verifier_check_inputs_outputs_value.sol/Groth16Verifier_CheckInputsOutputsValue.json'
    }
    into 'internal/zeto/abis'

    // Flatten all paths into the destination folder
    eachFile { path = name }
    includeEmptyDirs = false
}

// TODO: should circuits logic move to a separate project?
task circuitsInstall(type: Exec) {
    executable 'npm'
    args 'install'
    workingDir "${rootDir}/zeto/zkp/circuits"

    inputs.files("package.json", "package-lock.json")
    outputs.files("package-lock.json")
    outputs.dir("node_modules")
}

task installCircom(type: Exec) {
    def url = "https://github.com/iden3/circom/releases/download/v2.1.9/circom-linux-amd64"
    def f = new File(File.getTempDirectory(), "circom")
    if (!f.exists()) {
        new URL(url).withInputStream{ i -> f.withOutputStream{ it << i }}
        f.setExecutable(true)
    }
    environment 'PATH', "${environment.PATH}:${f}"
}

task circuitsGen(type: Exec, dependsOn: [circuitsInstall, installCircom]) {
    executable 'npm'
    args 'run', 'gen'
    args '--', '-c', 'anon'
    workingDir "${rootDir}/zeto/zkp/circuits"

    environment "CIRCUITS_ROOT", zkpOut
    environment "PROVING_KEYS_ROOT", zkpOut
    environment "PTAU_DOWNLOAD_PATH", zkpOut
    doFirst {
        mkdir(zkpOut)
    }

    inputs.dir(workingDir)
    outputs.dir(zkpOut)
}

task test(type: Exec) {
    inputs.files(configurations.toolkitProtoCompiled)
    inputs.files(configurations.kataProtoCompiled)
    inputs.files(goFiles)
    outputs.dir('coverage')

    workingDir '.'
    executable 'go'
    args 'test'
    args './internal/...'
    args '-cover'
    args '-covermode=atomic'
    args '-timeout=30s'
    args "-test.gocoverdir=${projectDir}/coverage"

    dependsOn copySolidity
    dependsOn circuitsGen
    dependsOn ':testinfra:startTestInfra'
}

task build {
    dependsOn test
}

task clean(type: Delete) {
    delete 'coverage'
    delete 'internal/zeto/abis'
    delete zkpOut
}

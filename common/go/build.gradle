/*
 * Copyright Â© 2025 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import org.apache.tools.ant.taskdefs.condition.Os

ext {
    goFiles = fileTree(".") {
        include "pkg/**/*.go"
    }
    targetCoverage = 100
    maxCoverageBarGap = 1
}

configurations {
    // Consumable configurations
    goSource {
        canBeConsumed = true
        canBeResolved = false
    }
}


task clean(type: Delete, dependsOn: ':testinfra:stopTestInfra') {
    delete "${buildDir}"

    delete fileTree("bin") {
        exclude "README.md", ".gitignore"
    }
    delete 'coverage'
}

task goGet(type:Exec) {
    workingDir '.'

    inputs.files('go.mod')
    inputs.files(goFiles)
    outputs.files('go.sum')

    executable 'go'
    args 'get'
    args './pkg/...'
}

task lint(type: Exec, dependsOn:[":installGolangCILint"]) {
    workingDir '.'

    inputs.files(goFiles)
    environment 'GOGC', '20'
    environment 'GOLANGCI_LINT_CACHE', "${project.buildDir}/golangci-lint-cache"

    executable "golangci-lint"
    args 'run'
    args '-v'
    args '--color=always'
    args '--timeout', '5m'
    args '--allow-parallel-runners'
    
    // Run lint tasks sequentially to avoid conflicts
    mustRunAfter ':toolkit:go:lint'
}

task test(type: Exec, dependsOn: [goGet]) {
    inputs.files(getProject().goFiles)
    outputs.dir('coverage')

    workingDir '.'
    executable 'go'
    args 'test'
    args './pkg/...'
    args '-cover'
    args '-covermode=atomic'
    args '-timeout=30s'
    if (project.findProperty('verboseTests') == 'true') {
        args '-v'
    }
    args "-test.gocoverdir=${getProject().projectDir}/coverage"
}

task buildCoverageTxt(type: Exec, dependsOn: [
        lint,
        test,
    ]) {
    inputs.files(fileTree(project.mkdir('coverage')) {
        include "covcounters.*"
        include "covmeta.*"
    })
    outputs.files('coverage/coverage.txt')
    executable 'go'
    args 'tool', 'covdata', 'textfmt'
    args '-i', "${projectDir}/coverage"
    args '-o', "${projectDir}/coverage/coverage.txt"

}

task checkCoverage(type: GoCheckCoverage, dependsOn: [buildCoverageTxt]) {
    coverageFile('coverage/coverage.txt')
    target = targetCoverage
    maxGap = maxCoverageBarGap
}

task build {
    dependsOn lint
    dependsOn test
    dependsOn checkCoverage
}

dependencies {
    goSource files(goFiles)
}

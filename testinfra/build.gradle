/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.LineContains

class DockerCompose extends Exec {
    DockerCompose() {
        def String composeCommand
        def dockerComposeV2Check = "docker compose version".execute().text
        if (dockerComposeV2Check.contains("Docker Compose")){
            executable 'docker'
            args 'compose'
            composeCommand = 'docker compose'
        } else {
            executable 'docker-compose'
            composeCommand = 'docker-compose'
        }
        args '-f'
        args 'docker-compose-test.yml'

        ignoreExitValue true

        doLast {
            def ExecResult execResult = getExecutionResult().get();
            if(execResult.getExitValue() != 0) {
                println "${composeCommand} -f ${getProject().projectDir}/docker-compose-test.yml logs".execute().waitForProcessOutput(System.err,System.err)
                throw new Exception("Docker compose failed");
            }
        }

    }
}

task besuBootstrapTool(type: Exec) {
    executable "docker"
    args "build"
    args "-t", "paladin/besu_bootstrap"
    args "-f", "besu_bootstrap/Dockerfile"
    args "-q"
    args "."
}

task startTestInfra(type: DockerCompose, dependsOn: tasks.besuBootstrapTool) {
    args 'up', '-d'
}

task stopTestInfra(type: DockerCompose) {
    args 'down'
}

task removeBesuBootstrapTool(type: Exec, dependsOn: stopTestInfra) {
    executable "docker"
    args "rmi", "-f", "paladin/besu_bootstrap"
    
    ignoreExitValue = true
}

task clean(type: Delete, dependsOn: [tasks.removeBesuBootstrapTool, tasks.stopTestInfra]) {
    
}


// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ProviderBinding is an autogenerated mock type for the ProviderBinding type
type ProviderBinding struct {
	mock.Mock
}

// BuildInfo provides a mock function with given fields: ctx
func (_m *ProviderBinding) BuildInfo(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BuildInfo")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitializeTransportProvider provides a mock function with given fields: ctx, socketAddress, providerListenerDestination
func (_m *ProviderBinding) InitializeTransportProvider(ctx context.Context, socketAddress string, providerListenerDestination string) error {
	ret := _m.Called(ctx, socketAddress, providerListenerDestination)

	if len(ret) == 0 {
		panic("no return value specified for InitializeTransportProvider")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, socketAddress, providerListenerDestination)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProviderBinding creates a new instance of ProviderBinding. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProviderBinding(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProviderBinding {
	mock := &ProviderBinding{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

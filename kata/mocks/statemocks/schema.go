// Code generated by mockery v2.44.1. DO NOT EDIT.

package statemocks

import (
	context "context"

	statestore "github.com/kaleido-io/paladin/kata/internal/statestore"
	mock "github.com/stretchr/testify/mock"

	types "github.com/kaleido-io/paladin/kata/pkg/types"
)

// Schema is an autogenerated mock type for the Schema type
type Schema struct {
	mock.Mock
}

// IDString provides a mock function with given fields:
func (_m *Schema) IDString() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IDString")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LabelInfo provides a mock function with given fields:
func (_m *Schema) LabelInfo() []*statestore.SchemaLabelInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LabelInfo")
	}

	var r0 []*statestore.SchemaLabelInfo
	if rf, ok := ret.Get(0).(func() []*statestore.SchemaLabelInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*statestore.SchemaLabelInfo)
		}
	}

	return r0
}

// Persisted provides a mock function with given fields:
func (_m *Schema) Persisted() *statestore.SchemaPersisted {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Persisted")
	}

	var r0 *statestore.SchemaPersisted
	if rf, ok := ret.Get(0).(func() *statestore.SchemaPersisted); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*statestore.SchemaPersisted)
		}
	}

	return r0
}

// ProcessState provides a mock function with given fields: ctx, data
func (_m *Schema) ProcessState(ctx context.Context, data types.RawJSON) (*statestore.StateWithLabels, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for ProcessState")
	}

	var r0 *statestore.StateWithLabels
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.RawJSON) (*statestore.StateWithLabels, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.RawJSON) *statestore.StateWithLabels); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*statestore.StateWithLabels)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.RawJSON) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecoverLabels provides a mock function with given fields: ctx, s
func (_m *Schema) RecoverLabels(ctx context.Context, s *statestore.State) (*statestore.StateWithLabels, error) {
	ret := _m.Called(ctx, s)

	if len(ret) == 0 {
		panic("no return value specified for RecoverLabels")
	}

	var r0 *statestore.StateWithLabels
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *statestore.State) (*statestore.StateWithLabels, error)); ok {
		return rf(ctx, s)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *statestore.State) *statestore.StateWithLabels); ok {
		r0 = rf(ctx, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*statestore.StateWithLabels)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *statestore.State) error); ok {
		r1 = rf(ctx, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signature provides a mock function with given fields:
func (_m *Schema) Signature() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Signature")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Type provides a mock function with given fields:
func (_m *Schema) Type() statestore.SchemaType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 statestore.SchemaType
	if rf, ok := ret.Get(0).(func() statestore.SchemaType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(statestore.SchemaType)
	}

	return r0
}

// NewSchema creates a new instance of Schema. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSchema(t interface {
	mock.TestingT
	Cleanup(func())
}) *Schema {
	mock := &Schema{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

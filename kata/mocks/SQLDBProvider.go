// Code generated by mockery v2.40.2. DO NOT EDIT.

package mocks

import (
	database "github.com/golang-migrate/migrate/v4/database"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// SQLDBProvider is an autogenerated mock type for the SQLDBProvider type
type SQLDBProvider struct {
	mock.Mock
}

// DBName provides a mock function with given fields:
func (_m *SQLDBProvider) DBName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DBName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetMigrationDriver provides a mock function with given fields: _a0
func (_m *SQLDBProvider) GetMigrationDriver(_a0 *sql.DB) (database.Driver, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetMigrationDriver")
	}

	var r0 database.Driver
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.DB) (database.Driver, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*sql.DB) database.Driver); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.Driver)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.DB) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Open provides a mock function with given fields: uri
func (_m *SQLDBProvider) Open(uri string) gorm.Dialector {
	ret := _m.Called(uri)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 gorm.Dialector
	if rf, ok := ret.Get(0).(func(string) gorm.Dialector); ok {
		r0 = rf(uri)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gorm.Dialector)
		}
	}

	return r0
}

// NewSQLDBProvider creates a new instance of SQLDBProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSQLDBProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *SQLDBProvider {
	mock := &SQLDBProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

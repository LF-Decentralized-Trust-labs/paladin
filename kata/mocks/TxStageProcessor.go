// Code generated by mockery v2.40.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	transactionstore "github.com/kaleido-io/paladin/kata/internal/transactionstore"

	types "github.com/kaleido-io/paladin/kata/internal/engine/types"
)

// TxStageProcessor is an autogenerated mock type for the TxStageProcessor type
type TxStageProcessor struct {
	mock.Mock
}

// GetIncompletePreReqTxIDs provides a mock function with given fields: ctx, tsg, sfs
func (_m *TxStageProcessor) GetIncompletePreReqTxIDs(ctx context.Context, tsg transactionstore.TxStateGetters, sfs types.StageFoundationService) *types.TxProcessPreReq {
	ret := _m.Called(ctx, tsg, sfs)

	if len(ret) == 0 {
		panic("no return value specified for GetIncompletePreReqTxIDs")
	}

	var r0 *types.TxProcessPreReq
	if rf, ok := ret.Get(0).(func(context.Context, transactionstore.TxStateGetters, types.StageFoundationService) *types.TxProcessPreReq); ok {
		r0 = rf(ctx, tsg, sfs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.TxProcessPreReq)
		}
	}

	return r0
}

// MatchStage provides a mock function with given fields: ctx, tsg, sfs
func (_m *TxStageProcessor) MatchStage(ctx context.Context, tsg transactionstore.TxStateGetters, sfs types.StageFoundationService) bool {
	ret := _m.Called(ctx, tsg, sfs)

	if len(ret) == 0 {
		panic("no return value specified for MatchStage")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, transactionstore.TxStateGetters, types.StageFoundationService) bool); ok {
		r0 = rf(ctx, tsg, sfs)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *TxStageProcessor) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PerformAction provides a mock function with given fields: ctx, tsg, sfs
func (_m *TxStageProcessor) PerformAction(ctx context.Context, tsg transactionstore.TxStateGetters, sfs types.StageFoundationService) (interface{}, error) {
	ret := _m.Called(ctx, tsg, sfs)

	if len(ret) == 0 {
		panic("no return value specified for PerformAction")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, transactionstore.TxStateGetters, types.StageFoundationService) (interface{}, error)); ok {
		return rf(ctx, tsg, sfs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, transactionstore.TxStateGetters, types.StageFoundationService) interface{}); ok {
		r0 = rf(ctx, tsg, sfs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, transactionstore.TxStateGetters, types.StageFoundationService) error); ok {
		r1 = rf(ctx, tsg, sfs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessEvents provides a mock function with given fields: ctx, tsg, sfs, stageEvents
func (_m *TxStageProcessor) ProcessEvents(ctx context.Context, tsg transactionstore.TxStateGetters, sfs types.StageFoundationService, stageEvents []*types.StageEvent) ([]*types.StageEvent, *transactionstore.TransactionUpdate, types.StageProcessNextStep) {
	ret := _m.Called(ctx, tsg, sfs, stageEvents)

	if len(ret) == 0 {
		panic("no return value specified for ProcessEvents")
	}

	var r0 []*types.StageEvent
	var r1 *transactionstore.TransactionUpdate
	var r2 types.StageProcessNextStep
	if rf, ok := ret.Get(0).(func(context.Context, transactionstore.TxStateGetters, types.StageFoundationService, []*types.StageEvent) ([]*types.StageEvent, *transactionstore.TransactionUpdate, types.StageProcessNextStep)); ok {
		return rf(ctx, tsg, sfs, stageEvents)
	}
	if rf, ok := ret.Get(0).(func(context.Context, transactionstore.TxStateGetters, types.StageFoundationService, []*types.StageEvent) []*types.StageEvent); ok {
		r0 = rf(ctx, tsg, sfs, stageEvents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.StageEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, transactionstore.TxStateGetters, types.StageFoundationService, []*types.StageEvent) *transactionstore.TransactionUpdate); ok {
		r1 = rf(ctx, tsg, sfs, stageEvents)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*transactionstore.TransactionUpdate)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, transactionstore.TxStateGetters, types.StageFoundationService, []*types.StageEvent) types.StageProcessNextStep); ok {
		r2 = rf(ctx, tsg, sfs, stageEvents)
	} else {
		r2 = ret.Get(2).(types.StageProcessNextStep)
	}

	return r0, r1, r2
}

// NewTxStageProcessor creates a new instance of TxStageProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTxStageProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *TxStageProcessor {
	mock := &TxStageProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

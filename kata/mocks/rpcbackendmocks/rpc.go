// Code generated by mockery v2.44.1. DO NOT EDIT.

package rpcbackendmocks

import (
	context "context"

	rpcbackend "github.com/hyperledger/firefly-signer/pkg/rpcbackend"
	mock "github.com/stretchr/testify/mock"
)

// RPC is an autogenerated mock type for the RPC type
type RPC struct {
	mock.Mock
}

// CallRPC provides a mock function with given fields: ctx, result, method, params
func (_m *RPC) CallRPC(ctx context.Context, result interface{}, method string, params ...interface{}) *rpcbackend.RPCError {
	var _ca []interface{}
	_ca = append(_ca, ctx, result, method)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CallRPC")
	}

	var r0 *rpcbackend.RPCError
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) *rpcbackend.RPCError); ok {
		r0 = rf(ctx, result, method, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcbackend.RPCError)
		}
	}

	return r0
}

// NewRPC creates a new instance of RPC. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRPC(t interface {
	mock.TestingT
	Cleanup(func())
}) *RPC {
	mock := &RPC{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.44.1. DO NOT EDIT.

package rpcbackendmocks

import (
	context "context"

	fftypes "github.com/hyperledger/firefly-common/pkg/fftypes"
	mock "github.com/stretchr/testify/mock"

	rpcbackend "github.com/hyperledger/firefly-signer/pkg/rpcbackend"
)

// Subscription is an autogenerated mock type for the Subscription type
type Subscription struct {
	mock.Mock
}

// LocalID provides a mock function with given fields:
func (_m *Subscription) LocalID() *fftypes.UUID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LocalID")
	}

	var r0 *fftypes.UUID
	if rf, ok := ret.Get(0).(func() *fftypes.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fftypes.UUID)
		}
	}

	return r0
}

// Notifications provides a mock function with given fields:
func (_m *Subscription) Notifications() chan *rpcbackend.RPCSubscriptionNotification {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Notifications")
	}

	var r0 chan *rpcbackend.RPCSubscriptionNotification
	if rf, ok := ret.Get(0).(func() chan *rpcbackend.RPCSubscriptionNotification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *rpcbackend.RPCSubscriptionNotification)
		}
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: ctx
func (_m *Subscription) Unsubscribe(ctx context.Context) *rpcbackend.RPCError {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 *rpcbackend.RPCError
	if rf, ok := ret.Get(0).(func(context.Context) *rpcbackend.RPCError); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcbackend.RPCError)
		}
	}

	return r0
}

// NewSubscription creates a new instance of Subscription. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscription(t interface {
	mock.TestingT
	Cleanup(func())
}) *Subscription {
	mock := &Subscription{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

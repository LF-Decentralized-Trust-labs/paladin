// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	transactionstore "github.com/kaleido-io/paladin/kata/internal/transactionstore"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// TransactionStore is an autogenerated mock type for the TransactionStore type
type TransactionStore struct {
	mock.Mock
}

// DeleteTransaction provides a mock function with given fields: ctx, t
func (_m *TransactionStore) DeleteTransaction(ctx context.Context, t transactionstore.Transaction) error {
	ret := _m.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, transactionstore.Transaction) error); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTransactions provides a mock function with given fields: _a0
func (_m *TransactionStore) GetAllTransactions(_a0 context.Context) ([]transactionstore.Transaction, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTransactions")
	}

	var r0 []transactionstore.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]transactionstore.Transaction, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []transactionstore.Transaction); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactionstore.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByID provides a mock function with given fields: _a0, _a1
func (_m *TransactionStore) GetTransactionByID(_a0 context.Context, _a1 uuid.UUID) (*transactionstore.Transaction, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByID")
	}

	var r0 *transactionstore.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*transactionstore.Transaction, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *transactionstore.Transaction); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transactionstore.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertTransaction provides a mock function with given fields: _a0, _a1
func (_m *TransactionStore) InsertTransaction(_a0 context.Context, _a1 transactionstore.Transaction) (*transactionstore.Transaction, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InsertTransaction")
	}

	var r0 *transactionstore.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, transactionstore.Transaction) (*transactionstore.Transaction, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, transactionstore.Transaction) *transactionstore.Transaction); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transactionstore.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, transactionstore.Transaction) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTransaction provides a mock function with given fields: ctx, t
func (_m *TransactionStore) UpdateTransaction(ctx context.Context, t transactionstore.Transaction) (*transactionstore.Transaction, error) {
	ret := _m.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTransaction")
	}

	var r0 *transactionstore.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, transactionstore.Transaction) (*transactionstore.Transaction, error)); ok {
		return rf(ctx, t)
	}
	if rf, ok := ret.Get(0).(func(context.Context, transactionstore.Transaction) *transactionstore.Transaction); ok {
		r0 = rf(ctx, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transactionstore.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, transactionstore.Transaction) error); ok {
		r1 = rf(ctx, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransactionStore creates a new instance of TransactionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionStore {
	mock := &TransactionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

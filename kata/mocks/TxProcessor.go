// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	controller "github.com/kaleido-io/paladin/kata/internal/engine/controller"
	mock "github.com/stretchr/testify/mock"

	types "github.com/kaleido-io/paladin/kata/internal/engine/types"
)

// TxProcessor is an autogenerated mock type for the TxProcessor type
type TxProcessor struct {
	mock.Mock
}

// AddStageEvent provides a mock function with given fields: ctx, stageEvent
func (_m *TxProcessor) AddStageEvent(ctx context.Context, stageEvent *types.StageEvent) {
	_m.Called(ctx, stageEvent)
}

// Continue provides a mock function with given fields: ctx
func (_m *TxProcessor) Continue(ctx context.Context) {
	_m.Called(ctx)
}

// GetStageContext provides a mock function with given fields: ctx
func (_m *TxProcessor) GetStageContext(ctx context.Context) *controller.StageContext {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetStageContext")
	}

	var r0 *controller.StageContext
	if rf, ok := ret.Get(0).(func(context.Context) *controller.StageContext); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controller.StageContext)
		}
	}

	return r0
}

// GetStageTriggerError provides a mock function with given fields: ctx
func (_m *TxProcessor) GetStageTriggerError(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetStageTriggerError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTxProcessor creates a new instance of TxProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTxProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *TxProcessor {
	mock := &TxProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.44.1. DO NOT EDIT.

package commsbusmocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// GRPCServer is an autogenerated mock type for the GRPCServer type
type GRPCServer struct {
	mock.Mock
}

// GetSocketAddress provides a mock function with given fields:
func (_m *GRPCServer) GetSocketAddress() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSocketAddress")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Run provides a mock function with given fields: ctx
func (_m *GRPCServer) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields: ctx
func (_m *GRPCServer) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewGRPCServer creates a new instance of GRPCServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGRPCServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *GRPCServer {
	mock := &GRPCServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

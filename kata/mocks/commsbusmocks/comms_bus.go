// Code generated by mockery v2.44.1. DO NOT EDIT.

package commsbusmocks

import (
	commsbus "github.com/kaleido-io/paladin/kata/internal/commsbus"
	mock "github.com/stretchr/testify/mock"
)

// CommsBus is an autogenerated mock type for the CommsBus type
type CommsBus struct {
	mock.Mock
}

// Broker provides a mock function with given fields:
func (_m *CommsBus) Broker() commsbus.Broker {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Broker")
	}

	var r0 commsbus.Broker
	if rf, ok := ret.Get(0).(func() commsbus.Broker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(commsbus.Broker)
		}
	}

	return r0
}

// GRPCServer provides a mock function with given fields:
func (_m *CommsBus) GRPCServer() commsbus.GRPCServer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GRPCServer")
	}

	var r0 commsbus.GRPCServer
	if rf, ok := ret.Get(0).(func() commsbus.GRPCServer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(commsbus.GRPCServer)
		}
	}

	return r0
}

// NewCommsBus creates a new instance of CommsBus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommsBus(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommsBus {
	mock := &CommsBus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.40.2. DO NOT EDIT.

package commsbusmocks

import (
	context "context"

	proto "github.com/kaleido-io/paladin/kata/pkg/proto"
	mock "github.com/stretchr/testify/mock"
)

// KataMessageServiceServer is an autogenerated mock type for the KataMessageServiceServer type
type KataMessageServiceServer struct {
	mock.Mock
}

// ListDestinations provides a mock function with given fields: _a0, _a1
func (_m *KataMessageServiceServer) ListDestinations(_a0 context.Context, _a1 *proto.ListDestinationsRequest) (*proto.ListDestinationsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListDestinations")
	}

	var r0 *proto.ListDestinationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ListDestinationsRequest) (*proto.ListDestinationsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ListDestinationsRequest) *proto.ListDestinationsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListDestinationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.ListDestinationsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Listen provides a mock function with given fields: _a0, _a1
func (_m *KataMessageServiceServer) Listen(_a0 *proto.ListenRequest, _a1 proto.KataMessageService_ListenServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Listen")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*proto.ListenRequest, proto.KataMessageService_ListenServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishEvent provides a mock function with given fields: _a0, _a1
func (_m *KataMessageServiceServer) PublishEvent(_a0 context.Context, _a1 *proto.Event) (*proto.PublishEventResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PublishEvent")
	}

	var r0 *proto.PublishEventResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Event) (*proto.PublishEventResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Event) *proto.PublishEventResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.PublishEventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.Event) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: _a0, _a1
func (_m *KataMessageServiceServer) SendMessage(_a0 context.Context, _a1 *proto.Message) (*proto.SendMessageResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 *proto.SendMessageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Message) (*proto.SendMessageResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Message) *proto.SendMessageResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SendMessageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.Message) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Status provides a mock function with given fields: _a0, _a1
func (_m *KataMessageServiceServer) Status(_a0 context.Context, _a1 *proto.StatusRequest) (*proto.StatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 *proto.StatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.StatusRequest) (*proto.StatusResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.StatusRequest) *proto.StatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.StatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.StatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToTopic provides a mock function with given fields: _a0, _a1
func (_m *KataMessageServiceServer) SubscribeToTopic(_a0 context.Context, _a1 *proto.SubscribeToTopicRequest) (*proto.SubscribeToTopicResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToTopic")
	}

	var r0 *proto.SubscribeToTopicResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SubscribeToTopicRequest) (*proto.SubscribeToTopicResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SubscribeToTopicRequest) *proto.SubscribeToTopicResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SubscribeToTopicResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.SubscribeToTopicRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedKataMessageServiceServer provides a mock function with given fields:
func (_m *KataMessageServiceServer) mustEmbedUnimplementedKataMessageServiceServer() {
	_m.Called()
}

// NewKataMessageServiceServer creates a new instance of KataMessageServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKataMessageServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *KataMessageServiceServer {
	mock := &KataMessageServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

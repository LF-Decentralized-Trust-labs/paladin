// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	filters "github.com/kaleido-io/paladin/kata/internal/filters"
	mock "github.com/stretchr/testify/mock"
)

// FieldSet is an autogenerated mock type for the FieldSet type
type FieldSet struct {
	mock.Mock
}

// ResolverFor provides a mock function with given fields: fieldName
func (_m *FieldSet) ResolverFor(fieldName string) filters.FieldResolver {
	ret := _m.Called(fieldName)

	if len(ret) == 0 {
		panic("no return value specified for ResolverFor")
	}

	var r0 filters.FieldResolver
	if rf, ok := ret.Get(0).(func(string) filters.FieldResolver); ok {
		r0 = rf(fieldName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(filters.FieldResolver)
		}
	}

	return r0
}

// NewFieldSet creates a new instance of FieldSet. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFieldSet(t interface {
	mock.TestingT
	Cleanup(func())
}) *FieldSet {
	mock := &FieldSet{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

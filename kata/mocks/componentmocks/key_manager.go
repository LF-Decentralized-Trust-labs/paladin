// Code generated by mockery v2.44.2. DO NOT EDIT.

package componentmocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/kaleido-io/paladin/kata/pkg/proto"
)

// KeyManager is an autogenerated mock type for the KeyManager type
type KeyManager struct {
	mock.Mock
}

// ResolveKey provides a mock function with given fields: ctx, identifier, algorithm
func (_m *KeyManager) ResolveKey(ctx context.Context, identifier string, algorithm string) (string, string, error) {
	ret := _m.Called(ctx, identifier, algorithm)

	if len(ret) == 0 {
		panic("no return value specified for ResolveKey")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, string, error)); ok {
		return rf(ctx, identifier, algorithm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, identifier, algorithm)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
		r1 = rf(ctx, identifier, algorithm)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, identifier, algorithm)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Sign provides a mock function with given fields: ctx, req
func (_m *KeyManager) Sign(ctx context.Context, req *proto.SignRequest) (*proto.SignResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 *proto.SignResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SignRequest) (*proto.SignResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SignRequest) *proto.SignResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SignResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.SignRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewKeyManager creates a new instance of KeyManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeyManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *KeyManager {
	mock := &KeyManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

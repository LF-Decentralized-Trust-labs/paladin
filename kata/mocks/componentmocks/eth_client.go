// Code generated by mockery v2.44.2. DO NOT EDIT.

package componentmocks

import (
	context "context"

	abi "github.com/hyperledger/firefly-signer/pkg/abi"

	ethclient "github.com/kaleido-io/paladin/kata/pkg/ethclient"

	ethsigner "github.com/hyperledger/firefly-signer/pkg/ethsigner"

	ethtypes "github.com/hyperledger/firefly-signer/pkg/ethtypes"

	mock "github.com/stretchr/testify/mock"
)

// EthClient is an autogenerated mock type for the EthClient type
type EthClient struct {
	mock.Mock
}

// ABI provides a mock function with given fields: ctx, a
func (_m *EthClient) ABI(ctx context.Context, a abi.ABI) (ethclient.ABIClient, error) {
	ret := _m.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for ABI")
	}

	var r0 ethclient.ABIClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, abi.ABI) (ethclient.ABIClient, error)); ok {
		return rf(ctx, a)
	}
	if rf, ok := ret.Get(0).(func(context.Context, abi.ABI) ethclient.ABIClient); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ethclient.ABIClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, abi.ABI) error); ok {
		r1 = rf(ctx, a)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ABIJSON provides a mock function with given fields: ctx, abiJson
func (_m *EthClient) ABIJSON(ctx context.Context, abiJson []byte) (ethclient.ABIClient, error) {
	ret := _m.Called(ctx, abiJson)

	if len(ret) == 0 {
		panic("no return value specified for ABIJSON")
	}

	var r0 ethclient.ABIClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) (ethclient.ABIClient, error)); ok {
		return rf(ctx, abiJson)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) ethclient.ABIClient); ok {
		r0 = rf(ctx, abiJson)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ethclient.ABIClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, abiJson)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildRawTransaction provides a mock function with given fields: ctx, txVersion, from, tx
func (_m *EthClient) BuildRawTransaction(ctx context.Context, txVersion ethclient.EthTXVersion, from string, tx *ethsigner.Transaction) (ethtypes.HexBytes0xPrefix, error) {
	ret := _m.Called(ctx, txVersion, from, tx)

	if len(ret) == 0 {
		panic("no return value specified for BuildRawTransaction")
	}

	var r0 ethtypes.HexBytes0xPrefix
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ethclient.EthTXVersion, string, *ethsigner.Transaction) (ethtypes.HexBytes0xPrefix, error)); ok {
		return rf(ctx, txVersion, from, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ethclient.EthTXVersion, string, *ethsigner.Transaction) ethtypes.HexBytes0xPrefix); ok {
		r0 = rf(ctx, txVersion, from, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ethtypes.HexBytes0xPrefix)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ethclient.EthTXVersion, string, *ethsigner.Transaction) error); ok {
		r1 = rf(ctx, txVersion, from, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CallContract provides a mock function with given fields: ctx, from, tx, block
func (_m *EthClient) CallContract(ctx context.Context, from *string, tx *ethsigner.Transaction, block string) (ethtypes.HexBytes0xPrefix, error) {
	ret := _m.Called(ctx, from, tx, block)

	if len(ret) == 0 {
		panic("no return value specified for CallContract")
	}

	var r0 ethtypes.HexBytes0xPrefix
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string, *ethsigner.Transaction, string) (ethtypes.HexBytes0xPrefix, error)); ok {
		return rf(ctx, from, tx, block)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string, *ethsigner.Transaction, string) ethtypes.HexBytes0xPrefix); ok {
		r0 = rf(ctx, from, tx, block)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ethtypes.HexBytes0xPrefix)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string, *ethsigner.Transaction, string) error); ok {
		r1 = rf(ctx, from, tx, block)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChainID provides a mock function with given fields:
func (_m *EthClient) ChainID() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ChainID")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *EthClient) Close() {
	_m.Called()
}

// MustABIJSON provides a mock function with given fields: abiJson
func (_m *EthClient) MustABIJSON(abiJson []byte) ethclient.ABIClient {
	ret := _m.Called(abiJson)

	if len(ret) == 0 {
		panic("no return value specified for MustABIJSON")
	}

	var r0 ethclient.ABIClient
	if rf, ok := ret.Get(0).(func([]byte) ethclient.ABIClient); ok {
		r0 = rf(abiJson)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ethclient.ABIClient)
		}
	}

	return r0
}

// SendRawTransaction provides a mock function with given fields: ctx, rawTX
func (_m *EthClient) SendRawTransaction(ctx context.Context, rawTX ethtypes.HexBytes0xPrefix) (ethtypes.HexBytes0xPrefix, error) {
	ret := _m.Called(ctx, rawTX)

	if len(ret) == 0 {
		panic("no return value specified for SendRawTransaction")
	}

	var r0 ethtypes.HexBytes0xPrefix
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ethtypes.HexBytes0xPrefix) (ethtypes.HexBytes0xPrefix, error)); ok {
		return rf(ctx, rawTX)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ethtypes.HexBytes0xPrefix) ethtypes.HexBytes0xPrefix); ok {
		r0 = rf(ctx, rawTX)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ethtypes.HexBytes0xPrefix)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ethtypes.HexBytes0xPrefix) error); ok {
		r1 = rf(ctx, rawTX)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEthClient creates a new instance of EthClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEthClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *EthClient {
	mock := &EthClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

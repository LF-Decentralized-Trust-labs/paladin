// Code generated by mockery v2.44.2. DO NOT EDIT.

package componentmocks

import (
	context "context"

	components "github.com/kaleido-io/paladin/kata/internal/components"

	mock "github.com/stretchr/testify/mock"

	plugins "github.com/kaleido-io/paladin/kata/internal/plugins"

	plugintk "github.com/kaleido-io/paladin/toolkit/pkg/plugintk"

	uuid "github.com/google/uuid"
)

// DomainManager is an autogenerated mock type for the DomainManager type
type DomainManager struct {
	mock.Mock
}

// ConfiguredDomains provides a mock function with given fields:
func (_m *DomainManager) ConfiguredDomains() map[string]*plugins.PluginConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConfiguredDomains")
	}

	var r0 map[string]*plugins.PluginConfig
	if rf, ok := ret.Get(0).(func() map[string]*plugins.PluginConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*plugins.PluginConfig)
		}
	}

	return r0
}

// DomainRegistered provides a mock function with given fields: name, id, toDomain
func (_m *DomainManager) DomainRegistered(name string, id uuid.UUID, toDomain plugintk.DomainAPI) (plugintk.DomainCallbacks, error) {
	ret := _m.Called(name, id, toDomain)

	if len(ret) == 0 {
		panic("no return value specified for DomainRegistered")
	}

	var r0 plugintk.DomainCallbacks
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uuid.UUID, plugintk.DomainAPI) (plugintk.DomainCallbacks, error)); ok {
		return rf(name, id, toDomain)
	}
	if rf, ok := ret.Get(0).(func(string, uuid.UUID, plugintk.DomainAPI) plugintk.DomainCallbacks); ok {
		r0 = rf(name, id, toDomain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plugintk.DomainCallbacks)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uuid.UUID, plugintk.DomainAPI) error); ok {
		r1 = rf(name, id, toDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainByName provides a mock function with given fields: ctx, name
func (_m *DomainManager) GetDomainByName(ctx context.Context, name string) (components.DomainActions, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetDomainByName")
	}

	var r0 components.DomainActions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (components.DomainActions, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) components.DomainActions); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(components.DomainActions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostInit provides a mock function with given fields: _a0
func (_m *DomainManager) PostInit(_a0 components.PostInitComponents) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PostInit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(components.PostInitComponents) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PreInit provides a mock function with given fields: _a0
func (_m *DomainManager) PreInit(_a0 components.PreInitComponents) (*components.InitInstructions, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PreInit")
	}

	var r0 *components.InitInstructions
	var r1 error
	if rf, ok := ret.Get(0).(func(components.PreInitComponents) (*components.InitInstructions, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(components.PreInitComponents) *components.InitInstructions); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*components.InitInstructions)
		}
	}

	if rf, ok := ret.Get(1).(func(components.PreInitComponents) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields:
func (_m *DomainManager) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *DomainManager) Stop() {
	_m.Called()
}

// NewDomainManager creates a new instance of DomainManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDomainManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *DomainManager {
	mock := &DomainManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

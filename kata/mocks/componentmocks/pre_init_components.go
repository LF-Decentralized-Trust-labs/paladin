// Code generated by mockery v2.44.2. DO NOT EDIT.

package componentmocks

import (
	ethclient "github.com/kaleido-io/paladin/kata/pkg/ethclient"
	mock "github.com/stretchr/testify/mock"

	persistence "github.com/kaleido-io/paladin/kata/pkg/persistence"

	statestore "github.com/kaleido-io/paladin/kata/internal/statestore"
)

// PreInitComponents is an autogenerated mock type for the PreInitComponents type
type PreInitComponents struct {
	mock.Mock
}

// EthClientFactory provides a mock function with given fields:
func (_m *PreInitComponents) EthClientFactory() ethclient.EthClientFactory {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EthClientFactory")
	}

	var r0 ethclient.EthClientFactory
	if rf, ok := ret.Get(0).(func() ethclient.EthClientFactory); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ethclient.EthClientFactory)
		}
	}

	return r0
}

// Persistence provides a mock function with given fields:
func (_m *PreInitComponents) Persistence() persistence.Persistence {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Persistence")
	}

	var r0 persistence.Persistence
	if rf, ok := ret.Get(0).(func() persistence.Persistence); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(persistence.Persistence)
		}
	}

	return r0
}

// StateStore provides a mock function with given fields:
func (_m *PreInitComponents) StateStore() statestore.StateStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StateStore")
	}

	var r0 statestore.StateStore
	if rf, ok := ret.Get(0).(func() statestore.StateStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(statestore.StateStore)
		}
	}

	return r0
}

// NewPreInitComponents creates a new instance of PreInitComponents. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPreInitComponents(t interface {
	mock.TestingT
	Cleanup(func())
}) *PreInitComponents {
	mock := &PreInitComponents{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

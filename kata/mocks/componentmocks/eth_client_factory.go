// Code generated by mockery v2.44.2. DO NOT EDIT.

package componentmocks

import (
	ethclient "github.com/kaleido-io/paladin/kata/pkg/ethclient"
	mock "github.com/stretchr/testify/mock"
)

// EthClientFactory is an autogenerated mock type for the EthClientFactory type
type EthClientFactory struct {
	mock.Mock
}

// ChainID provides a mock function with given fields:
func (_m *EthClientFactory) ChainID() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ChainID")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *EthClientFactory) Close() {
	_m.Called()
}

// HTTPClient provides a mock function with given fields:
func (_m *EthClientFactory) HTTPClient() ethclient.EthClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HTTPClient")
	}

	var r0 ethclient.EthClient
	if rf, ok := ret.Get(0).(func() ethclient.EthClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ethclient.EthClient)
		}
	}

	return r0
}

// NewWS provides a mock function with given fields:
func (_m *EthClientFactory) NewWS() (ethclient.EthClient, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewWS")
	}

	var r0 ethclient.EthClient
	var r1 error
	if rf, ok := ret.Get(0).(func() (ethclient.EthClient, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() ethclient.EthClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ethclient.EthClient)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SharedWS provides a mock function with given fields:
func (_m *EthClientFactory) SharedWS() ethclient.EthClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SharedWS")
	}

	var r0 ethclient.EthClient
	if rf, ok := ret.Get(0).(func() ethclient.EthClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ethclient.EthClient)
		}
	}

	return r0
}

// NewEthClientFactory creates a new instance of EthClientFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEthClientFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *EthClientFactory {
	mock := &EthClientFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.44.2. DO NOT EDIT.

package componentmocks

import (
	context "context"

	abi "github.com/hyperledger/firefly-signer/pkg/abi"

	ethclient "github.com/kaleido-io/paladin/kata/pkg/ethclient"

	ethtypes "github.com/hyperledger/firefly-signer/pkg/ethtypes"

	mock "github.com/stretchr/testify/mock"
)

// ABIClient is an autogenerated mock type for the ABIClient type
type ABIClient struct {
	mock.Mock
}

// ABI provides a mock function with given fields:
func (_m *ABIClient) ABI() abi.ABI {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ABI")
	}

	var r0 abi.ABI
	if rf, ok := ret.Get(0).(func() abi.ABI); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(abi.ABI)
		}
	}

	return r0
}

// Constructor provides a mock function with given fields: ctx, bytecode
func (_m *ABIClient) Constructor(ctx context.Context, bytecode ethtypes.HexBytes0xPrefix) (ethclient.ABIFunctionClient, error) {
	ret := _m.Called(ctx, bytecode)

	if len(ret) == 0 {
		panic("no return value specified for Constructor")
	}

	var r0 ethclient.ABIFunctionClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ethtypes.HexBytes0xPrefix) (ethclient.ABIFunctionClient, error)); ok {
		return rf(ctx, bytecode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ethtypes.HexBytes0xPrefix) ethclient.ABIFunctionClient); ok {
		r0 = rf(ctx, bytecode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ethclient.ABIFunctionClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ethtypes.HexBytes0xPrefix) error); ok {
		r1 = rf(ctx, bytecode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Function provides a mock function with given fields: ctx, nameOrFullSig
func (_m *ABIClient) Function(ctx context.Context, nameOrFullSig string) (ethclient.ABIFunctionClient, error) {
	ret := _m.Called(ctx, nameOrFullSig)

	if len(ret) == 0 {
		panic("no return value specified for Function")
	}

	var r0 ethclient.ABIFunctionClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (ethclient.ABIFunctionClient, error)); ok {
		return rf(ctx, nameOrFullSig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) ethclient.ABIFunctionClient); ok {
		r0 = rf(ctx, nameOrFullSig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ethclient.ABIFunctionClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nameOrFullSig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MustConstructor provides a mock function with given fields: bytecode
func (_m *ABIClient) MustConstructor(bytecode ethtypes.HexBytes0xPrefix) ethclient.ABIFunctionClient {
	ret := _m.Called(bytecode)

	if len(ret) == 0 {
		panic("no return value specified for MustConstructor")
	}

	var r0 ethclient.ABIFunctionClient
	if rf, ok := ret.Get(0).(func(ethtypes.HexBytes0xPrefix) ethclient.ABIFunctionClient); ok {
		r0 = rf(bytecode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ethclient.ABIFunctionClient)
		}
	}

	return r0
}

// MustFunction provides a mock function with given fields: nameOrFullSig
func (_m *ABIClient) MustFunction(nameOrFullSig string) ethclient.ABIFunctionClient {
	ret := _m.Called(nameOrFullSig)

	if len(ret) == 0 {
		panic("no return value specified for MustFunction")
	}

	var r0 ethclient.ABIFunctionClient
	if rf, ok := ret.Get(0).(func(string) ethclient.ABIFunctionClient); ok {
		r0 = rf(nameOrFullSig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ethclient.ABIFunctionClient)
		}
	}

	return r0
}

// NewABIClient creates a new instance of ABIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewABIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ABIClient {
	mock := &ABIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

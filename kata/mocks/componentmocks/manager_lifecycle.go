// Code generated by mockery v2.44.2. DO NOT EDIT.

package componentmocks

import (
	components "github.com/kaleido-io/paladin/kata/internal/components"
	mock "github.com/stretchr/testify/mock"
)

// ManagerLifecycle is an autogenerated mock type for the ManagerLifecycle type
type ManagerLifecycle struct {
	mock.Mock
}

// PostInit provides a mock function with given fields: _a0
func (_m *ManagerLifecycle) PostInit(_a0 components.PostInitComponents) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PostInit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(components.PostInitComponents) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PreInit provides a mock function with given fields: _a0
func (_m *ManagerLifecycle) PreInit(_a0 components.PreInitComponents) (*components.InitInstructions, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PreInit")
	}

	var r0 *components.InitInstructions
	var r1 error
	if rf, ok := ret.Get(0).(func(components.PreInitComponents) (*components.InitInstructions, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(components.PreInitComponents) *components.InitInstructions); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*components.InitInstructions)
		}
	}

	if rf, ok := ret.Get(1).(func(components.PreInitComponents) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields:
func (_m *ManagerLifecycle) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *ManagerLifecycle) Stop() {
	_m.Called()
}

// NewManagerLifecycle creates a new instance of ManagerLifecycle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManagerLifecycle(t interface {
	mock.TestingT
	Cleanup(func())
}) *ManagerLifecycle {
	mock := &ManagerLifecycle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

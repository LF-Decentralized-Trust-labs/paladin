// Code generated by mockery v2.44.2. DO NOT EDIT.

package componentmocks

import (
	context "context"

	blockindexer "github.com/kaleido-io/paladin/kata/pkg/blockindexer"

	mock "github.com/stretchr/testify/mock"
)

// BlockIndexer is an autogenerated mock type for the BlockIndexer type
type BlockIndexer struct {
	mock.Mock
}

// GetBlockListenerHeight provides a mock function with given fields: ctx
func (_m *BlockIndexer) GetBlockListenerHeight(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockListenerHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockTransactionsByNumber provides a mock function with given fields: ctx, blockNumber
func (_m *BlockIndexer) GetBlockTransactionsByNumber(ctx context.Context, blockNumber int64) ([]*blockindexer.IndexedTransaction, error) {
	ret := _m.Called(ctx, blockNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockTransactionsByNumber")
	}

	var r0 []*blockindexer.IndexedTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*blockindexer.IndexedTransaction, error)); ok {
		return rf(ctx, blockNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*blockindexer.IndexedTransaction); ok {
		r0 = rf(ctx, blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*blockindexer.IndexedTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfirmedBlockHeight provides a mock function with given fields: ctx
func (_m *BlockIndexer) GetConfirmedBlockHeight(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetConfirmedBlockHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIndexedBlockByNumber provides a mock function with given fields: ctx, number
func (_m *BlockIndexer) GetIndexedBlockByNumber(ctx context.Context, number uint64) (*blockindexer.IndexedBlock, error) {
	ret := _m.Called(ctx, number)

	if len(ret) == 0 {
		panic("no return value specified for GetIndexedBlockByNumber")
	}

	var r0 *blockindexer.IndexedBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*blockindexer.IndexedBlock, error)); ok {
		return rf(ctx, number)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *blockindexer.IndexedBlock); ok {
		r0 = rf(ctx, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blockindexer.IndexedBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIndexedTransactionByHash provides a mock function with given fields: ctx, hash
func (_m *BlockIndexer) GetIndexedTransactionByHash(ctx context.Context, hash string) (*blockindexer.IndexedTransaction, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for GetIndexedTransactionByHash")
	}

	var r0 *blockindexer.IndexedTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*blockindexer.IndexedTransaction, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *blockindexer.IndexedTransaction); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blockindexer.IndexedTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionEventsByHash provides a mock function with given fields: ctx, hash
func (_m *BlockIndexer) GetTransactionEventsByHash(ctx context.Context, hash string) ([]*blockindexer.IndexedEvent, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionEventsByHash")
	}

	var r0 []*blockindexer.IndexedEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*blockindexer.IndexedEvent, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*blockindexer.IndexedEvent); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*blockindexer.IndexedEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTransactionEvents provides a mock function with given fields: ctx, lastBlock, lastIndex, limit, withTransaction, withBlock
func (_m *BlockIndexer) ListTransactionEvents(ctx context.Context, lastBlock int64, lastIndex int, limit int, withTransaction bool, withBlock bool) ([]*blockindexer.IndexedEvent, error) {
	ret := _m.Called(ctx, lastBlock, lastIndex, limit, withTransaction, withBlock)

	if len(ret) == 0 {
		panic("no return value specified for ListTransactionEvents")
	}

	var r0 []*blockindexer.IndexedEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int, bool, bool) ([]*blockindexer.IndexedEvent, error)); ok {
		return rf(ctx, lastBlock, lastIndex, limit, withTransaction, withBlock)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int, bool, bool) []*blockindexer.IndexedEvent); ok {
		r0 = rf(ctx, lastBlock, lastIndex, limit, withTransaction, withBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*blockindexer.IndexedEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int, int, bool, bool) error); ok {
		r1 = rf(ctx, lastBlock, lastIndex, limit, withTransaction, withBlock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields: internalStreams
func (_m *BlockIndexer) Start(internalStreams ...*blockindexer.InternalEventStream) error {
	_va := make([]interface{}, len(internalStreams))
	for _i := range internalStreams {
		_va[_i] = internalStreams[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...*blockindexer.InternalEventStream) error); ok {
		r0 = rf(internalStreams...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *BlockIndexer) Stop() {
	_m.Called()
}

// WaitForTransaction provides a mock function with given fields: ctx, hash
func (_m *BlockIndexer) WaitForTransaction(ctx context.Context, hash string) (*blockindexer.IndexedTransaction, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for WaitForTransaction")
	}

	var r0 *blockindexer.IndexedTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*blockindexer.IndexedTransaction, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *blockindexer.IndexedTransaction); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blockindexer.IndexedTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBlockIndexer creates a new instance of BlockIndexer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockIndexer(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockIndexer {
	mock := &BlockIndexer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	loader "github.com/kaleido-io/paladin/kata/internal/plugins/loader"
	mock "github.com/stretchr/testify/mock"
)

// ProviderLoader is an autogenerated mock type for the ProviderLoader type
type ProviderLoader struct {
	mock.Mock
}

// Load provides a mock function with given fields: ctx, providerConfig
func (_m *ProviderLoader) Load(ctx context.Context, providerConfig loader.Config) (loader.ProviderBinding, error) {
	ret := _m.Called(ctx, providerConfig)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 loader.ProviderBinding
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, loader.Config) (loader.ProviderBinding, error)); ok {
		return rf(ctx, providerConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, loader.Config) loader.ProviderBinding); ok {
		r0 = rf(ctx, providerConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(loader.ProviderBinding)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, loader.Config) error); ok {
		r1 = rf(ctx, providerConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProviderLoader creates a new instance of ProviderLoader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProviderLoader(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProviderLoader {
	mock := &ProviderLoader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

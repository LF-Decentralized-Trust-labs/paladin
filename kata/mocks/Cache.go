// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Cache is an autogenerated mock type for the Cache type
type Cache[K comparable, V interface{}] struct {
	mock.Mock
}

// Delete provides a mock function with given fields: key
func (_m *Cache[K, V]) Delete(key K) {
	_m.Called(key)
}

// Get provides a mock function with given fields: key
func (_m *Cache[K, V]) Get(key K) (V, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 V
	var r1 bool
	if rf, ok := ret.Get(0).(func(K) (V, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(K) V); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(V)
	}

	if rf, ok := ret.Get(1).(func(K) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Set provides a mock function with given fields: key, val
func (_m *Cache[K, V]) Set(key K, val V) {
	_m.Called(key, val)
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache[K comparable, V interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache[K, V] {
	mock := &Cache[K, V]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

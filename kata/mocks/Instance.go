// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	plugins "github.com/kaleido-io/paladin/kata/internal/plugins"
	mock "github.com/stretchr/testify/mock"
)

// Instance is an autogenerated mock type for the Instance type
type Instance struct {
	mock.Mock
}

// GetDestination provides a mock function with given fields:
func (_m *Instance) GetDestination() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDestination")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *Instance) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetProvider provides a mock function with given fields:
func (_m *Instance) GetProvider() plugins.Provider {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProvider")
	}

	var r0 plugins.Provider
	if rf, ok := ret.Get(0).(func() plugins.Provider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plugins.Provider)
		}
	}

	return r0
}

// NewInstance creates a new instance of Instance. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInstance(t interface {
	mock.TestingT
	Cleanup(func())
}) *Instance {
	mock := &Instance{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

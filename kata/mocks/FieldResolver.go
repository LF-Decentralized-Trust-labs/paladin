// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	driver "database/sql/driver"

	mock "github.com/stretchr/testify/mock"

	types "github.com/kaleido-io/paladin/kata/internal/types"
)

// FieldResolver is an autogenerated mock type for the FieldResolver type
type FieldResolver struct {
	mock.Mock
}

// SQLColumn provides a mock function with given fields:
func (_m *FieldResolver) SQLColumn() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SQLColumn")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SQLValue provides a mock function with given fields: ctx, v
func (_m *FieldResolver) SQLValue(ctx context.Context, v types.RawJSON) (driver.Value, error) {
	ret := _m.Called(ctx, v)

	if len(ret) == 0 {
		panic("no return value specified for SQLValue")
	}

	var r0 driver.Value
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.RawJSON) (driver.Value, error)); ok {
		return rf(ctx, v)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.RawJSON) driver.Value); ok {
		r0 = rf(ctx, v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Value)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.RawJSON) error); ok {
		r1 = rf(ctx, v)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SupportsLIKE provides a mock function with given fields:
func (_m *FieldResolver) SupportsLIKE() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SupportsLIKE")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewFieldResolver creates a new instance of FieldResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFieldResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *FieldResolver {
	mock := &FieldResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	plugins "github.com/kaleido-io/paladin/kata/internal/plugins"
	mock "github.com/stretchr/testify/mock"
)

// PluginRegistry is an autogenerated mock type for the PluginRegistry type
type PluginRegistry struct {
	mock.Mock
}

// CreateInstance provides a mock function with given fields: ctx, providerName, instanceName
func (_m *PluginRegistry) CreateInstance(ctx context.Context, providerName string, instanceName string) (plugins.Instance, error) {
	ret := _m.Called(ctx, providerName, instanceName)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstance")
	}

	var r0 plugins.Instance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (plugins.Instance, error)); ok {
		return rf(ctx, providerName, instanceName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) plugins.Instance); ok {
		r0 = rf(ctx, providerName, instanceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plugins.Instance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, providerName, instanceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Initialize provides a mock function with given fields: ctx
func (_m *PluginRegistry) Initialize(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListPlugins provides a mock function with given fields: ctx
func (_m *PluginRegistry) ListPlugins(ctx context.Context) ([]plugins.Provider, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListPlugins")
	}

	var r0 []plugins.Provider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]plugins.Provider, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []plugins.Provider); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]plugins.Provider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPluginRegistry creates a new instance of PluginRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPluginRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *PluginRegistry {
	mock := &PluginRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

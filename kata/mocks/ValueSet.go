// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"
	driver "database/sql/driver"

	filters "github.com/kaleido-io/paladin/kata/internal/filters"

	mock "github.com/stretchr/testify/mock"
)

// ValueSet is an autogenerated mock type for the ValueSet type
type ValueSet struct {
	mock.Mock
}

// GetValue provides a mock function with given fields: ctx, fieldName, resolver
func (_m *ValueSet) GetValue(ctx context.Context, fieldName string, resolver filters.FieldResolver) (driver.Value, error) {
	ret := _m.Called(ctx, fieldName, resolver)

	if len(ret) == 0 {
		panic("no return value specified for GetValue")
	}

	var r0 driver.Value
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, filters.FieldResolver) (driver.Value, error)); ok {
		return rf(ctx, fieldName, resolver)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, filters.FieldResolver) driver.Value); ok {
		r0 = rf(ctx, fieldName, resolver)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Value)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, filters.FieldResolver) error); ok {
		r1 = rf(ctx, fieldName, resolver)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewValueSet creates a new instance of ValueSet. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValueSet(t interface {
	mock.TestingT
	Cleanup(func())
}) *ValueSet {
	mock := &ValueSet{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

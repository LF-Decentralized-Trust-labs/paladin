// Code generated by mockery v2.38.0. DO NOT EDIT.

package sequencemocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	statestore "github.com/kaleido-io/paladin/kata/internal/statestore"

	transactionstore "github.com/kaleido-io/paladin/kata/internal/transactionstore"

	uuid "github.com/google/uuid"
)

// Persistence is an autogenerated mock type for the Persistence type
type Persistence struct {
	mock.Mock
}

// GetStateByHash provides a mock function with given fields: _a0, _a1
func (_m *Persistence) GetStateByHash(_a0 context.Context, _a1 string) (statestore.State, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetStateByHash")
	}

	var r0 statestore.State
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (statestore.State, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) statestore.State); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(statestore.State)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByID provides a mock function with given fields: _a0, _a1
func (_m *Persistence) GetTransactionByID(_a0 context.Context, _a1 uuid.UUID) (transactionstore.Transaction, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByID")
	}

	var r0 transactionstore.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (transactionstore.Transaction, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) transactionstore.Transaction); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(transactionstore.Transaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateState provides a mock function with given fields: _a0, _a1
func (_m *Persistence) UpdateState(_a0 context.Context, _a1 statestore.State) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, statestore.State) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPersistence creates a new instance of Persistence. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPersistence(t interface {
	mock.TestingT
	Cleanup(func())
}) *Persistence {
	mock := &Persistence{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

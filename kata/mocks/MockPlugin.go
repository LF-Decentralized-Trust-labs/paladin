// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	statestore "github.com/kaleido-io/paladin/kata/internal/statestore"

	transactionstore "github.com/kaleido-io/paladin/kata/internal/transactionstore"
)

// MockPlugin is an autogenerated mock type for the MockPlugin type
type MockPlugin struct {
	mock.Mock
}

// Validate provides a mock function with given fields: ctx, tsg, ss
func (_m *MockPlugin) Validate(ctx context.Context, tsg transactionstore.TxStateGetters, ss statestore.StateStore) bool {
	ret := _m.Called(ctx, tsg, ss)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, transactionstore.TxStateGetters, statestore.StateStore) bool); ok {
		r0 = rf(ctx, tsg, ss)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewMockPlugin creates a new instance of MockPlugin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPlugin(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPlugin {
	mock := &MockPlugin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

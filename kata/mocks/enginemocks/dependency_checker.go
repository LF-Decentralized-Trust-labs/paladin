// Code generated by mockery v2.44.1. DO NOT EDIT.

package enginemocks

import (
	context "context"

	transactionstore "github.com/kaleido-io/paladin/kata/internal/transactionstore"
	mock "github.com/stretchr/testify/mock"

	types "github.com/kaleido-io/paladin/kata/internal/engine/types"
)

// DependencyChecker is an autogenerated mock type for the DependencyChecker type
type DependencyChecker struct {
	mock.Mock
}

// GetPreReqDispatchAddresses provides a mock function with given fields: ctx, preReqTxIDs
func (_m *DependencyChecker) GetPreReqDispatchAddresses(ctx context.Context, preReqTxIDs []string) []string {
	ret := _m.Called(ctx, preReqTxIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetPreReqDispatchAddresses")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, []string) []string); ok {
		r0 = rf(ctx, preReqTxIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// PreReqsMatchCondition provides a mock function with given fields: ctx, preReqTxIDs, conditionFunc
func (_m *DependencyChecker) PreReqsMatchCondition(ctx context.Context, preReqTxIDs []string, conditionFunc func(transactionstore.TxStateGetters) bool) []string {
	ret := _m.Called(ctx, preReqTxIDs, conditionFunc)

	if len(ret) == 0 {
		panic("no return value specified for PreReqsMatchCondition")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, []string, func(transactionstore.TxStateGetters) bool) []string); ok {
		r0 = rf(ctx, preReqTxIDs, conditionFunc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// RegisterPreReqTrigger provides a mock function with given fields: ctx, txID, txPreReq
func (_m *DependencyChecker) RegisterPreReqTrigger(ctx context.Context, txID string, txPreReq *types.TxProcessPreReq) {
	_m.Called(ctx, txID, txPreReq)
}

// NewDependencyChecker creates a new instance of DependencyChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDependencyChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *DependencyChecker {
	mock := &DependencyChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.44.1. DO NOT EDIT.

package enginemocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	transactionstore "github.com/kaleido-io/paladin/kata/internal/transactionstore"

	types "github.com/kaleido-io/paladin/kata/internal/engine/types"
)

// StageController is an autogenerated mock type for the StageController type
type StageController struct {
	mock.Mock
}

// CalculateStage provides a mock function with given fields: ctx, tsg
func (_m *StageController) CalculateStage(ctx context.Context, tsg transactionstore.TxStateGetters) string {
	ret := _m.Called(ctx, tsg)

	if len(ret) == 0 {
		panic("no return value specified for CalculateStage")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, transactionstore.TxStateGetters) string); ok {
		r0 = rf(ctx, tsg)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetAllStages provides a mock function with given fields:
func (_m *StageController) GetAllStages() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllStages")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// PerformActionForStage provides a mock function with given fields: ctx, stage, tsg
func (_m *StageController) PerformActionForStage(ctx context.Context, stage string, tsg transactionstore.TxStateGetters) (interface{}, error) {
	ret := _m.Called(ctx, stage, tsg)

	if len(ret) == 0 {
		panic("no return value specified for PerformActionForStage")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, transactionstore.TxStateGetters) (interface{}, error)); ok {
		return rf(ctx, stage, tsg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, transactionstore.TxStateGetters) interface{}); ok {
		r0 = rf(ctx, stage, tsg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, transactionstore.TxStateGetters) error); ok {
		r1 = rf(ctx, stage, tsg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessEventsForStage provides a mock function with given fields: ctx, stage, tsg, stageEvents
func (_m *StageController) ProcessEventsForStage(ctx context.Context, stage string, tsg transactionstore.TxStateGetters, stageEvents []*types.StageEvent) ([]*types.StageEvent, *transactionstore.TransactionUpdate, types.StageProcessNextStep) {
	ret := _m.Called(ctx, stage, tsg, stageEvents)

	if len(ret) == 0 {
		panic("no return value specified for ProcessEventsForStage")
	}

	var r0 []*types.StageEvent
	var r1 *transactionstore.TransactionUpdate
	var r2 types.StageProcessNextStep
	if rf, ok := ret.Get(0).(func(context.Context, string, transactionstore.TxStateGetters, []*types.StageEvent) ([]*types.StageEvent, *transactionstore.TransactionUpdate, types.StageProcessNextStep)); ok {
		return rf(ctx, stage, tsg, stageEvents)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, transactionstore.TxStateGetters, []*types.StageEvent) []*types.StageEvent); ok {
		r0 = rf(ctx, stage, tsg, stageEvents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.StageEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, transactionstore.TxStateGetters, []*types.StageEvent) *transactionstore.TransactionUpdate); ok {
		r1 = rf(ctx, stage, tsg, stageEvents)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*transactionstore.TransactionUpdate)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, transactionstore.TxStateGetters, []*types.StageEvent) types.StageProcessNextStep); ok {
		r2 = rf(ctx, stage, tsg, stageEvents)
	} else {
		r2 = ret.Get(2).(types.StageProcessNextStep)
	}

	return r0, r1, r2
}

// NewStageController creates a new instance of StageController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStageController(t interface {
	mock.TestingT
	Cleanup(func())
}) *StageController {
	mock := &StageController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

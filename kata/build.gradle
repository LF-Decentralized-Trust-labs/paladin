/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import org.apache.tools.ant.taskdefs.condition.Os

ext {
    targetCoverage = 84
    maxCoverageBarGap = 1
}

task installTools(type:Exec) {
    workingDir '.'
    environment('GOBIN', "${projectDir}/bin")
    executable 'go'
    args 'install'
    inputs.files('go.mod')
    outputs.files([
        "${projectDir}/bin/protoc-gen-go",
        "${projectDir}/bin/protoc-gen-go-grpc",
        "${projectDir}/bin/golangci-lint",
    ])
    // We use go.mod for dependency version management
    // tools/tools.go tracks deps too - to avoid go mod tidy discarding them all
    args 'google.golang.org/protobuf/cmd/protoc-gen-go'
    args 'google.golang.org/grpc/cmd/protoc-gen-go-grpc'
    args 'github.com/golangci/golangci-lint/cmd/golangci-lint'
}

task protoc(type:Exec, dependsOn: tasks.installTools) {
    workingDir '.'
    inputs.files(fileTree("${projectDir}").matching {
        include "**/*.proto"
    })
    outputs.files(fileTree("${projectDir}").matching {
        include "**/*.pb.go"
    })
    environment 'PATH', "${projectDir}/bin" + File.pathSeparator + System.getenv('PATH')
    executable 'protoc'
    args "--go_out=${projectDir}"
    args "--go-grpc_out=${projectDir}"
    args "--proto_path=${projectDir}"
    args inputs.files
}

task clean(type:Exec) {
    workingDir '.'
    // This will delete anything ignored with a .gitignore
    executable 'git'
    args "clean"
    args "-fdX"
}

task goGet(type:Exec, dependsOn:tasks.protoc) {
    workingDir '.'

    inputs.files('go.mod')
    inputs.files(fileTree("${projectDir}").matching {
        include "**/*.go"
    })
    outputs.files('go.sum')

    executable 'go'
    args 'get'
}


task lint(type: Exec, dependsOn:tasks.protoc) {
    workingDir '.'

    inputs.files(fileTree("${projectDir}").matching {
        include "**/*.go"
    });
    outputs.files([]);
    environment 'GOGC', '20'

    executable "${projectDir}/bin/golangci-lint"
    args 'run'
    args '-v'
    args '--timeout', '5m'
}

// Must NOT depend on clean (which would delete all deliberately ignored files like .vscode config)
task buildSharedLibrary(type:Exec, dependsOn:[tasks.goGet,tasks.lint]) {
    workingDir '.'

    def libName;
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        libName = "libkata.dll"
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        libName = "libkata.dylib"
    } else {
        libName = "libkata.so"
    }

    inputs.files(fileTree("${projectDir}").matching {
        include "**/*.go"
    })
    outputs.files([libName, 'libkata.h'])

    environment("CGO_ENABLED", "1")

    executable 'go'
    args 'build'
    args '-o', libName
    args '-buildmode=c-shared'
    args 'kata.go'
}

class DockerCompose extends Exec {
    DockerCompose() {
        def dockerComposeV2Check = getProject().exec({
            ignoreExitValue = true
            executable "docker"
            args "compose", "version"
            standardOutput = new ByteArrayOutputStream()
            errorOutput = new ByteArrayOutputStream()
        })
        if (dockerComposeV2Check.getExitValue() == 0){
            executable 'docker'
            args 'compose'
        } else {
            executable 'docker-compose'
        }
        args '-f'
    }
}

class DockerComposeTest extends DockerCompose {
    DockerComposeTest() {
        def dbComposeFile = "${getProject().projectDir}/docker-compose-test.yml"
        args dbComposeFile
    }
}

class DockerComposeDemo extends DockerCompose {
    DockerComposeDemo() {
        def dbComposeFile = "${getProject().rootDir}/demo/docker-compose.yml"
        args dbComposeFile
    }
}

ext.dockerCompose = { param1, param2 ->
    // Method body here
}

task startDb(type: DockerComposeTest) {
    mustRunAfter(tasks.protoc)
    args 'up', '-d'
}

task startDemoDb(type: DockerComposeDemo) {
    mustRunAfter(tasks.protoc)
    args 'up', '-d'
}

task stopDb(type: DockerComposeTest) {
    args 'down'
}

task stopDemoDb(type: DockerComposeDemo) {
    args 'down'
}

class UnitTests extends Exec {
    
    @Input
    String database

    UnitTests() {
        workingDir '.'

        inputs.files(getProject().fileTree("${getProject().projectDir}").matching {
            include "**/*.go"
        })
        outputs.files(["coverate_unittests_${database}.txt"])

        executable 'go'
        args 'test'
        args './pkg/... ./internal/...'
        args '-cover'
        args "-coverprofile=coverage_unittests_${database}.txt"
        args '-covermode=atomic'
        args '-timeout=30s'
    }
}

class ComponentTest extends Exec {
    
    @Input
    String database

    ComponentTest() {
        workingDir '.'

        inputs.files(getProject().fileTree("${getProject().projectDir}").matching {
            include "**/*.go"
        })
        outputs.files(["coverate_component_${database}.txt"])

        executable 'go'
        args 'test'
        args './componenttest'
        args '-cover'
        args '-tags', "testdb${database}"
        args "-coverpkg=github.com/kaleido-io/paladin/..."
        args "-coverprofile=coverage_component_${database}.txt"
        args '-covermode=atomic'
        args '-timeout=30s'
    }
}

task unitTestSQLite(type: UnitTests, dependsOn: [tasks.goGet, tasks.startDb]) {
    database 'sqlite'
}

task unitTestPostgres(type: UnitTests, dependsOn: [tasks.goGet, tasks.startDb]) {
    database 'postgres'
}

task componentTestSQLite(type: ComponentTest, dependsOn: [tasks.goGet, tasks.startDb]) {
    database 'sqlite'
}

task componentTestPostgres(type: ComponentTest, dependsOn: [tasks.goGet, tasks.startDb]) {
    database 'postgres'
}

task test(dependsOn: [
        tasks.unitTestSQLite,
        tasks.unitTestPostgres,
        tasks.componentTestSQLite,
        tasks.componentTestPostgres
    ]) {
}

task checkCoverage(dependsOn: tasks.test) {
    inputs.files("coverage_unittests_sqlite.txt")
    inputs.files("coverage_unittests_psql.txt")
    inputs.files("coverage_component_sqlite.txt")
    inputs.files("coverage_component_psql.txt")
    outputs.files([])

    doLast {
        def coverageOutput = "go tool cover " + 
            "-func=${projectDir}/coverage_unittests_sqlite.txt" +
            "-func=${projectDir}/coverage_unittests_postgres.txt" +
            "-func=${projectDir}/coverage_component_sqlite.txt" +
            "-func=${projectDir}/coverage_component_postgres.txt".execute().text
        def totalCoverage = coverageOutput.readLines().find { it.contains('total:') }?.split()?.last()?.replace('%', '')
        println "Coverage is ${totalCoverage}%"
        if (totalCoverage && totalCoverage.toFloat() < targetCoverage) {
            throw new GradleException("ERROR: Coverage is below ${targetCoverage}% (current coverage: ${totalCoverage}%)")
        } else if ( totalCoverage.toFloat() - targetCoverage > maxCoverageBarGap) {
            throw new GradleException("ERROR: The target coverage ${targetCoverage}% is below the current coverage: ${totalCoverage}% for more than ${maxCoverageBarGap}%, please update the targetCoverage value in ./kata/build.gradle file")
        } else {
            println "Coverage is above ${targetCoverage}%, current coverage: ${totalCoverage}%"
        }
    }
}


task testcov(type: Exec, dependsOn: test) {
    workingDir '.'
    executable 'go'
    args 'tool'
    args 'cover'
    args '-html=coverage_sqlite.txt'
}

task build {
    dependsOn tasks.checkCoverage
}

configurations {
    libkata
    protocFiles {
        canBeConsumed = true
        canBeResolved = false
    }
}

tasks.register('zipProtocFiles', Zip) {  
    from fileTree("${projectDir}").matching {
        include "**/*.proto"
    }
    archiveFileName = "proto.zip"
    destinationDirectory = file("$projectDir")
    dependsOn('protoc')
}

artifacts {
    protocFiles(zipProtocFiles)
}

dependencies {
    libkata files(buildSharedLibrary)
}



/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.LineContains

ext {
    goFiles = fileTree(".") {
        include "internal/**/*.go"
        include "pkg/**/*.go"
        include "componenttest/**/*.go"
        include "mocks/**/*.go"
    }

    targetCoverage = 92
    maxCoverageBarGap = 1
    coverageExcludedPackages = [
        'github.com/kaleido-io/paladin/kata/pkg/proto',
        'github.com/kaleido-io/paladin/kata/pkg/proto/plugin',
        'github.com/kaleido-io/paladin/kata/pkg/proto/transaction',
        'github.com/kaleido-io/paladin/kata/internal/plugins/loader'
    ]
}

task installTools(type:Exec) {
    workingDir '.'
    environment('GOBIN', "${projectDir}/bin")
    executable 'go'
    args 'install'
    inputs.files(['go.mod','go.sum'])
    outputs.files(
        "bin/protoc-gen-go",
        "bin/protoc-gen-go-grpc",
        "bin/golangci-lint",
        "bin/mockery",
    )
    // We use go.mod for dependency version management
    // tools/tools.go tracks deps too - to avoid go mod tidy discarding them all
    args 'google.golang.org/protobuf/cmd/protoc-gen-go'
    args 'google.golang.org/grpc/cmd/protoc-gen-go-grpc'
    args 'github.com/golangci/golangci-lint/cmd/golangci-lint'
    args 'github.com/vektra/mockery/v2'
}

task setupSolidityNodeJS(type:Exec) {
    workingDir "solidity"
    executable 'npm'
    args 'i'
    inputs.files([
        "contracts/package.json",
        "contracts/package-lock.json",
    ])
    outputs.files([
        "contracts/package-lock.json",
    ])
    outputs.dir("contracts/node_modules")
}

task compileTestSolidity(type:Exec, dependsOn: tasks.setupSolidityNodeJS) {
    workingDir "solidity"
    executable 'npx'
    args 'hardhat'
    args 'test'
    inputs.files(fileTree("solidity") {
        include "contracts/**/*.sol"
        include "test/**/*.ts"
    })
    outputs.dirs([
        "solidity/artifacts",
        "solidity/cache",
        "solidity/typechain-types",
    ])
}

task copyDomainSIMContractsToTestbed(type:Copy, dependsOn: compileTestSolidity) {
    from('solidity/artifacts/contracts/testbed_sim/SIMDomain.sol') {
        include 'SIMDomain.json'
    }
    from('solidity/artifacts/contracts/testbed_sim/SIMToken.sol') {
        include 'SIMToken.json'
    }
    into 'domain_testbed'
}

task makeRPCMocks(type:Exec, dependsOn: tasks.installTools) {
    inputs.files('bin/mockery')
    outputs.dir('mocks/rpcbackendmocks')
    executable 'bin/mockery'
    args '--case', 'underscore'
    args '--dir', "go list -f {{.Dir}} github.com/hyperledger/firefly-signer/pkg/rpcbackend".execute().text.trim()
    args '--all'
    args '--outpkg', 'rpcbackendmocks'
    args '--output', 'mocks/rpcbackendmocks'
}

task makeMocks(dependsOn: [
    tasks.makeRPCMocks,
]) {}

task protoc(type:Exec, dependsOn: tasks.makeMocks) {
    workingDir '.'
    inputs.files(fileTree("pkg/proto") { include "**/*.proto" })
    outputs.files(fileTree("pkg/proto") { include "**/*.pb.go" })
    environment 'PATH', "${projectDir}/bin" + File.pathSeparator + System.getenv('PATH')
    executable 'protoc'
    args "--go_out=${projectDir}"
    args "--go-grpc_out=${projectDir}"
    args "--proto_path=${projectDir}"
    args inputs.files
}


task goGet(type:Exec, dependsOn:tasks.protoc) {
    workingDir '.'

    inputs.files('go.mod')
    inputs.files(goFiles)
    outputs.files('go.sum')

    executable 'go'
    args 'get'
}

task lint(type: Exec, dependsOn:tasks.protoc) {
    workingDir '.'

    inputs.files(goFiles);
    environment 'GOGC', '20'

    executable "${projectDir}/bin/golangci-lint"
    args 'run'
    args '-v'
    args '--color=always'
    args '--timeout', '5m'
}

task buildSharedLibrary(type:Exec, dependsOn:[tasks.goGet,tasks.lint]) {
    workingDir '.'

    def libName;
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        libName = "libkata.dll"
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        libName = "libkata.dylib"
    } else {
        libName = "libkata.so"
    }

    inputs.files(goFiles)
    outputs.files(libName, 'libkata.h')

    environment("CGO_ENABLED", "1")

    executable 'go'
    args 'build'
    args '-o', libName
    args '-buildmode=c-shared'
    args 'kata.go'
}

task buildTestPluginsSharedLibraryA(type:Exec) {

    workingDir '.'

    def libName;
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        libName = "transportA.dll"
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        libName = "transportA.so"
    } else {
        libName = "libtransportA.so"
    }

    inputs.files(fileTree("${projectDir}").matching {
        include "test/plugins/transport/A/*.go"
    })
    outputs.files([libName, 'libtransportA.h'])

    environment("CGO_ENABLED", "1")

    executable 'go'
    args 'build'
    args '-o', libName
    args '-buildmode=plugin'
    args 'test/plugins/transport/A/main.go'
}

task buildTestPluginsSharedLibraries {
    dependsOn tasks.buildTestPluginsSharedLibraryA

}

class DockerCompose extends Exec {
    DockerCompose() {
        def dockerComposeV2Check = "docker compose version".execute().text
        if (dockerComposeV2Check.contains("Docker Compose")){
            executable 'docker'
            args 'compose'
        } else {
            executable 'docker-compose'
        }
        args '-f'
    }
}

class DockerComposeTest extends DockerCompose {
    DockerComposeTest() {
        def dbComposeFile = "${getProject().projectDir}/docker-compose-test.yml"
        args dbComposeFile
    }
}

class DockerComposeDemo extends DockerCompose {
    DockerComposeDemo() {
        def dbComposeFile = "${getProject().rootDir}/demo/docker-compose.yml"
        args dbComposeFile
    }
}

task generateBesuConfig(type: Exec) {
    inputs.files([])
    outputs.files([
        'test/besu/genesis.json',
        'test/besu/key',
        'test/besu/key.pub',
    ])
    executable "go"
    args "run", "./tools/besu_bootstrap", "test/besu"
}

task startTestInfra(type: DockerComposeTest, dependsOn: generateBesuConfig) {
    mustRunAfter(tasks.protoc)
    args 'up', '-d'
}

task stopTestInfra(type: DockerComposeTest) {
    args 'down'
}

task clean(type: Delete, dependsOn: tasks.stopTestInfra) {
    delete '*.dylib', '*.so', '*.dll', 'libkata.h'
    delete fileTree("bin") {
        exclude "README.md", ".gitignore"
    }
    delete fileTree(".") {
        include "**/*.pb.go"
    }
    delete 'test/besu'
    delete 'coverage'
    delete "solidity/artifacts"
}

abstract class UnitTests extends Exec {
    {
        inputs.files(getProject().goFiles)
        outputs.dir('coverage')

        workingDir '.'
        executable 'go'
        args 'test'
        args './pkg/...', './internal/...'
        args '-cover'
        args '-covermode=atomic'
        args '-timeout=30s'
        args "-test.gocoverdir=${getProject().projectDir}/coverage"
    }
}

abstract class ComponentTest extends Exec {


    {
        java.text.DateFormat df = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
        df.setTimeZone(java.util.TimeZone.getTimeZone("UTC"))
        Date startTime = new Date();

        inputs.files(getProject().goFiles)
        inputs.files(getProject().fileTree("domain_testbed") {
            include "**/*.json"
        })

        outputs.dir('coverage')

        workingDir '.'
        executable 'go'
        args 'test'
        args './componenttest', './domain_testbed'
        args '-cover'
        args "-coverpkg=github.com/kaleido-io/paladin/..."
        args '-covermode=atomic'
        args '-timeout=30s'
        args "-test.gocoverdir=${getProject().projectDir}/coverage"

        ignoreExitValue true

        doLast {
            def ExecResult execResult = getExecutionResult().get();
            if(execResult.getExitValue() != 0) {
                println "COMPONENT TEST FAILED - OUTPUTTING LOGS"
                println "docker logs --since ${df.format(startTime)} paladin-test-db".execute().waitForProcessOutput(System.err,System.err)
                println "docker logs --since ${df.format(startTime)} paladin-test-besu".execute().waitForProcessOutput(System.err,System.err)
                throw new Exception("COMPONENT TEST FAILED - SEE TEST OUTPUT BEFORE LOGS");
            }
        }
    }
}

task setupCoverage(dependsOn: tasks.protoc) {
    inputs.files(goFiles)
    outputs.dir('coverage')
    doLast {
        delete fileTree (project.mkdir('coverage')) {
            include "coverage.txt"
            include "covcounters.*"
            include "covmeta.*"
        }
    }
}

task unitTestSQLite(type: UnitTests, dependsOn: [tasks.setupCoverage, tasks.goGet]) {
}

task unitTestPostgres(type: UnitTests, dependsOn: [tasks.setupCoverage, tasks.goGet, tasks.startTestInfra]) {
    args '-tags', "testdbpostgres"
}

task componentTestSQLite(type: ComponentTest, dependsOn: [
    tasks.setupCoverage,
    tasks.goGet,
    tasks.copyDomainSIMContractsToTestbed,
    tasks.startTestInfra,
]) {
}


task buildCoverageTxt(type: Exec, dependsOn: [tasks.protoc,
        tasks.unitTestSQLite,
        tasks.unitTestPostgres,
        tasks.componentTestSQLite,
        // tasks.componentTestPostgres
    ]) {
    inputs.files(fileTree(project.mkdir('coverage')) {
        include "covcounters.*"
        include "covmeta.*"
    })
    outputs.files('coverage/coverage_unfiltered.txt')
    executable 'go'
    args 'tool', 'covdata', 'textfmt'
    args '-i', "${projectDir}/coverage"
    args '-o', "${projectDir}/coverage/coverage_unfiltered.txt"

}

task aggregateCoverage(type: Copy, dependsOn: tasks.buildCoverageTxt) {
    from 'coverage/coverage_unfiltered.txt'
    into 'coverage'
    outputs.files('coverage/coverage.txt')
    eachFile { fcd ->
        fcd.setRelativePath(fcd.relativePath.replaceLastName('coverage.txt'))
    }
    filter(LineContains, negate: true, contains: getProject().ext.coverageExcludedPackages, matchAny: true) 
}

task checkCoverage(dependsOn: [tasks.aggregateCoverage]) {
    inputs.files('coverage/coverage.txt')

    doLast {
        def coverageOutput = ("go tool cover -func=${projectDir}/coverage/coverage.txt").execute().text
        def totalCoverage = coverageOutput.readLines().find { it.contains('total:') }?.split()?.last()?.replace('%', '')
        println "Coverage is ${totalCoverage}%"
        if (totalCoverage && totalCoverage.toFloat() < targetCoverage) {
            throw new GradleException("ERROR: Coverage is below ${targetCoverage}% (current coverage: ${totalCoverage}%)")
        } else if ( totalCoverage.toFloat() - targetCoverage > maxCoverageBarGap) {
            throw new GradleException("ERROR: The target coverage ${targetCoverage}% is below the current coverage: ${totalCoverage}% for more than ${maxCoverageBarGap}%, please update the targetCoverage value in ./kata/build.gradle file")
        } else {
            println "Coverage is above ${targetCoverage}%, current coverage: ${totalCoverage}%"
        }
    }
}

task test() {
    finalizedBy [
        tasks.checkCoverage,
    ]
}

task testcov(type: Exec, dependsOn: [tasks.test, tasks.aggregateCoverage]) {
    inputs.files('coverage/coverage.txt')
    workingDir '.'
    executable 'go'
    args 'tool'
    args 'cover'
    args '-html=coverage/coverage.txt'
}

task build {
    dependsOn tasks.lint
    dependsOn tasks.test
    dependsOn tasks.aggregateCoverage
    dependsOn tasks.checkCoverage
}

configurations {
    libkata
    protocFiles {
        canBeConsumed = true
        canBeResolved = false
    }
}

tasks.register('zipProtocFiles', Zip) {  
    from fileTree("pkg") {
        include "**/*.proto"
    }
    eachFile { fcd ->
        fcd.setRelativePath(fcd.relativePath.prepend("pkg"))
    }
    archiveFileName = "proto.zip"
    destinationDirectory = file("$projectDir")
    includeEmptyDirs = false
    dependsOn('protoc')
}

artifacts {
    protocFiles(zipProtocFiles)
}

dependencies {
    libkata files(buildSharedLibrary)
}

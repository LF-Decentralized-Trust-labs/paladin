/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

syntax = "proto3";

package github.com.kaleido_io.paladin.kata;
option go_package = "pkg/proto";

message ResolveKeyRequest {
  repeated string algorithms = 1;
  repeated KeyPathSegment path = 2;
}

message ResolveKeyResponse {
  string key_handle = 1;
  repeated PublicKeyIdentifier identifiers = 2;
}

message SignRequest {
  string key_handle = 1; // the key handle as returned by a previoius Resolve call (potentially a very long time ago)
  string algorithm = 2; // a descriptor that Paladin documents to descbe to the signer how to process the input payload, algorithm+curve of signing, and response formatting
  bytes payload = 3; // the input payload to process according to the algorithm
}

message SignResponse {
  bytes payload = 1; // an set of bytes appropriate to the Paladin signing algorithm spec used
}

message ListKeysRequest {
  int32 limit = 1; // the maximum number of records to return
  string continue = 2; // the "next" string from a previous call, or empty
}

message ListKeysResponse {
  repeated ListKeyHandleEntry items = 1; // any length less than the limit will cause the caller to assume there might be more records
  string next = 2; // non empty string to support pagination when the are potentially more records
}

message ListKeyHandleEntry {
  string top_level_name = 1;
  string key_handle = 2;
  repeated PublicKeyIdentifier identifiers = 3;
}

message KeyPathSegment {
  string name = 1;
  uint64 index = 2;
  map<string, string> attributes = 3;
}

message PublicKeyIdentifier {
  string algorithm = 1;
  string identifier = 2;
}

/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

syntax = "proto3";

package github.com.kaleido_io.paladin.kata;
option go_package = "pkg/proto/sequence";
import "google/protobuf/any.proto";

// StateClaiomEvent is an event that is emitted when a node has pressumptively claimed a state that it believes to be available ( i.e. either in pending or confirmed metastate).
// if this believe is not held by any other node ( i.e. they beleive it is already claimed) then this will trigger a contention resolution process to determine the rightful claimer of the state.
message StateClaimEvent {
    string stateHash = 1;
    string transactionId = 2;
}

// StateClaimLostEvent is an event that is emitted after a contention resolution process has determined that a claim has been lost by the given transaction
message StateClaimLostEvent {
    string stateHash = 1;
    string transactionId = 2;
}

message ReassembleRequest {
    string transactionId = 1;   
}

message TransactionAssembledEvent {
    string transactionId = 1;
    string nodeId = 2;
    repeated string inputStateHash = 3;
    repeated string outputStateHash = 4;
}

message TransactionEndorsedEvent {
    string transactionId = 1;
}

message DelegateTransaction {
    string transactionId = 1;
    string delegatingNodeId = 2;
    string delegateNodeId = 3;
}